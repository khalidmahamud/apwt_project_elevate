var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AddDobToUsers1714389820000.html",[0,0.066,1,2.973]],["body/classes/AddDobToUsers1714389820000.html",[0,0.089,1,4.901,2,1.767,3,0.252,4,0.225,5,0.225,6,5.925,7,4.452,8,3.609,9,5.925,10,0.333,11,1.823,12,4.546,13,3.083,14,5.472,15,5.472,16,5.472,17,6.659,18,0.792,19,5.156,20,1.904,21,0.017,22,1.287,23,0.515,24,1.021,25,1.823,26,3.836,27,5.472,28,5.156,29,0.333,30,1.848,31,0.252,32,3.987,33,6.338,34,3.678,35,3.133,36,3.038,37,5.472,38,6.338,39,4.901,40,1.672,41,4.475,42,1.767,43,3.641,44,5.156,45,0.014,46,0.014]],["title/entities/Address.html",[47,1.442,48,1.843]],["body/entities/Address.html",[0,0.071,3,0.2,4,0.179,5,0.179,10,0.264,18,0.947,21,0.017,22,0.83,23,0.636,29,0.352,30,1.466,31,0.2,34,3.962,35,3.32,40,1.732,42,2.25,45,0.012,46,0.012,47,1.534,48,2.619,49,2.07,50,3.531,51,1.06,52,6.151,53,6.151,54,2.417,55,1.694,56,6.151,57,6.151,58,6.151,59,6.151,60,6.151,61,3.502,62,1.655,63,4.157,64,1.074,65,1.757,66,4.437,67,5.865,68,5.865,69,4.007,70,4.09,71,4.09,72,4.013,73,4.09,74,3.32,75,4.09,76,2.58,77,1.505,78,1.791,79,4.09,80,5.076,81,1.571,82,4.09,83,4.224,84,4.09,85,4.09,86,4.09,87,4.013,88,4.09,89,3.163,90,4.09,91,4.09,92,3.564,93,4.09,94,2.329,95,3.857,96,3.857,97,4.09,98,4.09,99,4.09]],["title/modules/AdminModule.html",[100,1.584,101,2.508]],["body/modules/AdminModule.html",[0,0.085,3,0.241,4,0.216,5,0.216,21,0.017,29,0.497,31,0.241,40,1.302,45,0.013,46,0.013,100,2.773,101,5.058,102,2.499,103,2.499,104,2.811,105,2.811,106,2.499,107,3.832,108,3.832,109,4.262,110,4.262,111,4.262,112,4.262,113,4.498,114,4.214,115,4.734,116,3.513,117,2.811,118,2.366,119,4.936,120,2.315,121,4.751,122,4.39,123,4.751,124,3.749,125,1.095,126,3,127,2.034,128,3,129,2.211,130,4.262,131,6.169,132,4.936,133,4.262,134,4.262,135,3.817,136,4.262,137,4.936,138,4.262,139,4.262,140,3.817]],["title/controllers/AdminOrdersController.html",[123,2.714,141,1.317]],["body/controllers/AdminOrdersController.html",[0,0.046,3,0.131,4,0.117,5,0.117,10,0.173,11,1.164,18,0.764,20,1.838,21,0.017,22,1.506,23,0.622,24,0.986,25,1.76,29,0.422,31,0.131,42,2.661,45,0.009,46,0.009,55,1.115,63,3.718,64,1.011,65,1.418,77,0.739,78,2.465,81,1.56,120,1.007,123,2.858,125,0.595,129,0.962,141,0.92,142,4.911,143,2.317,144,1.528,145,2.684,146,2.466,147,4.206,148,4.206,149,4.206,150,4.206,151,4.206,152,1.631,153,1.45,154,2.193,155,2.39,156,4.208,157,5.705,158,5.855,159,1.895,160,4.143,161,2.89,162,2.684,163,1.945,164,2.858,165,3.13,166,1.778,167,2.684,168,2.684,169,5.821,170,2.684,171,4.264,172,2.317,173,2.684,174,3.13,175,2.143,176,4.872,177,2.684,178,2.317,179,2.684,180,1.451,181,4.047,182,2.684,183,2.317,184,4.732,185,4.732,186,4.195,187,4.195,188,2.684,189,2.858,190,3.13,191,1.007,192,2.684,193,1.106,194,2.317,195,4.616,196,4.047,197,2.684,198,2.468,199,4.047,200,3.494,201,3.297,202,1.188,203,2.907,204,2.961,205,2.684,206,3.494,207,2.317,208,2.317,209,1.751,210,2.64,211,1.842,212,2.684,213,1.751,214,1.631,215,1.751,216,1.287,217,1.359,218,1.751,219,2.774,220,2.684,221,1.287,222,1.895,223,1.631,224,2.049,225,2.076,226,2.076,227,0.88,228,1.528,229,2.684,230,1.751,231,1.528,232,3.616,233,3.089,234,4.675,235,2.858,236,0.739,237,2.684,238,2.684,239,1.751,240,2.076,241,1.359,242,0.88,243,3.484,244,2.684,245,2.076,246,1.895,247,2.317,248,2.684,249,4.683,250,4.683,251,1.76,252,2.317,253,2.684,254,3.44,255,2.317,256,2.684,257,2.684,258,2.684,259,2.684,260,2.684,261,2.317,262,2.317,263,4.047,264,4.047,265,2.684,266,2.684,267,2.684]],["title/controllers/AdminProductsController.html",[122,2.508,141,1.317]],["body/controllers/AdminProductsController.html",[0,0.04,3,0.114,4,0.102,5,0.102,10,0.15,11,1.045,13,2.8,18,0.781,20,1.815,21,0.017,22,1.227,23,0.522,24,0.973,25,1.798,29,0.414,31,0.114,36,2.416,45,0.008,46,0.008,55,1.871,64,1.001,65,1.448,120,0.875,122,2.37,125,0.517,129,0.836,141,0.799,144,1.328,155,2.419,161,3.371,164,2.463,180,2.787,198,2.293,200,2.013,201,4.233,202,1.531,203,1.947,204,3.798,209,4.077,210,4.431,211,3.091,213,2.37,214,2.208,215,1.521,216,1.118,218,1.521,221,1.118,222,1.646,223,1.417,224,1.839,225,1.803,226,1.803,227,0.764,228,1.328,231,1.328,232,3.656,233,4.219,235,2.565,236,0.642,239,1.521,240,1.803,241,1.18,242,0.764,243,3.558,251,1.798,254,4.086,268,5.543,269,2.013,270,2.332,271,2.701,272,4.351,273,3.137,274,3.633,275,3.633,276,3.633,277,3.633,278,2.013,279,3.942,280,1.803,281,1.871,282,3.137,283,3.633,284,2.332,285,2.81,286,2.37,287,6.131,288,5.492,289,6.131,290,2.332,291,2.332,292,2.37,293,1.302,294,2.332,295,2.37,296,2.332,297,2.013,298,2.332,299,3.452,300,3.633,301,4.351,302,3.633,303,5.786,304,2.332,305,2.332,306,6.249,307,3.798,308,2.332,309,6.249,310,3.516,311,5.395,312,4.077,313,5.04,314,2.332,315,6.249,316,2.332,317,2.181,318,2.332,319,2.332,320,3.672,321,2.332,322,2.332,323,2.332,324,2.332,325,3.516,326,2.332,327,2.332,328,2.332,329,2.013,330,3.516,331,2.332,332,2.332,333,1.25,334,4.189,335,1.803,336,2.208,337,2.332,338,2.332,339,2.392,340,1.803,341,1.417,342,3.137,343,1.417,344,3.152,345,2.332,346,2.565,347,2.332,348,1.803,349,2.332,350,1.646,351,1.803,352,5.463,353,2.332,354,2.332,355,2.332,356,2.332,357,1.981,358,4.351,359,1.417,360,2.332,361,2.332,362,1.417,363,2.332,364,2.332,365,1.417,366,2.332,367,2.332,368,1.417,369,2.332,370,2.332,371,2.332]],["title/classes/AdminUpdateUserDto.html",[0,0.066,372,2.508]],["body/classes/AdminUpdateUserDto.html",[0,0.11,2,1.151,3,0.164,4,0.147,5,0.147,10,0.217,18,0.885,21,0.017,22,1.345,23,0.621,24,1.226,29,0.427,31,0.164,32,4.669,41,3.916,42,2.386,45,0.01,46,0.01,48,2.659,51,0.926,62,1.862,64,1.018,65,1.641,76,2.737,78,1.101,81,1.372,153,1.23,155,2.185,161,2.524,164,1.79,166,1.564,202,1.41,227,2.406,236,1.314,293,1.71,336,2.042,372,3.619,373,4.686,374,2.372,375,2.899,376,2.171,377,3.689,378,2.064,379,3.145,380,2.808,381,2.659,382,3.371,383,4.789,384,2.808,385,5.002,386,4.543,387,3.36,388,3.36,389,4.582,390,4.789,391,3.36,392,3.36,393,4.77,394,3.36,395,3.236,396,4.77,397,3.36,398,4.322,399,3.36,400,1.701,401,2.064,402,3.36,403,3.36,404,3.056,405,3.36,406,3.36,407,3.36,408,3.36,409,3.36,410,3.438,411,3.368,412,1.611,413,2.96,414,2.373,415,2.598,416,1.635,417,2.598,418,2.415,419,1.701,420,4.033,421,4.77,422,2.042,423,1.913,424,1.701,425,2.042,426,2.372]],["title/controllers/AdminUserController.html",[121,2.714,141,1.317]],["body/controllers/AdminUserController.html",[0,0.043,3,0.121,4,0.108,5,0.108,10,0.16,11,1.094,13,3.001,18,0.74,20,1.78,21,0.017,22,1.327,23,0.588,24,0.995,25,1.88,26,3.177,29,0.422,31,0.121,40,1.681,45,0.008,46,0.008,51,0.738,55,2.073,62,1.898,64,1.004,65,1.373,76,2.044,78,1.84,81,1.094,92,2.481,115,2.816,120,0.928,121,2.686,125,0.549,129,0.887,133,2.136,134,2.136,141,1.588,142,4.774,144,1.409,146,1.925,153,0.844,154,1.363,155,2.299,159,1.747,161,2.555,163,1.363,164,2.224,165,1.913,166,0.811,191,2.694,198,2.809,202,1.51,203,3.415,204,3.752,208,2.136,209,3.662,211,2.9,214,2.311,215,1.614,216,2.691,217,2.345,218,1.614,221,1.186,223,1.503,224,1.925,227,2.312,231,1.409,232,3.515,233,4.119,234,3.023,235,2.686,236,0.682,239,1.614,240,1.913,241,1.252,242,0.811,243,3.375,251,1.705,261,2.136,262,4,281,0.682,288,4.022,292,3.393,293,0.887,295,3.867,317,2.565,333,1.326,335,1.913,336,2.311,344,3.272,350,1.747,372,3.393,376,1.731,377,1.913,378,1.646,381,2.841,389,2.311,395,2.038,401,1.646,417,1.913,427,3.284,428,2.474,429,2.481,430,3.583,431,2.686,432,2.038,433,4.49,434,4,435,4.634,436,2.136,437,2.962,438,3.009,439,2.474,440,2.136,441,2.166,442,4.634,443,2.474,444,2.841,445,3.284,446,1.823,447,1.326,448,1.913,449,2.136,450,3.804,451,2.474,452,2.474,453,2.474,454,4,455,2.474,456,2.136,457,4,458,2.474,459,3.161,460,3.804,461,2.941,462,3.804,463,2.474,464,4.49,465,2.136,466,2.474,467,2.474,468,2.474,469,2.474,470,2.474,471,1.913,472,2.136,473,5.614,474,3.284,475,1.614,476,1.747,477,1.913,478,2.474,479,2.474,480,2.474,481,4,482,2.474,483,2.474,484,5.927,485,4.634,486,4.634,487,4.634,488,2.474,489,2.474,490,2.474,491,2.474,492,1.747,493,5.201,494,1.747,495,2.474,496,1.503,497,2.474,498,2.941,499,2.474,500,2.474,501,3.284,502,2.474,503,2.474,504,2.474,505,2.136,506,2.474,507,2.474]],["title/classes/AdminUserQueryDto.html",[0,0.066,437,2.189]],["body/classes/AdminUserQueryDto.html",[0,0.093,2,0.915,3,0.13,4,0.117,5,0.117,10,0.172,18,0.875,21,0.017,23,0.625,24,1.223,29,0.349,31,0.237,40,1.428,42,2.237,45,0.01,46,0.009,51,0.782,54,1.05,62,1.784,64,1.002,65,1.624,76,2.492,77,1.875,153,1.698,154,1.939,155,1.698,161,2.21,163,2.609,166,1.904,175,1.322,191,1.002,193,1.662,202,1.422,227,2.324,228,1.521,236,0.736,293,1.741,373,4.625,375,2.45,376,1.835,378,1.156,379,2.341,380,2.458,381,2.328,382,2.952,384,2.458,386,4.512,395,2.9,398,2.63,404,2.739,410,2.766,412,1.28,413,2.922,414,2.127,416,0.915,419,1.352,420,4.037,422,1.623,423,1.521,424,1.352,425,1.623,426,1.886,437,2.766,438,2.161,444,2.784,446,2.328,508,1.623,509,3.756,510,3.429,511,3.429,512,3.429,513,3.429,514,3.61,515,3.169,516,3.169,517,4.48,518,4.184,519,4.032,520,2.671,521,4.032,522,2.671,523,4.032,524,2.306,525,2.671,526,2.9,527,2.671,528,2.671,529,2.127,530,2.753,531,3.113,532,2.671,533,2.671,534,1.939,535,2.671,536,2.671,537,2.671,538,2.671,539,2.671,540,3.82,541,2.671,542,2.671,543,3.82,544,2.45,545,2.671,546,2.671,547,2.603,548,2.739,549,2.671,550,2.671,551,3.789,552,3.429,553,1.431,554,1.742,555,2.273,556,2.9,557,2.065,558,2.766,559,2.341,560,1.742,561,1.431,562,1.835,563,1.886,564,2.296,565,2.161,566,2.041,567,1.742,568,1.623,569,1.742,570,1.742,571,2.952,572,1.352,573,1.352,574,2.63,575,1.886,576,2.63,577,1.742]],["title/injectables/AdminUserService.html",[115,2.336,578,1.26]],["body/injectables/AdminUserService.html",[0,0.057,3,0.101,4,0.091,5,0.091,10,0.134,11,0.952,13,3.016,18,0.772,20,1.857,21,0.017,22,1.287,23,0.469,24,0.996,25,1.925,26,3.883,29,0.387,30,0.743,31,0.101,36,3.325,40,1.673,42,2.055,45,0.007,46,0.009,54,1.855,55,1.996,62,1.821,64,0.953,76,2.162,78,0.679,81,1.358,115,2.512,125,0.46,127,0.854,128,1.259,129,1.849,130,1.789,146,1.675,154,1.849,155,1.297,161,1.506,163,1.849,191,1.242,198,2.503,202,1.068,203,2.948,211,2.814,216,2.768,217,2.092,227,2.429,242,1.085,251,1.779,281,1.959,286,1.352,292,3.079,293,1.186,311,2.858,317,1.432,333,1.774,336,2.868,357,2.901,372,3.079,377,2.56,378,1.432,379,1.432,380,1.049,381,3.291,382,3.135,384,1.049,389,3.509,395,1.774,398,1.352,404,1.675,417,1.602,430,1.602,431,1.463,432,1.774,433,4.075,434,2.858,436,2.858,437,2.688,438,2.215,444,2.637,445,2.858,446,1.587,447,1.774,456,2.858,457,1.789,464,4.454,474,2.858,475,1.352,476,1.463,505,1.789,510,3.643,511,3.643,512,3.884,513,3.884,514,3.288,515,2.159,516,1.352,526,1.774,529,0.814,530,1.703,534,1.186,547,1.774,548,2.389,559,2.042,561,1.774,562,0.943,566,1.049,573,1.675,576,2.159,577,1.352,578,1.085,579,1.049,580,5.474,581,1.789,582,2.56,583,2.858,584,3.31,585,4.72,586,3.31,587,3.31,588,1.774,589,2.072,590,3.288,591,3.568,592,2.072,593,2.858,594,2.072,595,2.072,596,2.072,597,2.072,598,2.072,599,3.31,600,2.072,601,2.072,602,3.31,603,2.072,604,3.333,605,2.337,606,1.259,607,3.568,608,4.72,609,1.789,610,1.789,611,2.072,612,1.352,613,1.587,614,1.789,615,1.352,616,2.858,617,2.072,618,2.072,619,2.923,620,2.072,621,3.31,622,2.072,623,2.072,624,2.072,625,1.602,626,2.072,627,2.072,628,3.31,629,2.072,630,2.072,631,2.072,632,2.072,633,1.602,634,2.072,635,2.072,636,2.072,637,2.072,638,3.31,639,2.072,640,1.789,641,2.072,642,2.072,643,2.072,644,2.072,645,2.072,646,2.072,647,2.072,648,2.072,649,2.072,650,2.072,651,2.072,652,1.945,653,2.072,654,1.789,655,1.259,656,2.353,657,1.789,658,2.072,659,1.602,660,2.072,661,3.568,662,2.072,663,2.159,664,1.789,665,3.333,666,1.789,667,2.072,668,2.072,669,1.602,670,1.789,671,4.133,672,3.568,673,3.31,674,2.56,675,4.133,676,1.602,677,4.72,678,5.774,679,4.72,680,3.31,681,1.789,682,3.31,683,4.72,684,2.072,685,2.072,686,2.56,687,2.072,688,2.072,689,2.072,690,3.31,691,2.072,692,3.31,693,2.072,694,2.072]],["title/controllers/AppController.html",[141,1.317,695,2.714]],["body/controllers/AppController.html",[0,0.099,3,0.279,4,0.25,5,0.25,10,0.369,11,1.941,18,0.715,21,0.017,25,1.646,29,0.435,31,0.279,45,0.014,46,0.014,64,0.937,65,1.326,120,2.147,125,1.269,141,2.313,241,2.897,242,1.876,251,1.646,695,4.765,696,4.941,697,6.4,698,5.723,699,4.362,700,4.941,701,5.723]],["title/modules/AppModule.html",[100,1.584,702,2.714]],["body/modules/AppModule.html",[0,0.079,3,0.222,4,0.199,5,0.199,21,0.017,23,0.37,29,0.491,31,0.222,45,0.012,46,0.012,49,2.302,78,2.124,81,1.308,100,2.67,101,4.728,102,2.302,103,2.302,104,2.59,105,2.59,106,2.302,107,3.689,108,2.59,113,4.404,114,4.126,116,3.335,117,2.59,118,2.18,120,2.197,124,3.937,125,1.009,126,2.764,127,1.875,135,3.517,136,3.927,695,4.574,699,4.404,700,3.927,702,5.527,703,3.927,704,3.927,705,3.927,706,4.728,707,4.728,708,4.548,709,5.857,710,5.29,711,3.211,712,4.548,713,4.548,714,4.548,715,4.548,716,4.548,717,4.548,718,4.548,719,3.927,720,4.548,721,3.211,722,4.548,723,4.548,724,4.548,725,4.548,726,4.548,727,2.764,728,4.548,729,4.548,730,4.548,731,4.548,732,4.548,733,4.548,734,4.548,735,3.211,736,4.548,737,4.548,738,5.857,739,5.857,740,4.548,741,4.548,742,4.548,743,4.548,744,3.927]],["title/injectables/AppService.html",[578,1.26,699,2.336]],["body/injectables/AppService.html",[0,0.113,3,0.266,4,0.238,5,0.238,10,0.351,11,1.884,18,0.68,21,0.017,25,2.097,29,0.351,31,0.266,45,0.014,46,0.014,64,0.975,125,1.207,202,1.271,251,1.566,562,3.318,568,3.308,578,2.148,579,2.755,582,5.066,610,4.7,697,6.296,699,4.27,745,4.7,746,6.551,747,6.067,748,5.444,749,6.551,750,7.027,751,5.444,752,5.444,753,5.444,754,5.444,755,5.444,756,5.444]],["title/controllers/AuthController.html",[141,1.317,757,2.714]],["body/controllers/AuthController.html",[0,0.078,3,0.221,4,0.198,5,0.198,10,0.292,11,1.678,13,2.663,18,0.565,20,1.358,21,0.017,22,0.918,23,0.555,24,0.729,25,2.081,26,3.127,29,0.44,31,0.221,45,0.012,46,0.012,51,0.878,62,1.805,64,0.628,65,1.048,120,1.697,125,1.003,141,2.214,144,2.575,155,1.831,201,3.546,202,1.404,213,2.95,214,2.748,216,2.168,231,2.575,232,3.322,233,3.679,236,1.246,241,2.289,242,1.482,243,2.575,251,1.301,317,1.957,344,4.12,376,2.058,429,3.807,461,3.497,471,3.497,472,3.904,498,4.512,501,3.904,526,4.039,757,4.12,758,5.038,759,4.522,760,4.561,761,5.038,762,4.12,763,3.904,764,4.867,765,4.522,766,4.522,767,4.522,768,5.835,769,4.397,770,4.721,771,5.835,772,4.512,773,5.279,774,4.522,775,5.038,776,4.512,777,3.193,778,3.926,779,3.904,780,3.904,781,4.522,782,4.522,783,4.522,784,3.904,785,4.522,786,4.522]],["title/modules/AuthModule.html",[100,1.584,706,2.508]],["body/modules/AuthModule.html",[0,0.082,3,0.232,4,0.208,5,0.208,21,0.017,29,0.498,31,0.232,40,1.255,45,0.013,46,0.013,100,2.726,102,2.407,103,2.407,104,2.708,105,2.708,106,2.407,107,3.767,108,3.767,116,3.431,117,2.708,118,2.28,120,2.261,124,2.89,125,1.055,126,2.89,127,1.96,128,2.89,140,3.678,221,3.716,223,2.89,224,3.814,706,5.057,710,5.379,711,3.358,719,4.106,744,4.106,757,4.671,778,4.456,779,4.106,787,4.106,788,4.106,789,4.106,790,4.783,791,4.756,792,6.026,793,3.358,794,6.026,795,3.358,796,4.756,797,4.756,798,4.756,799,4.756,800,4.756,801,4.756,802,4.106,803,4.756,804,4.756,805,4.756,806,4.756]],["title/injectables/AuthService.html",[578,1.26,778,2.336]],["body/injectables/AuthService.html",[0,0.095,3,0.202,4,0.181,5,0.181,10,0.268,11,1.587,13,2.553,18,0.689,20,1.657,21,0.017,22,1.12,23,0.448,24,0.889,25,1.587,26,2.956,29,0.465,30,1.487,31,0.202,36,2.97,40,1.095,42,1.422,45,0.012,46,0.012,62,1.812,125,0.92,127,1.71,128,2.522,129,1.487,198,1.888,202,1.202,216,1.989,227,1.36,242,1.808,251,1.194,281,1.893,317,1.796,357,2.435,379,2.387,404,2.1,429,3.598,431,3.894,526,3.865,578,1.808,579,2.1,582,4.265,588,2.956,590,3.76,606,2.522,612,2.707,613,2.644,615,2.707,619,3.479,633,3.209,655,2.522,656,3.528,657,3.582,661,3.582,663,2.707,676,3.209,760,4.375,762,2.93,763,4.762,764,4.61,769,4.012,770,4.484,772,3.209,773,5.315,775,4.762,776,4.265,777,4.375,778,3.765,780,3.582,784,3.582,793,2.93,807,3.582,808,3.582,809,6.226,810,4.15,811,4.265,812,4.15,813,5.516,814,3.582,815,4.265,816,4.15,817,4.15,818,3.209,819,4.15,820,5.516,821,5.516,822,4.15,823,3.582,824,3.582,825,3.582,826,2.93,827,3.582,828,3.209,829,3.209,830,3.209,831,3.209,832,4.15,833,4.15,834,4.15,835,4.15]],["title/classes/CreateOrderDto.html",[0,0.066,836,2.336]],["body/classes/CreateOrderDto.html",[0,0.114,2,1.424,3,0.203,4,0.182,5,0.182,10,0.268,18,0.774,21,0.017,23,0.586,24,0.889,29,0.4,31,0.269,45,0.012,46,0.012,51,1.071,55,1.145,64,1.001,65,1.436,78,2.033,81,1.195,153,0.922,164,2.652,166,1.81,175,2.402,180,1.979,191,1.559,202,1.4,236,1.145,400,3.138,401,3.241,413,2.723,414,2.703,415,4.269,416,1.424,418,3.708,419,2.103,441,3.143,530,2.834,534,1.979,836,3.355,837,5.109,838,2.934,839,4.179,840,5.352,841,4.855,842,4.155,843,4.155,844,4.155,845,4.269,846,3.898,847,4.766,848,3.898,849,4.766,850,4.766,851,4.766,852,2.934,853,4.155,854,3.898,855,3.143,856,5.352,857,4.155,858,4.155,859,3.602,860,3.898,861,3.355,862,4.269,863,4.794,864,4.794,865,4.794,866,4.794,867,4.269,868,3.767,869,3.344,870,3.143,871,2.525,872,4.766,873,5.109,874,3.898,875,4.269,876,3.898,877,5.109,878,4.269,879,4.269,880,3.587,881,3.213,882,3.213,883,2.934,884,2.934,885,3.587,886,3.587]],["title/classes/CreateOrdersTables1714390000000.html",[0,0.066,887,2.973]],["body/classes/CreateOrdersTables1714390000000.html",[0,0.073,2,1.447,3,0.206,4,0.185,5,0.185,8,3.177,9,5.395,10,0.458,11,1.605,12,4.316,13,2.927,14,4.817,15,4.817,16,4.817,17,6.423,18,0.697,20,1.676,21,0.017,22,1.133,23,0.453,24,0.899,25,1.605,26,3.563,27,4.817,29,0.272,30,1.514,31,0.206,36,3.314,37,5.395,39,5.492,43,5.381,45,0.012,46,0.012,54,2.193,55,1.537,61,3.177,63,3.391,67,3.265,77,2.025,92,4.51,155,1.325,160,4.077,195,2.981,271,4.025,299,4.833,559,1.827,652,1.74,839,2.566,868,3.391,869,2.137,887,4.315,888,5.395,889,3.645,890,4.222,891,4.222,892,5.58,893,5.58,894,5.346,895,2.981,896,2.981,897,6.648,898,3.265,899,4.315,900,3.645,901,4.315,902,3.645,903,4.04,904,6.648,905,4.833,906,4.222,907,6.249,908,6.249,909,4.222,910,5.968,911,6.249,912,4.315,913,3.645,914,2.263,915,4.222,916,4.222,917,4.222,918,4.222,919,4.222,920,4.222,921,4.222,922,4.222,923,4.222,924,4.222,925,4.222,926,4.222,927,4.222,928,4.222,929,4.222,930,5.58,931,4.817]],["title/classes/CreateProductDto.html",[0,0.066,279,2.508]],["body/classes/CreateProductDto.html",[0,0.084,2,0.915,3,0.13,4,0.117,5,0.117,10,0.172,18,0.915,21,0.017,22,1.179,23,0.599,24,1.2,29,0.349,31,0.13,45,0.009,46,0.009,51,0.782,64,1.01,65,1.698,69,3.307,76,2.565,77,1.49,78,2.232,81,1.757,153,1.354,164,2.449,166,1.322,180,2.744,193,2.23,202,1.458,236,0.736,279,2.63,281,1.111,307,2.45,310,2.45,312,4.258,320,2.45,325,2.45,330,3.711,359,2.952,362,2.952,365,2.952,368,2.952,386,4.258,400,3.381,401,3.328,410,3.307,412,1.28,413,2.85,414,2.565,416,0.915,418,3.446,419,1.352,420,3.803,553,1.431,554,1.742,571,3.288,652,1.662,859,3.169,860,3.429,861,3.288,862,2.065,869,2.041,871,3.288,876,1.886,878,2.065,883,2.847,884,2.847,914,3.398,932,6.364,933,2.065,934,4.101,935,3.756,936,3.529,937,4.491,938,4.193,939,4.101,940,4.193,941,4.491,942,4.491,943,4.491,944,3.118,945,2.065,946,2.671,947,3.118,948,3.118,949,3.481,950,3.481,951,3.481,952,3.481,953,3.481,954,3.481,955,3.481,956,3.481,957,3.118,958,2.306,959,2.671,960,3.307,961,2.671,962,2.671,963,4.184,964,3.481,965,2.306,966,5.014,967,3.481,968,4.722,969,4.857,970,4.032,971,5.014,972,5.635,973,4.032,974,4.032,975,2.671,976,2.671,977,3.118,978,2.847,979,4.032,980,4.032,981,2.306,982,2.306,983,4.032,984,2.671,985,3.481,986,2.671,987,2.671,988,2.671,989,2.306,990,2.671,991,2.671,992,2.306,993,4.032,994,4.032,995,2.671,996,4.032,997,2.065,998,2.671,999,2.671,1000,2.63,1001,2.306,1002,2.671,1003,2.671,1004,3.481,1005,3.481,1006,4.193,1007,1.742,1008,2.671,1009,3.429,1010,2.671,1011,2.065,1012,2.671,1013,2.671,1014,2.671,1015,2.671,1016,2.671,1017,2.065,1018,2.671,1019,2.671,1020,2.671,1021,2.671,1022,2.306,1023,2.671,1024,2.671,1025,2.671,1026,2.671,1027,2.671,1028,4.032,1029,2.671,1030,2.065,1031,2.306]],["title/classes/CreateUserDto.html",[0,0.066,1032,2.336]],["body/classes/CreateUserDto.html",[0,0.093,2,1.369,3,0.195,4,0.175,5,0.175,10,0.258,18,0.892,21,0.017,22,1.32,23,0.58,24,1.126,29,0.347,31,0.195,32,4.159,41,4.292,42,1.843,45,0.011,46,0.011,48,2.578,51,1.044,62,1.829,64,1.061,65,1.655,78,1.993,81,1.547,153,1.55,164,2.623,202,1.386,236,1.101,374,2.821,379,2.937,380,3.077,384,3.077,385,5.195,390,4.643,400,3.616,401,3.308,404,2.722,411,3.797,413,2.68,414,2.747,416,1.369,418,3.676,459,3.952,551,3.509,562,2.447,727,4.124,859,4.428,977,4.159,978,3.797,1032,3.268,1033,6.27,1034,4.701,1035,5.378,1036,5.378,1037,5.378,1038,5.378,1039,5.378,1040,5.248,1041,3.996,1042,3.996,1043,3.996,1044,3.996,1045,3.996,1046,3.996,1047,5.378,1048,5.378,1049,3.996,1050,3.996,1051,3.996,1052,6.503,1053,5.378,1054,3.996,1055,4.643,1056,3.996,1057,4.159,1058,5.378,1059,3.996,1060,3.45,1061,3.996,1062,3.996,1063,3.996,1064,3.996,1065,3.45]],["title/classes/HttpExceptionFilter.html",[0,0.066,1066,2.973]],["body/classes/HttpExceptionFilter.html",[0,0.083,2,1.647,3,0.234,4,0.21,5,0.21,8,3.455,10,0.31,11,1.745,18,0.758,20,1.444,21,0.017,22,0.976,23,0.391,24,0.774,25,1.383,29,0.391,31,0.234,45,0.013,46,0.013,51,1.178,64,0.667,77,1.324,125,1.066,155,2.191,193,1.981,242,2.18,281,1.831,357,2.89,459,2.921,471,3.717,562,2.187,565,3.563,613,3.187,655,4.04,656,2.737,721,4.694,735,4.93,855,2.737,903,2.921,1066,4.692,1067,5.74,1068,3.394,1069,5.141,1070,6.067,1071,4.807,1072,4.692,1073,6.983,1074,5.4,1075,4.807,1076,4.692,1077,4.15,1078,3.252,1079,3.136,1080,4.807,1081,3.394,1082,3.717,1083,3.717,1084,3.717,1085,3.717,1086,5.568,1087,3.717,1088,3.394,1089,3.717,1090,4.692,1091,4.692,1092,3.717,1093,3.717,1094,3.394,1095,3.717,1096,3.717,1097,3.717,1098,3.717,1099,4.807,1100,4.807,1101,4.807,1102,3.717]],["title/injectables/JwtAuthGuard.html",[221,1.843,578,1.26]],["body/injectables/JwtAuthGuard.html",[0,0.101,3,0.333,4,0.198,5,0.198,10,0.292,11,1.678,12,2.748,18,0.807,20,1.941,21,0.017,22,1.311,23,0.525,24,1.041,25,1.678,29,0.44,31,0.221,45,0.012,46,0.012,62,1.71,81,1.301,125,1.003,202,1.132,221,3.097,242,1.913,251,1.858,281,1.246,357,1.777,424,2.289,446,2.168,477,5.279,578,1.913,579,2.289,588,3.127,613,2.797,619,2.289,760,4.561,761,5.038,769,4.397,770,3.807,773,3.497,777,3.193,793,3.193,795,3.193,809,6.247,846,3.193,1055,5.038,1078,3.127,1088,3.193,1103,3.904,1104,4.12,1105,5.835,1106,5.038,1107,4.996,1108,5.835,1109,5.038,1110,5.835,1111,4.522,1112,6.356,1113,4.522,1114,5.038,1115,5.279,1116,4.522,1117,3.904,1118,5.835,1119,4.522,1120,5.835,1121,5.835,1122,3.497,1123,4.522,1124,4.522,1125,3.497,1126,3.904,1127,3.497,1128,3.497,1129,5.835,1130,4.522,1131,3.904,1132,3.904,1133,4.522,1134,4.522,1135,4.522,1136,4.522,1137,4.522]],["title/interfaces/JwtPayload.html",[555,1.378,1138,2.714]],["body/interfaces/JwtPayload.html",[3,0.251,4,0.225,5,0.225,10,0.332,21,0.017,23,0.622,24,1.02,31,0.251,45,0.013,46,0.013,48,3.035,51,1.229,55,1.744,62,1.532,64,1.087,153,1.587,202,0.999,227,2.452,379,3.236,389,4.348,423,2.931,555,2.27,769,3.128,770,4.131,829,3.981,830,5.533,903,3.848,1138,4.471,1139,2.931,1140,4.444,1141,4.444,1142,4.444,1143,7.154,1144,6.332,1145,5.466,1146,6.332]],["title/injectables/JwtStrategy.html",[578,1.26,790,2.508]],["body/injectables/JwtStrategy.html",[0,0.095,3,0.202,4,0.181,5,0.181,8,2.357,10,0.267,11,1.584,13,2.55,18,0.773,20,1.654,21,0.017,22,1.118,23,0.503,24,0.887,25,1.584,29,0.478,30,1.483,31,0.202,36,2.639,40,1.092,42,1.418,45,0.012,46,0.012,55,1.517,62,1.662,78,1.357,125,0.918,127,1.706,128,2.515,129,1.483,198,1.883,202,1.201,211,1.883,216,1.984,242,1.805,251,1.19,281,1.817,317,1.791,357,2.432,378,2.383,404,2.095,429,3.592,526,2.218,555,1.483,578,1.805,579,2.095,588,2.951,590,3.756,606,2.515,612,2.7,613,2.639,616,4.754,619,3.132,663,2.7,676,3.2,710,5.461,711,2.922,760,4.369,769,4.548,770,3.592,777,2.922,790,4.037,795,2.922,802,3.573,811,4.785,818,3.2,824,4.754,825,3.573,826,2.922,827,3.573,828,3.2,829,5.73,830,3.2,1078,2.951,1107,4.258,1125,3.2,1126,3.573,1138,4.986,1147,3.573,1148,6.596,1149,5.506,1150,5.506,1151,6.596,1152,5.506,1153,4.139,1154,4.139,1155,5.506,1156,4.139,1157,5.506,1158,5.506,1159,4.139,1160,4.139,1161,4.754,1162,4.139,1163,4.139,1164,3.573,1165,6.187,1166,4.139,1167,4.139,1168,3.2,1169,4.139,1170,4.139,1171,4.139,1172,4.139,1173,2.7]],["title/classes/LoginDto.html",[0,0.066,764,2.508]],["body/classes/LoginDto.html",[0,0.117,2,1.708,3,0.243,4,0.218,5,0.218,10,0.322,18,0.775,21,0.017,23,0.575,29,0.4,31,0.243,45,0.013,46,0.013,48,3.391,51,1.204,62,1.795,64,1.03,65,1.438,202,1.373,236,1.373,293,2.225,375,3.771,376,2.824,379,3.256,389,4.298,400,3.141,401,3.061,411,4.382,414,2.439,416,1.708,418,3.421,422,3.028,423,2.838,424,2.522,425,3.028,526,3.622,727,4.572,764,4.409,859,4.049,1065,4.302,1174,4.302,1175,4.984,1176,4.984,1177,4.984,1178,4.984,1179,4.984,1180,4.984,1181,4.984,1182,4.984]],["title/entities/Order.html",[47,1.442,175,1.26]],["body/entities/Order.html",[0,0.063,3,0.179,4,0.161,5,0.161,10,0.237,18,0.938,21,0.017,22,0.746,23,0.633,29,0.405,30,1.318,31,0.179,34,3.874,35,4.447,40,1.657,42,2.152,43,5.167,45,0.011,46,0.011,47,1.379,49,1.861,51,0.986,54,2.288,55,1.604,61,3.315,62,1.595,63,4.006,64,1.026,65,1.74,66,4.328,72,3.798,74,3.087,77,1.73,81,2.144,87,3.798,89,2.843,92,3.315,94,2.093,95,3.587,96,3.587,153,1.462,155,1.971,156,4.006,166,2.059,175,1.909,191,1.379,195,4.111,230,2.398,529,2.468,530,2.4,572,2.572,652,2.094,839,3.538,855,2.093,870,3.576,896,4.111,898,4.502,899,4.857,900,5.027,901,4.857,902,5.027,910,4.386,1183,3.174,1184,3.676,1185,3.676,1186,3.676,1187,3.676,1188,4.143,1189,3.174,1190,5.081,1191,3.676,1192,3.676,1193,3.676,1194,3.676,1195,4.857,1196,4.857,1197,4.857,1198,3.676,1199,3.676,1200,3.676,1201,3.676,1202,3.676,1203,3.676,1204,3.676,1205,3.929,1206,2.596,1207,2.843,1208,2.596,1209,3.676,1210,3.676,1211,3.174,1212,3.174,1213,2.843]],["title/entities/OrderItem.html",[47,1.442,1188,2.336]],["body/entities/OrderItem.html",[0,0.077,3,0.217,4,0.194,5,0.194,10,0.287,18,0.928,21,0.017,22,1.171,23,0.627,29,0.413,30,1.593,31,0.217,34,3.86,45,0.012,46,0.012,47,1.668,49,2.25,51,1.12,55,1.765,64,1,65,1.722,66,4.271,74,3.507,89,3.437,92,4.424,94,2.531,95,4.524,96,4.524,153,1.597,175,2.463,180,2.628,529,2.665,559,2.773,868,4.271,869,3.243,870,3.862,912,5.435,914,3.434,1188,3.507,1195,5.244,1196,5.244,1197,5.244,1214,6.486,1215,3.837,1216,4.445,1217,4.445,1218,4.445,1219,4.445,1220,4.445,1221,4.445,1222,4.445,1223,4.445,1224,4.982,1225,4.445,1226,4.445,1227,4.445,1228,3.437,1229,4.445,1230,4.445]],["title/classes/OrderItemDto.html",[0,0.066,841,2.714]],["body/classes/OrderItemDto.html",[0,0.113,2,1.391,3,0.198,4,0.177,5,0.177,10,0.262,18,0.817,21,0.017,23,0.583,24,1.054,29,0.395,31,0.265,45,0.012,46,0.012,51,1.055,55,1.497,64,1.012,65,1.516,78,2.009,81,1.167,153,1.205,164,2.634,166,1.33,175,2.351,180,2.346,202,1.392,236,1.118,400,3.312,401,3.255,413,2.697,414,2.681,415,4.202,416,1.391,418,3.689,419,2.054,441,2.311,530,2.24,534,1.948,836,2.466,837,5.276,838,2.865,839,3.302,840,3.503,841,4.817,845,3.138,846,2.865,847,3.503,848,2.865,849,3.503,850,3.503,851,3.503,852,3.837,854,2.865,855,2.311,856,4.691,859,3.545,860,3.837,861,3.302,862,4.202,863,5.06,864,5.06,865,5.06,866,5.06,867,4.202,868,4.146,869,3.63,870,3.489,871,3.302,872,5.649,873,5.546,874,4.62,875,5.06,876,4.326,877,5.546,878,4.738,879,4.738,880,3.503,881,3.138,882,3.138,883,2.865,884,2.865,885,3.503,886,3.503,1231,4.058,1232,4.058,1233,4.058,1234,4.058,1235,4.058,1236,4.058]],["title/controllers/OrdersController.html",[141,1.317,1237,2.714]],["body/controllers/OrdersController.html",[0,0.03,3,0.085,4,0.076,5,0.076,10,0.112,11,0.826,12,1.057,13,2.091,18,0.634,20,1.524,21,0.017,22,1.354,23,0.578,24,0.904,25,1.459,29,0.412,31,0.085,36,1.377,40,1.243,42,2.578,45,0.006,46,0.006,54,1.441,55,1.65,61,0.991,62,1.756,63,2.229,64,0.704,65,1.175,69,1.635,77,1.478,78,2.187,81,1.224,83,1.345,120,0.653,125,0.386,129,0.624,141,0.596,144,0.991,146,1.856,153,1.44,154,1.924,155,2.233,156,3.082,157,5.022,158,5.268,159,1.228,160,4.4,163,2.147,164,2.601,166,1.396,171,3.261,175,2.455,184,4.338,185,4.15,186,3.292,187,3.292,189,2.028,190,2.221,191,2.013,193,0.717,198,2.726,201,3.64,202,1.493,203,1.539,204,3.813,210,3.309,211,2.726,213,1.874,214,1.745,215,1.135,216,0.834,217,0.881,218,1.135,219,2.088,221,0.834,222,1.228,223,1.057,224,1.454,225,1.345,226,1.345,227,0.57,228,0.991,230,1.135,231,0.991,232,3.056,233,3.573,234,4.007,235,2.028,236,0.479,239,1.135,241,0.881,242,0.57,243,3.573,245,1.345,246,1.228,247,1.502,249,3.166,250,3.166,251,1.459,252,1.502,254,3.961,255,1.502,271,2.281,272,3.166,280,1.345,281,1.397,282,2.479,285,2.221,286,3.309,287,4.379,288,3.923,289,4.379,292,3.66,293,1.818,295,3.309,301,2.479,317,1.243,333,0.932,335,1.345,336,1.745,341,1.057,343,1.057,344,2.589,348,1.345,350,1.228,351,1.345,357,1.129,378,1.243,389,1.745,401,2.658,432,1.539,438,0.932,441,2.424,444,1.377,447,0.932,448,1.345,454,2.479,461,3.643,492,1.228,494,1.228,498,5.438,517,3.082,529,1.673,530,2.212,531,1.539,534,1.029,558,2.424,559,1.842,561,0.932,562,2.144,564,1.635,573,0.881,576,1.874,619,1.454,656,2.683,659,2.221,686,1.345,772,2.836,826,3.006,831,3.292,836,3.261,839,2.229,848,2.028,854,2.028,863,4.633,864,4.633,865,4.633,866,4.633,867,4.633,868,2.229,869,1.856,870,2.088,895,3.006,896,2.589,914,1.965,1040,1.502,1078,0.932,1094,3.327,1206,1.228,1208,1.228,1237,2.028,1238,1.502,1239,3.166,1240,1.502,1241,4.257,1242,1.74,1243,1.74,1244,3.166,1245,3.667,1246,1.74,1247,1.74,1248,1.502,1249,1.502,1250,1.502,1251,1.74,1252,1.74,1253,1.74,1254,1.74,1255,2.479,1256,1.74,1257,4.257,1258,1.74,1259,1.74,1260,1.74,1261,1.74,1262,3.675,1263,1.74,1264,4.257,1265,1.74,1266,1.74,1267,1.502,1268,1.74,1269,5.072,1270,5.366,1271,2.872,1272,1.74,1273,5.072,1274,2.872,1275,1.74,1276,1.74,1277,3.794,1278,1.74,1279,1.74,1280,1.74,1281,1.502,1282,1.502,1283,2.479,1284,3.643,1285,1.74,1286,1.74,1287,1.74,1288,1.74,1289,1.74,1290,1.345,1291,5.072,1292,3.166,1293,3.667,1294,5.072,1295,5.072,1296,3.667,1297,1.502,1298,1.74,1299,2.872,1300,3.675,1301,2.872,1302,2.479,1303,2.872,1304,1.502,1305,1.502,1306,1.74,1307,1.74,1308,1.74,1309,4.068,1310,1.502,1311,1.502,1312,1.74,1313,3.166,1314,1.502,1315,1.502,1316,1.502,1317,1.502,1318,2.872,1319,1.345,1320,1.345,1321,1.74,1322,1.74,1323,2.872,1324,1.74,1325,2.479,1326,1.74,1327,1.74,1328,1.74]],["title/modules/OrdersModule.html",[100,1.584,113,2.336]],["body/modules/OrdersModule.html",[0,0.087,3,0.245,4,0.22,5,0.22,21,0.017,29,0.499,31,0.245,40,1.647,45,0.013,46,0.013,48,2.993,100,2.798,102,2.547,103,2.547,104,2.865,105,2.865,106,2.547,107,3.865,108,3.865,113,4.668,114,4.235,116,3.555,117,2.865,118,2.412,120,2.342,124,3.794,125,1.116,126,3.058,127,2.074,135,3.891,139,4.344,175,1.65,180,2.238,219,4.447,1188,3.794,1206,3.553,1207,3.891,1228,3.891,1237,4.793,1282,4.344,1329,4.344,1330,4.344,1331,4.344,1332,5.032,1333,5.032,1334,4.344,1335,4.344,1336,4.344,1337,5.032]],["title/injectables/OrdersService.html",[219,2.189,578,1.26]],["body/injectables/OrdersService.html",[0,0.033,3,0.092,4,0.083,5,0.083,10,0.122,11,1.119,13,3.078,18,0.803,20,1.932,21,0.017,22,1.306,23,0.523,24,1.036,25,1.814,29,0.415,30,0.679,31,0.092,36,2.955,40,0.5,42,2.585,43,1.338,45,0.007,46,0.007,48,0.908,54,0.745,55,1.772,62,0.745,63,3.645,64,1.002,77,1.072,125,0.42,127,0.781,146,1.97,147,2.659,148,2.659,149,2.659,150,2.659,151,2.659,152,1.151,153,0.994,154,1.995,155,2.11,156,3.746,157,5.521,158,5.79,160,3.216,161,1.401,163,1.606,171,3.909,172,2.659,175,2.253,178,2.659,180,1.395,183,2.659,184,4.085,185,4.767,186,4.085,187,4.085,190,1.465,193,1.604,194,2.659,195,4.542,198,2.039,203,1.015,206,1.636,207,2.659,211,2.039,217,2.268,219,1.754,230,1.236,242,1.732,251,1.882,254,1.338,271,2.085,281,1.358,293,0.679,317,2.73,333,1.651,339,2.983,341,1.151,343,1.151,346,1.338,357,2.837,432,1.651,447,1.651,529,1.21,530,1.847,534,1.606,547,1.651,548,2.268,559,1.684,561,1.015,573,0.959,578,1.01,579,0.959,588,1.651,590,3.874,593,3.359,604,1.338,606,1.151,607,4.256,612,1.236,613,2.532,619,2.268,625,1.465,633,1.465,652,2.294,654,1.636,663,2.539,665,1.338,831,1.465,836,2.996,854,1.338,855,1.754,868,1.151,869,0.959,875,1.465,895,2.175,896,3.481,912,1.465,914,1.015,1188,2.723,1206,1.338,1207,1.465,1208,1.338,1211,1.636,1212,2.659,1213,3.812,1228,1.465,1239,2.659,1240,2.659,1267,2.659,1277,3.632,1283,2.659,1290,1.465,1302,1.636,1309,1.636,1310,3.869,1311,4.256,1313,3.359,1314,2.659,1319,2.382,1325,3.869,1334,1.636,1335,1.636,1336,1.636,1338,1.636,1339,3.08,1340,1.895,1341,3.891,1342,3.359,1343,3.891,1344,1.895,1345,3.08,1346,1.895,1347,1.895,1348,1.895,1349,1.895,1350,3.08,1351,1.895,1352,1.895,1353,1.895,1354,1.895,1355,1.895,1356,1.895,1357,1.895,1358,1.895,1359,1.895,1360,1.895,1361,1.895,1362,1.895,1363,1.636,1364,1.895,1365,3.08,1366,4.93,1367,5.283,1368,1.895,1369,1.895,1370,3.08,1371,3.08,1372,1.895,1373,1.895,1374,3.891,1375,3.891,1376,1.895,1377,1.636,1378,3.891,1379,1.636,1380,1.895,1381,1.895,1382,3.08,1383,3.08,1384,1.895,1385,1.895,1386,1.895,1387,3.08,1388,1.895,1389,3.08,1390,1.895,1391,1.895,1392,1.895,1393,1.895,1394,5.283,1395,3.08,1396,3.08,1397,3.08,1398,1.895,1399,3.08,1400,1.338,1401,3.08,1402,3.08,1403,3.08,1404,3.08,1405,3.08,1406,1.895,1407,1.895,1408,3.08,1409,4.481,1410,3.08,1411,1.895,1412,3.08,1413,1.895,1414,1.895,1415,1.895,1416,1.895,1417,1.895,1418,1.895,1419,1.895,1420,1.895,1421,3.08,1422,1.895,1423,1.895,1424,1.895,1425,1.895,1426,1.895,1427,3.08,1428,3.08,1429,1.895,1430,1.895,1431,1.895,1432,1.636,1433,1.895,1434,3.08,1435,3.08,1436,1.895,1437,3.08,1438,1.636,1439,1.895,1440,3.08,1441,1.895,1442,1.895,1443,4.481,1444,3.891,1445,1.895,1446,3.08,1447,3.08,1448,1.895,1449,1.895,1450,1.895,1451,1.895,1452,1.895,1453,1.895,1454,1.895,1455,1.895,1456,1.895,1457,1.895,1458,1.895,1459,1.895,1460,1.895,1461,3.08,1462,1.636,1463,1.636,1464,1.895,1465,1.895,1466,1.895,1467,1.895,1468,1.895,1469,1.895,1470,1.895,1471,1.895,1472,1.895]],["title/interfaces/PaginatedResponse.html",[555,1.378,566,1.946]],["body/interfaces/PaginatedResponse.html",[0,0.104,3,0.162,4,0.146,5,0.146,10,0.215,21,0.017,23,0.622,24,0.537,29,0.388,31,0.269,40,1.251,42,2.061,45,0.012,46,0.01,51,0.92,54,1.309,62,1.455,64,0.981,76,2.498,77,1.751,153,1.71,154,1.7,155,1.732,161,2.158,163,2.6,166,1.81,175,1.092,202,1.462,227,2.278,228,1.897,236,0.918,293,1.979,373,2.173,375,2.024,376,1.516,378,1.441,379,2.389,380,2.4,381,1.597,382,2.024,384,2.4,395,2.541,398,2.173,404,2.4,410,3.143,412,1.597,413,3.045,414,2.364,416,1.142,419,1.686,420,4.207,422,2.024,423,1.897,424,1.686,425,2.024,426,2.352,437,2.7,438,1.785,444,3.047,446,2.883,508,2.024,509,3.667,510,2.352,511,2.352,512,2.352,513,2.352,514,3.143,515,2.173,516,2.173,517,4.296,518,3.667,526,2.541,529,2.17,530,2.99,531,2.959,534,1.979,540,3.348,543,3.348,544,2.024,547,2.541,548,2.794,551,4.147,552,3.898,553,1.785,554,2.173,555,2.49,556,3.54,557,2.576,558,3.425,559,2.603,560,2.173,561,1.785,562,2.158,563,2.352,564,3.143,565,2.959,566,2.794,567,2.173,568,2.024,569,2.173,570,2.173,571,3.863,572,2.4,573,3.044,574,3.093,575,2.352,576,3.093,577,2.173,1139,1.897]],["title/interfaces/PaginatedResponse-1.html",[534,1.152,555,1.152,566,1.627]],["body/interfaces/PaginatedResponse-1.html",[3,0.24,4,0.215,5,0.215,10,0.317,21,0.017,23,0.622,31,0.3,45,0.013,46,0.013,51,1.195,153,1.727,154,1.764,163,2.599,202,1.195,293,2.651,444,2.952,446,2.952,530,2.988,531,2.637,555,2.651,556,3.885,558,3.826,559,2.908,560,3.21,561,2.637,564,3.826,565,3.601,566,3.401,567,3.21,568,2.99,569,3.21,570,3.21,571,4.406,572,3.116,573,3.564,1139,2.802,1473,3.805,1474,3.805]],["title/interfaces/PaginationMeta.html",[555,1.378,556,2.06]],["body/interfaces/PaginationMeta.html",[0,0.102,3,0.157,4,0.141,5,0.141,10,0.207,21,0.017,23,0.626,24,0.953,29,0.382,31,0.264,40,1.22,42,2.028,45,0.012,46,0.01,51,0.897,54,1.263,62,1.432,64,1,76,2.464,77,1.727,153,1.744,154,2.247,155,1.698,161,2.103,163,2.67,166,1.774,175,1.054,202,1.454,227,2.256,228,1.83,236,0.886,293,1.657,373,2.097,375,1.953,376,1.463,378,1.391,379,2.342,380,2.34,381,1.541,382,1.953,384,2.34,395,2.477,398,2.097,404,2.34,410,3.082,412,1.541,413,3.026,414,2.326,416,1.102,419,1.627,420,4.181,422,1.953,423,1.83,424,1.627,425,1.953,426,2.27,437,2.632,438,1.723,444,3.129,446,3.005,508,1.953,509,3.574,510,2.27,511,2.27,512,2.27,513,2.27,514,3.082,515,2.097,516,2.097,517,4.26,518,3.574,526,2.477,529,2.127,530,2.889,531,3.171,534,1.94,540,3.264,543,3.264,544,1.953,547,2.477,548,2.739,551,4.09,552,3.821,553,1.723,554,2.097,555,2.467,556,3.36,557,2.486,558,3.37,559,3.033,560,3.015,561,3.171,562,2.97,563,3.264,564,2.632,565,2.477,566,2.34,567,2.097,568,1.953,569,2.097,570,2.097,571,3.289,572,1.627,573,1.627,574,3.015,575,2.27,576,3.015,577,2.097,1139,1.83]],["title/interfaces/PaginationMeta-1.html",[534,1.152,555,1.152,556,1.722]],["body/interfaces/PaginationMeta-1.html",[3,0.233,4,0.209,5,0.209,10,0.308,21,0.017,23,0.627,31,0.295,45,0.013,46,0.013,51,1.172,153,1.77,154,2.496,163,2.728,202,1.172,293,2.164,444,2.894,446,2.894,530,3.024,531,3.236,555,2.63,556,3.732,558,3.772,559,3.263,560,3.939,561,3.732,564,3.438,565,3.236,566,3.056,567,3.112,568,2.899,569,3.112,570,3.112,571,4.026,572,2.415,573,2.415,1139,2.716,1473,3.689,1474,3.689]],["title/entities/Product.html",[47,1.442,180,1.378]],["body/entities/Product.html",[0,0.057,3,0.101,4,0.091,5,0.091,10,0.134,18,0.915,21,0.017,22,1.174,23,0.64,29,0.214,30,0.746,31,0.162,34,3.814,35,4.406,42,2.058,45,0.007,46,0.007,47,1.775,49,1.053,51,0.644,54,1.629,55,1.142,61,2.36,64,1.001,65,1.696,68,3.658,69,2.36,72,2.166,74,1.264,76,2.942,77,2.134,78,2.163,80,5.103,81,2.14,87,2.166,94,1.185,95,1.469,96,1.469,153,1.608,166,1.896,180,2.795,189,2.345,191,2.068,202,1.457,203,1.115,236,0.573,281,0.915,286,1.357,307,2.018,310,2.018,312,4.142,320,2.018,325,2.018,330,2.018,359,2.518,362,2.518,365,2.518,368,2.518,376,1.511,378,0.9,381,1.987,395,1.78,400,3.706,404,1.681,418,3.722,459,3.65,529,1.859,558,1.891,572,2.789,652,2.72,666,1.796,762,1.469,869,1.681,870,3.138,874,2.345,899,2.568,901,2.568,913,4.758,914,3.099,934,3.65,935,3.205,936,3.142,937,3.998,939,3.65,941,3.998,942,3.998,943,2.568,947,2.568,948,2.568,960,3.138,963,4.262,1000,2.166,1142,2.867,1195,5.013,1196,4.262,1197,4.262,1205,1.609,1224,4.758,1290,1.609,1475,1.609,1476,3.321,1477,3.321,1478,3.321,1479,3.321,1480,3.321,1481,3.321,1482,3.578,1483,4.463,1484,5.17,1485,4.144,1486,3.578,1487,4.144,1488,6.006,1489,4.144,1490,2.08,1491,2.08,1492,2.08,1493,2.08,1494,4.144,1495,2.08,1496,2.08,1497,2.08,1498,2.08,1499,2.08,1500,2.867,1501,4.144,1502,2.08,1503,2.345,1504,2.867,1505,2.08,1506,2.08,1507,2.867,1508,2.08,1509,2.867,1510,2.08,1511,4.731,1512,2.08,1513,2.08,1514,2.08,1515,2.08,1516,2.08,1517,2.08,1518,2.08,1519,2.08,1520,2.08,1521,3.321,1522,4.731,1523,3.321,1524,2.08,1525,3.321,1526,2.08,1527,2.08,1528,3.321,1529,3.321,1530,2.08,1531,2.08,1532,2.08,1533,2.08,1534,3.321,1535,3.321,1536,2.08,1537,2.867,1538,2.867,1539,2.867,1540,2.867,1541,2.867,1542,2.867,1543,2.867,1544,2.867,1545,2.867,1546,2.867,1547,2.867,1548,2.08,1549,2.08,1550,2.08,1551,4.144]],["title/classes/ProductQueryDto.html",[0,0.066,1552,2.973]],["body/classes/ProductQueryDto.html",[0,0.084,2,0.749,3,0.107,4,0.096,5,0.096,10,0.141,18,0.876,20,1.037,21,0.017,22,0.987,23,0.629,24,1.219,29,0.314,31,0.107,45,0.007,46,0.007,51,0.67,54,0.859,64,0.996,65,1.625,69,1.244,76,2.756,77,1.978,81,1.399,153,1.635,154,1.534,163,2.356,166,1.594,175,1.594,180,2.113,191,2.631,193,2.959,202,1.418,217,1.748,236,0.602,251,1.758,281,1.34,293,1.238,307,2.955,310,2.098,320,2.955,325,2.098,330,2.955,346,5.248,359,2.601,362,2.601,365,2.601,368,2.601,375,2.098,376,1.571,386,4.574,401,3.085,410,3.016,412,1.047,413,2.915,414,2.402,416,0.749,419,1.106,420,4.027,422,1.328,423,1.244,424,1.106,425,1.328,438,2.294,444,2.539,508,1.328,514,3.357,515,2.792,516,2.792,517,4.702,524,1.886,529,2.081,530,2.004,531,2.606,534,2.191,540,3.434,543,4.315,544,2.955,547,3.582,548,3.184,553,1.171,554,1.425,574,2.252,575,1.543,640,1.886,861,3.218,871,3.714,873,4.559,876,1.543,877,4.559,914,3.372,934,4.163,936,3.583,939,4.163,944,2.67,945,1.69,960,2.769,968,2.67,989,2.981,1006,4.572,1009,2.438,1011,1.69,1017,1.69,1030,1.69,1552,3.31,1553,6.106,1554,4.28,1555,4.28,1556,2.185,1557,2.185,1558,2.185,1559,2.185,1560,2.981,1561,4.863,1562,4.863,1563,2.185,1564,2.185,1565,2.981,1566,2.185,1567,2.185,1568,5.63,1569,2.185,1570,2.185,1571,2.185,1572,2.185,1573,2.185,1574,2.185,1575,2.185,1576,2.185,1577,2.185,1578,2.185,1579,2.185,1580,2.185,1581,2.185,1582,2.185,1583,2.185,1584,2.185,1585,2.185,1586,2.185,1587,2.185,1588,2.185]],["title/controllers/ProductsController.html",[141,1.317,1589,2.714]],["body/controllers/ProductsController.html",[0,0.052,3,0.146,4,0.131,5,0.131,10,0.193,11,1.261,12,1.817,18,0.822,20,1.56,21,0.017,22,1.292,23,0.534,24,0.981,25,1.892,29,0.369,31,0.146,45,0.009,46,0.009,55,1.576,64,0.721,65,1.524,77,1.576,78,2.087,120,1.122,125,0.663,141,1.025,144,1.703,146,2.629,152,1.817,153,1.621,154,2.282,155,2.117,159,2.111,163,2.418,164,2.388,166,1.438,171,3.156,180,2.418,189,3.096,201,4.442,202,1.522,204,4.404,209,1.951,210,2.861,211,2.603,216,1.433,217,1.513,231,1.703,232,3.842,233,3.92,234,3.732,236,0.824,241,1.513,242,0.98,243,3.746,245,2.312,246,2.111,251,1.892,281,1.576,292,4.768,295,4.682,307,3.869,310,3.476,320,3.869,325,3.476,329,2.581,330,3.869,339,2.783,340,2.312,346,5.537,358,2.581,378,1.898,432,2.35,438,1.602,441,4.162,444,2.102,447,1.602,448,2.312,492,2.111,494,2.111,517,2.665,529,1.175,530,1.807,531,2.35,534,1.072,564,2.497,936,4.442,960,3.92,1007,1.951,1248,2.581,1249,2.581,1250,2.581,1255,4.938,1509,3.786,1560,2.581,1565,2.581,1589,3.096,1590,2.581,1591,4.938,1592,3.786,1593,4.938,1594,4.938,1595,4.938,1596,2.99,1597,2.99,1598,2.99,1599,2.99,1600,4.385,1601,2.99,1602,4.385,1603,5.193,1604,2.99,1605,2.581,1606,2.99,1607,2.99,1608,2.99,1609,2.99,1610,2.99,1611,4.385,1612,2.99,1613,4.385,1614,4.385,1615,2.99,1616,4.385,1617,2.99,1618,2.99,1619,2.99,1620,2.99,1621,2.99,1622,2.99,1623,2.99,1624,2.99,1625,2.99,1626,2.99,1627,2.99,1628,2.99,1629,2.99,1630,2.99,1631,2.99]],["title/modules/ProductsModule.html",[100,1.584,114,2.189]],["body/modules/ProductsModule.html",[0,0.092,3,0.259,4,0.232,5,0.232,21,0.017,29,0.486,31,0.259,45,0.014,46,0.014,100,2.866,102,2.69,103,2.69,104,3.026,105,3.026,106,2.69,107,3.96,108,3.96,114,4.343,116,3.676,117,3.026,118,2.547,120,2.422,122,4.537,124,3.229,125,1.179,126,3.923,127,2.19,138,5.574,161,2.418,180,1.905,339,4.215,340,4.109,1007,3.467,1589,4.91,1632,4.588,1633,4.588,1634,4.588,1635,5.314,1636,5.314]],["title/injectables/ProductsService.html",[339,2.06,578,1.26]],["body/injectables/ProductsService.html",[0,0.053,3,0.151,4,0.135,5,0.135,10,0.2,11,1.294,13,3.227,18,0.903,20,1.998,21,0.017,22,1.35,23,0.54,24,1.071,25,2.056,26,4.07,29,0.416,30,1.11,31,0.151,36,3.61,45,0.01,46,0.01,54,1.217,55,1.775,64,0.964,77,0.853,81,1.913,125,0.687,127,1.276,146,2.682,152,1.882,153,1.429,154,2.085,163,1.613,171,1.882,175,1.015,180,2.384,193,1.276,198,2.047,211,1.409,217,2.277,242,1.015,251,2.029,271,2.411,273,3.884,278,3.884,279,4.03,281,0.853,293,1.613,297,3.884,317,1.34,333,2.411,334,4.445,339,2.411,341,1.882,342,3.884,343,1.882,357,2.867,359,2.734,362,1.882,365,2.734,368,2.734,432,2.411,447,2.411,529,2.533,534,1.899,548,1.567,559,1.947,578,1.475,579,1.567,588,2.411,590,3.312,604,2.187,606,1.882,609,3.884,613,1.485,619,1.567,665,3.177,681,2.674,936,4.287,960,3.787,1007,2.02,1342,3.884,1363,2.674,1377,2.674,1379,2.674,1400,4.107,1432,2.674,1438,2.674,1462,2.674,1463,2.674,1591,5.021,1592,3.884,1593,5.021,1594,5.021,1595,5.021,1605,3.884,1637,2.674,1638,5.816,1639,3.097,1640,3.097,1641,3.097,1642,3.097,1643,3.097,1644,3.097,1645,3.097,1646,3.097,1647,3.097,1648,3.097,1649,3.097,1650,3.097,1651,3.097,1652,3.097,1653,4.499,1654,3.097,1655,3.097,1656,3.097,1657,3.097,1658,3.097,1659,3.097,1660,3.097,1661,6.178,1662,4.499,1663,6.178,1664,4.499,1665,4.499,1666,4.499,1667,4.499,1668,4.499,1669,3.097,1670,3.097]],["title/entities/Roles.html",[47,1.442,129,1.378]],["body/entities/Roles.html",[0,0.091,3,0.257,4,0.231,5,0.231,10,0.341,18,0.866,21,0.017,22,1.407,23,0.586,29,0.447,30,1.892,31,0.257,34,3.446,40,2.009,45,0.014,46,0.014,47,2.412,49,2.672,51,1.248,55,1.91,62,1.556,65,1.606,66,3.207,81,1.849,94,3.948,128,3.207,129,2.305,153,1.426,166,2.366,227,2.425,674,4.972,1503,4.54,1671,4.557,1672,5.278,1673,5.278,1674,4.557,1675,5.278,1676,5.551,1677,4.082]],["title/guards/RolesGuard.html",[224,1.946,1104,2.714]],["body/guards/RolesGuard.html",[0,0.082,3,0.231,4,0.207,5,0.207,8,2.696,10,0.305,11,1.728,18,0.751,20,1.805,21,0.017,22,1.22,23,0.488,24,0.968,25,1.362,29,0.426,31,0.293,40,1.249,45,0.013,46,0.013,62,1.734,76,2.362,81,1.728,125,1.05,129,2.625,164,2.477,224,3.041,227,1.552,228,2.696,241,2.396,251,1.728,281,1.655,357,2.817,578,1.97,588,2.537,619,3.041,652,2.477,674,3.661,776,3.661,931,4.087,1109,5.995,1112,6.323,1114,5.188,1115,5.37,1117,4.087,1122,3.661,1127,3.661,1131,4.087,1132,4.087,1281,5.188,1678,4.734,1679,3.661,1680,4.734,1681,4.734,1682,4.734,1683,3.661,1684,6.009,1685,4.734,1686,4.734,1687,4.087,1688,4.734,1689,4.734,1690,4.734,1691,4.734,1692,4.734,1693,4.734,1694,4.734,1695,4.734,1696,4.734,1697,6.009,1698,4.734,1699,4.734,1700,4.734,1701,4.734,1702,4.734,1703,4.734]],["title/classes/UpdateOrderDto.html",[0,0.066,1277,2.508]],["body/classes/UpdateOrderDto.html",[0,0.104,2,1.64,3,0.233,4,0.209,5,0.209,10,0.309,18,0.829,21,0.017,23,0.539,24,1.183,29,0.428,31,0.233,45,0.013,46,0.013,51,1.174,64,0.84,65,1.537,78,2.175,153,1.342,155,2.256,156,4.369,164,2.755,166,1.983,175,2.474,191,1.795,202,1.288,230,3.122,236,1.318,281,1.667,400,3.358,401,3.178,412,2.294,413,2.873,414,2.378,416,1.64,418,3.528,553,2.564,652,2.493,838,3.379,839,4.369,845,4.678,852,3.379,861,3.676,871,3.676,898,5.13,997,3.7,1009,3.379,1208,3.379,1213,4.678,1277,3.947,1292,5.223,1304,5.223,1305,5.223,1320,4.678,1704,6.018,1705,6.05,1706,4.785,1707,4.785,1708,4.785,1709,4.785,1710,4.785,1711,4.785]],["title/classes/UpdateProductDto.html",[0,0.066,334,2.508]],["body/classes/UpdateProductDto.html",[0,0.063,2,0.805,3,0.115,4,0.103,5,0.103,10,0.152,18,0.918,21,0.017,22,1.113,23,0.597,24,1.25,29,0.289,31,0.115,45,0.008,46,0.008,51,0.709,64,1.002,65,1.702,69,1.338,76,2.585,77,1.599,78,2.197,81,1.802,118,1.752,153,1.459,164,2.709,166,1.198,180,2.734,191,0.881,202,1.456,236,0.647,281,1.007,307,2.221,310,2.221,312,4.292,320,2.221,325,2.221,330,3.807,334,2.384,359,2.726,362,2.726,365,2.726,368,2.726,381,2.15,386,4.44,395,1.959,400,3.257,401,3.327,410,3.305,412,1.126,413,3.043,414,2.462,416,0.805,418,3.33,420,3.927,553,1.259,652,2.085,686,1.817,848,1.659,852,2.58,860,3.573,861,3.527,869,2.561,870,2.554,871,3.075,879,1.817,881,1.817,882,1.817,883,3.573,884,3.573,914,3.449,933,1.817,934,3.871,935,3.468,936,3.331,937,4.239,938,3.872,939,3.871,940,3.872,941,4.239,942,4.239,943,4.685,944,2.826,945,1.817,947,2.826,948,2.826,949,3.155,950,3.155,951,3.155,952,3.155,953,3.155,954,3.155,955,3.155,956,3.155,957,2.826,958,2.028,960,3.121,963,3.913,964,3.155,965,2.028,966,3.155,967,3.155,968,3.468,971,3.155,972,5.011,977,2.826,978,3.573,981,2.028,982,2.028,985,4.369,992,2.028,997,3.468,1000,2.384,1001,2.028,1004,3.872,1005,3.155,1007,1.533,1009,3.871,1011,1.817,1017,1.817,1022,2.028,1030,1.817,1031,2.028,1482,3.872,1483,3.872,1486,3.872,1500,3.155,1507,3.155,1712,6.375,1713,2.349,1714,3.655,1715,2.349,1716,2.349,1717,2.349,1718,4.485,1719,2.349,1720,3.655,1721,5.804,1722,4.369,1723,3.655,1724,5.482,1725,3.155,1726,3.655,1727,3.655,1728,3.655,1729,3.655,1730,3.655,1731,2.349,1732,2.349,1733,2.349,1734,2.349,1735,2.349,1736,3.655,1737,3.655,1738,2.349,1739,2.349,1740,2.349,1741,2.349,1742,2.349,1743,4.485,1744,2.349,1745,2.349,1746,3.655,1747,2.349,1748,4.485,1749,2.349,1750,2.349,1751,2.349,1752,3.655,1753,2.349,1754,2.349,1755,2.349,1756,2.349,1757,2.349,1758,2.349,1759,2.349,1760,2.349,1761,2.349,1762,2.349,1763,4.485,1764,2.349,1765,2.349,1766,2.349,1767,3.655,1768,3.655,1769,2.349,1770,2.349,1771,2.349,1772,2.349,1773,3.655]],["title/classes/UpdateUserDto.html",[0,0.066,496,2.336]],["body/classes/UpdateUserDto.html",[0,0.118,2,1.994,3,0.284,4,0.254,5,0.254,21,0.017,29,0.466,31,0.284,45,0.015,46,0.015,236,1.603,271,3.118,374,4.108,411,4.108,412,2.789,413,2.398,414,2.287,416,1.994,475,3.796,496,4.141,551,3.796,1032,3.536,1060,5.024,1107,5.27,1774,5.024,1775,6.815,1776,5.819]],["title/entities/User.html",[47,1.442,62,0.93]],["body/entities/User.html",[0,0.08,3,0.226,4,0.203,5,0.203,10,0.299,18,0.946,21,0.017,23,0.62,29,0.383,30,1.662,31,0.226,34,4.018,35,3.603,42,2.361,45,0.013,46,0.013,47,1.739,49,2.347,51,1.151,54,2.569,55,1.801,61,3.722,62,1.435,64,1.059,65,1.754,66,2.817,72,4.265,74,3.603,76,2.33,77,1.801,81,2.157,87,4.265,94,2.64,166,2.259,191,1.739,227,2.458,379,2.829,380,3.309,381,3.134,384,3.309,727,3.972,1503,3.273,1677,3.585,1777,4.002,1778,4.636,1779,4.636,1780,4.636,1781,5.119,1782,4.636,1783,4.636,1784,4.636,1785,4.636,1786,4.636,1787,4.636,1788,4.636,1789,4.636,1790,4.636,1791,4.002]],["title/classes/UserQueryDto.html",[0,0.066,1792,2.508]],["body/classes/UserQueryDto.html",[0,0.104,2,1.622,3,0.231,4,0.207,5,0.207,10,0.305,18,0.895,21,0.017,23,0.582,24,0.968,29,0.388,31,0.231,45,0.013,46,0.013,51,1.166,64,0.964,65,1.66,77,1.913,153,1.624,154,2.569,163,2.569,193,2.862,412,2.27,413,3.018,414,2.595,416,1.622,508,2.877,514,3.759,529,2.362,534,2.625,552,4.661,553,2.537,562,3.16,574,3.92,1792,3.92,1793,6.323,1794,5.699,1795,5.699,1796,6.009,1797,6.944,1798,6.944,1799,4.734,1800,6.009,1801,6.009,1802,4.734,1803,5.699,1804,6.009,1805,4.734,1806,4.734,1807,4.734,1808,4.734,1809,4.087,1810,4.734,1811,4.734]],["title/entities/Users.html",[40,1.014,47,1.442]],["body/entities/Users.html",[0,0.058,3,0.163,4,0.146,5,0.146,10,0.216,18,0.95,21,0.017,23,0.636,24,0.971,29,0.389,30,1.2,31,0.163,34,3.963,35,4.413,40,1.256,41,3.909,42,2.384,45,0.01,46,0.01,47,1.786,48,3.335,49,1.695,51,0.924,54,2.176,55,1.525,61,3.153,62,1.152,64,1.046,65,1.763,66,4.413,67,5.76,68,5.76,72,3.612,74,2.892,76,2.882,77,1.917,78,2.17,80,5.76,81,2.168,87,3.612,94,1.907,129,2.44,160,3.612,175,2.17,227,1.56,379,2.756,380,2.803,381,2.654,382,3.365,383,4.78,384,2.803,385,3.909,577,3.612,727,3.365,903,2.892,1034,4.282,1189,4.109,1205,4.282,1503,4.257,1674,2.891,1676,4.109,1781,2.891,1812,2.891,1813,5.537,1814,5.537,1815,4.76,1816,3.349,1817,3.349,1818,3.349,1819,4.76,1820,3.349,1821,3.349,1822,3.349,1823,3.349,1824,3.349,1825,3.349,1826,3.349,1827,3.349,1828,4.76,1829,3.349,1830,3.349,1831,3.349,1832,4.109,1833,3.349,1834,3.349,1835,3.349,1836,3.349,1837,3.349,1838,4.76,1839,3.349,1840,3.349,1841,3.349,1842,3.349]],["title/controllers/UsersController.html",[141,1.317,1843,2.714]],["body/controllers/UsersController.html",[0,0.06,3,0.17,4,0.153,5,0.153,10,0.225,11,1.41,12,3.442,13,3.045,18,0.767,20,1.845,21,0.017,22,1.362,23,0.571,24,0.99,25,1.767,29,0.444,31,0.17,40,1.707,45,0.01,46,0.01,55,1.848,62,1.869,64,0.931,65,1.423,78,2.014,120,1.31,125,0.774,141,1.941,144,1.988,146,2.481,152,2.122,153,1.559,154,2.404,155,2.161,163,2.202,164,2.304,165,2.7,171,2.979,198,2.944,201,4.076,202,1.464,203,2.627,204,3.931,209,3.695,210,4.007,211,2.795,213,3.198,214,2.979,215,2.278,216,1.674,217,1.767,218,2.278,221,1.674,222,2.465,223,2.122,231,1.988,232,3.684,233,4.004,234,3.695,236,0.962,239,3.695,241,1.767,242,1.145,243,3.497,246,2.465,251,1.767,271,3.467,280,2.7,281,1.56,285,3.79,286,3.198,295,4.007,299,2.7,317,2.658,333,1.871,341,2.122,343,2.122,348,2.7,350,2.465,351,2.7,378,2.121,429,3.198,430,3.79,431,3.461,432,2.627,440,3.014,441,3.225,447,1.871,449,3.014,465,3.014,475,3.198,476,2.465,481,3.014,492,2.465,494,2.465,496,4.273,1032,4.076,1057,2.7,1078,2.627,1128,4.75,1244,4.232,1297,4.232,1792,2.278,1843,3.461,1844,3.014,1845,3.014,1846,3.491,1847,3.491,1848,3.491,1849,3.491,1850,3.491,1851,3.491,1852,3.491,1853,3.491,1854,3.491,1855,3.491,1856,3.442,1857,3.014,1858,3.014,1859,3.491,1860,3.491,1861,3.491,1862,3.491,1863,3.491,1864,2.7,1865,3.491,1866,3.491]],["title/modules/UsersModule.html",[100,1.584,707,2.508]],["body/modules/UsersModule.html",[0,0.094,3,0.266,4,0.238,5,0.238,21,0.017,29,0.489,31,0.266,40,1.436,45,0.014,46,0.014,100,2.896,102,2.755,103,2.755,104,3.1,105,3.1,106,2.755,107,4.001,108,3.1,116,3.73,117,3.1,118,2.61,120,2.458,124,3.308,125,1.207,126,3.308,127,2.244,129,2.348,140,4.21,707,4.944,1843,4.962,1856,4.605,1857,4.7,1867,4.7,1868,4.7,1869,5.444,1870,5.444,1871,4.7,1872,4.7]],["title/injectables/UsersService.html",[578,1.26,1856,2.336]],["body/injectables/UsersService.html",[0,0.046,3,0.129,4,0.116,5,0.116,10,0.171,11,1.152,13,3.115,18,0.832,20,2.001,21,0.017,22,1.379,23,0.541,24,1.073,25,1.872,26,3.83,29,0.438,30,0.948,31,0.129,36,3.456,40,1.667,45,0.009,46,0.009,55,2.039,62,1.781,64,1.001,77,1.33,125,0.587,127,1.09,129,2.073,146,2.026,152,2.433,153,1.53,154,2.388,163,2.073,174,3.096,175,0.867,191,0.993,193,1.09,198,2.769,211,2.769,227,1.765,242,0.867,251,1.872,271,2.886,281,1.901,293,0.948,317,1.145,333,2.145,341,1.608,343,1.608,357,2.834,379,2.09,380,1.339,384,1.339,385,3.802,432,2.145,441,1.506,447,2.145,475,2.612,476,1.868,496,3.955,514,2.28,529,2.273,534,2.073,547,2.145,548,2.026,559,2.33,573,1.339,578,1.312,579,1.339,588,2.145,590,3.598,591,4.169,604,3.41,605,1.868,606,1.608,612,1.726,613,1.919,614,2.284,615,3.151,619,3.437,625,3.735,652,1.09,655,2.935,656,2.75,663,3.151,664,3.456,665,2.827,672,2.284,727,3.84,808,2.284,811,3.096,814,2.284,815,3.096,818,4.473,823,2.284,828,3.096,978,3.41,1032,3.84,1034,4.473,1057,3.096,1173,1.726,1400,2.827,1677,2.046,1791,2.284,1792,3.97,1794,3.456,1795,2.284,1832,2.284,1845,3.456,1856,2.433,1858,2.284,1871,2.284,1872,2.284,1873,2.284,1874,4.003,1875,4.003,1876,4.003,1877,4.003,1878,2.646,1879,4.003,1880,2.646,1881,2.646,1882,2.646,1883,2.646,1884,4.003,1885,2.646,1886,4.003,1887,2.646,1888,2.646,1889,4.003,1890,2.646,1891,4.003,1892,2.646,1893,2.646,1894,4.003,1895,2.646,1896,2.646,1897,4.829,1898,2.646,1899,2.646,1900,2.646,1901,2.646,1902,2.646,1903,2.646,1904,4.829,1905,4.003,1906,5.385,1907,4.003,1908,2.646,1909,2.646,1910,2.646,1911,2.646,1912,4.829,1913,2.646,1914,2.646]],["title/interfaces/ValidationErrorItem.html",[555,1.378,1915,2.714]],["body/interfaces/ValidationErrorItem.html",[0,0.103,3,0.188,4,0.169,5,0.169,8,2.197,10,0.249,21,0.017,23,0.485,24,0.846,29,0.385,31,0.188,45,0.011,46,0.011,51,1.019,64,1,125,0.856,155,2.011,191,1.447,242,1.265,251,1.844,281,1.447,357,2.953,376,2.39,416,1.8,424,3.394,459,3.191,544,4.378,555,1.383,562,3.393,565,3.2,572,1.953,605,3.708,613,2.862,615,2.517,652,2.164,655,2.344,656,3.4,669,4.957,721,2.724,735,3.708,855,2.197,903,2.344,905,2.983,1000,2.517,1068,2.724,1069,4.061,1072,2.983,1074,4.061,1076,2.983,1078,2.814,1079,2.517,1081,2.724,1082,2.983,1083,2.983,1084,2.983,1085,2.983,1086,4.957,1087,2.983,1088,2.724,1089,2.983,1090,4.061,1091,4.061,1092,2.983,1093,2.983,1094,2.724,1095,2.983,1096,2.983,1097,4.617,1098,2.983,1102,2.983,1139,2.197,1173,2.517,1864,2.983,1915,4.885,1916,2.983,1917,5.534,1918,3.33,1919,2.724,1920,3.33,1921,5.155,1922,5.789,1923,5.973,1924,3.33,1925,3.33,1926,3.33,1927,3.33,1928,3.33,1929,3.33,1930,3.33,1931,3.33,1932,4.534,1933,3.33,1934,3.33,1935,3.33,1936,3.33,1937,3.33,1938,3.33,1939,3.33,1940,4.534,1941,3.33,1942,4.534,1943,3.33,1944,3.33,1945,3.33,1946,5.155,1947,3.33,1948,3.33,1949,3.33,1950,3.33,1951,3.33,1952,3.33,1953,3.33,1954,3.33,1955,3.33,1956,3.33,1957,3.33,1958,3.33]],["title/classes/ValidationExceptionFilter.html",[0,0.066,1919,2.714]],["body/classes/ValidationExceptionFilter.html",[0,0.099,2,1.229,3,0.175,4,0.157,5,0.157,8,2.844,10,0.231,11,1.437,18,0.776,20,1.726,21,0.017,22,1.167,23,0.505,24,0.926,25,1.653,29,0.371,31,0.175,45,0.011,46,0.011,51,0.97,64,0.939,77,0.988,125,0.796,155,1.95,191,1.346,193,1.479,242,1.884,251,1.788,281,1.583,357,2.918,376,2.273,416,1.712,424,3.307,459,3.036,544,3.971,555,1.286,562,3.221,565,3.08,572,1.816,605,4.388,613,3.447,615,2.34,652,2.059,655,3.493,656,3.273,669,4.806,721,4.058,735,4.388,855,2.043,903,2.18,905,2.774,1000,2.34,1068,2.533,1069,4.444,1072,3.863,1074,4.806,1076,3.863,1077,3.097,1078,2.677,1079,2.34,1081,2.533,1082,2.774,1083,2.774,1084,2.774,1085,2.774,1086,4.806,1087,2.774,1088,2.533,1089,2.774,1090,3.863,1091,3.863,1092,2.774,1093,2.774,1094,2.533,1095,2.774,1096,2.774,1097,4.444,1098,2.774,1102,2.774,1173,2.34,1864,2.774,1915,4.901,1916,5.053,1917,5.841,1918,3.097,1919,3.527,1920,4.313,1921,5.641,1922,5.641,1923,5.841,1924,3.097,1925,3.097,1926,3.097,1927,3.097,1928,3.097,1929,4.313,1930,3.097,1931,3.097,1932,4.313,1933,3.097,1934,3.097,1935,3.097,1936,3.097,1937,3.097,1938,3.097,1939,4.313,1940,4.313,1941,3.097,1942,4.313,1943,3.097,1944,3.097,1945,3.097,1946,4.962,1947,3.097,1948,3.097,1949,3.097,1950,3.097,1951,3.097,1952,3.097,1953,3.097,1954,3.097,1955,3.097,1956,3.097,1957,3.097,1958,3.097,1959,4.995,1960,4.995,1961,3.587,1962,3.587,1963,3.587,1964,3.587]],["title/coverage.html",[1965,4.051]],["body/coverage.html",[0,0.132,1,2.856,5,0.162,6,3.189,7,3.189,21,0.017,23,0.3,39,2.856,40,0.974,45,0.011,46,0.011,47,2.625,48,1.771,50,3.189,62,1.523,69,4.248,83,2.856,106,1.869,115,2.244,121,2.608,122,2.41,123,2.608,129,1.827,141,2.443,142,3.942,143,3.189,175,1.211,180,1.324,219,2.103,221,1.771,224,1.869,268,3.189,269,3.189,279,2.41,281,1.017,334,2.41,339,1.979,372,2.41,373,4.106,374,4.121,427,3.189,437,2.103,477,2.856,496,2.244,508,4.013,555,2.447,556,2.732,566,2.58,578,2.337,580,3.189,581,3.189,652,3.26,695,2.608,696,3.189,699,2.244,745,3.189,757,2.608,758,3.189,764,2.41,778,2.244,790,2.41,807,3.189,836,2.244,837,3.942,838,4.121,841,2.608,887,2.856,888,3.189,889,3.189,932,3.189,933,3.942,1032,2.244,1033,3.189,1066,2.856,1067,3.189,1068,4.121,1103,3.189,1104,2.608,1138,2.608,1140,3.189,1141,3.189,1147,3.189,1174,3.189,1183,3.189,1188,2.244,1214,3.189,1215,3.189,1237,2.608,1238,3.189,1277,2.41,1284,2.856,1316,3.189,1338,3.189,1473,3.942,1474,3.942,1475,2.856,1504,3.189,1552,2.856,1553,3.189,1589,2.608,1590,3.189,1637,3.189,1671,3.189,1679,3.942,1683,3.942,1704,3.189,1712,3.189,1774,3.189,1777,3.189,1792,2.41,1793,3.189,1812,3.189,1843,2.608,1844,3.189,1856,2.244,1873,3.189,1915,2.608,1916,3.942,1919,2.608,1965,2.856,1966,2.856,1967,3.693,1968,5.097,1969,3.693,1970,3.693,1971,3.693,1972,3.693,1973,5.837,1974,3.693,1975,3.693,1976,3.693,1977,5.097,1978,3.693,1979,3.693,1980,3.693,1981,5.097,1982,5.097,1983,5.097,1984,3.189,1985,3.189,1986,6.293,1987,7.325,1988,4.401,1989,5.837,1990,3.693,1991,6.603,1992,5.097,1993,3.189,1994,3.693,1995,5.097,1996,5.097,1997,3.693,1998,3.693,1999,3.693,2000,3.693,2001,5.097,2002,3.693,2003,3.693,2004,3.693,2005,3.693]],["title/dependencies.html",[103,2.339,2006,2.775]],["body/dependencies.html",[0,0.114,21,0.017,30,1.972,45,0.014,46,0.014,103,2.784,125,1.22,127,2.267,236,1.515,416,1.885,419,2.784,446,2.637,711,3.884,769,3.343,793,3.884,795,3.884,815,4.254,1079,4.301,1122,4.254,1161,5.691,2007,7.059,2008,5.501,2009,6.592,2010,5.501,2011,5.501,2012,5.501,2013,5.501,2014,5.501,2015,5.501,2016,5.501,2017,5.501,2018,5.501,2019,5.501,2020,5.501,2021,5.501,2022,5.501,2023,5.501,2024,5.501,2025,5.501,2026,5.501,2027,5.501,2028,5.501,2029,5.501,2030,5.501,2031,5.501]],["title/miscellaneous/enumerations.html",[2032,1.953,2033,3.99]],["body/miscellaneous/enumerations.html",[10,0.287,21,0.017,45,0.012,46,0.012,156,3.507,161,2.626,174,4.462,193,3.325,227,1.892,547,3.092,548,2.25,659,4.462,874,4.074,895,4.074,960,3.862,1315,4.982,1317,4.982,1319,4.462,1320,4.462,1475,3.437,1537,4.982,1538,5.855,1539,5.855,1540,5.855,1541,5.855,1542,5.855,1543,4.982,1544,4.982,1545,4.982,1546,4.982,1547,4.982,1722,4.982,1803,4.982,1809,3.837,2032,2.701,2033,3.837,2034,5.77,2035,5.77,2036,5.77,2037,4.445,2038,4.445,2039,5.77,2040,4.445,2041,4.445,2042,4.445,2043,4.445,2044,5.77,2045,5.77,2046,5.77,2047,5.77,2048,5.77,2049,5.77,2050,5.77,2051,5.77,2052,5.77,2053,5.77,2054,5.77,2055,5.77,2056,5.77,2057,5.77,2058,4.445,2059,5.77]],["title/miscellaneous/functions.html",[2032,1.953,2060,3.99]],["body/miscellaneous/functions.html",[10,0.397,21,0.015,45,0.015,46,0.015,106,3.742,1993,5.31,2032,3.738,2060,5.31,2061,6.151]],["title/index.html",[10,0.207,2062,2.775,2063,2.775]],["body/index.html",[4,0.185,21,0.017,45,0.012,46,0.012,118,3.404,202,0.82,336,2.566,378,1.827,401,2.877,583,3.645,590,2.404,747,6.131,826,4.412,846,3.94,894,3.265,957,3.265,1106,3.645,1125,3.265,1127,5.492,1164,3.645,1262,3.645,1400,2.981,1687,3.645,1725,3.645,1965,3.265,1966,4.315,2064,4.222,2065,4.222,2066,6.249,2067,5.58,2068,4.222,2069,4.222,2070,4.222,2071,5.58,2072,6.249,2073,4.222,2074,4.222,2075,6.648,2076,4.222,2077,7.352,2078,4.222,2079,7.243,2080,4.222,2081,4.222,2082,5.58,2083,4.222,2084,5.58,2085,4.222,2086,6.249,2087,4.222,2088,5.58,2089,4.222,2090,4.222,2091,4.222,2092,4.222,2093,4.222,2094,6.648,2095,7.352,2096,5.58,2097,4.222,2098,4.222,2099,4.222,2100,4.222,2101,5.58,2102,6.648,2103,5.58,2104,4.222,2105,5.58,2106,6.913,2107,6.648,2108,4.222,2109,5.58,2110,4.222,2111,4.222,2112,4.222,2113,6.648,2114,4.222,2115,4.222,2116,4.222,2117,4.222,2118,4.222,2119,5.58,2120,4.222,2121,4.222,2122,4.222,2123,5.58,2124,4.222,2125,4.222,2126,4.222,2127,5.58,2128,4.222,2129,4.222,2130,5.74,2131,4.222,2132,4.222,2133,4.222,2134,4.222,2135,4.222,2136,4.222,2137,4.222,2138,4.222,2139,5.58,2140,4.222,2141,4.222,2142,4.222,2143,4.222,2144,4.222,2145,4.222,2146,4.222,2147,4.222,2148,4.222,2149,5.58,2150,4.222,2151,4.222,2152,4.222,2153,4.222,2154,5.58,2155,4.222,2156,4.222,2157,4.222,2158,4.817,2159,5.58,2160,4.222,2161,4.222,2162,4.222,2163,4.222,2164,4.222,2165,4.222,2166,4.222,2167,4.222,2168,4.222,2169,4.222,2170,3.645,2171,4.222,2172,4.222,2173,4.222,2174,4.222,2175,4.222,2176,4.222,2177,2.981]],["title/license.html",[2062,2.775,2063,2.775,2177,2.269]],["body/license.html",[21,0.014,45,0.014,46,0.014,118,2.526,312,3.438,563,3.72,670,4.549,762,4.535,1079,3.438,1145,4.549,1173,4.19,1300,5.545,1966,4.075,2158,4.549,2177,3.72,2178,6.928,2179,5.269,2180,5.269,2181,5.269,2182,5.269,2183,5.269,2184,5.269,2185,5.269,2186,5.269,2187,5.269,2188,5.269,2189,6.423,2190,7.741,2191,5.269,2192,5.269,2193,6.928,2194,5.269,2195,5.269,2196,5.269,2197,5.269,2198,5.269,2199,5.269,2200,5.269,2201,5.269,2202,5.269,2203,5.269,2204,6.423,2205,5.269,2206,5.269,2207,5.269,2208,5.269,2209,5.269,2210,5.269,2211,6.423,2212,6.423,2213,5.269,2214,5.269,2215,5.269,2216,5.269,2217,5.269,2218,5.269,2219,5.269,2220,5.269,2221,5.269,2222,5.269,2223,5.269,2224,5.269,2225,5.269,2226,5.269,2227,5.269,2228,5.269,2229,5.269,2230,5.269,2231,5.269,2232,5.269,2233,5.269,2234,5.269,2235,5.269,2236,5.269,2237,5.269,2238,5.269,2239,5.269]],["title/modules.html",[102,2.652]],["body/modules.html",[21,0.015,45,0.015,46,0.015,101,3.839,102,2.978,113,3.576,114,3.351,702,4.155,706,3.839,707,3.839,2130,6.658,2240,7.712,2241,7.712,2242,7.712]],["title/overview.html",[2243,4.523]],["body/overview.html",[2,1.608,21,0.017,45,0.013,46,0.013,49,2.375,100,1.934,101,4.989,102,2.375,103,2.375,104,2.671,105,2.671,106,2.375,107,2.671,108,2.671,109,4.05,110,4.05,111,4.05,112,4.05,113,4.611,114,4.279,115,4.512,116,3.402,117,2.671,118,2.249,120,1.76,219,4.228,221,3.559,224,3.503,339,3.979,534,1.682,579,2.375,699,3.995,702,5.51,703,4.05,704,4.05,705,4.05,706,5.021,707,4.663,778,3.995,787,4.05,788,4.05,789,4.05,790,4.289,1104,3.313,1139,2.671,1329,4.05,1330,4.05,1331,4.05,1632,4.05,1633,4.05,1634,4.05,1856,3.995,1867,4.05,1868,4.05,2243,4.05,2244,5.975,2245,5.975,2246,4.692,2247,4.692]],["title/properties.html",[51,0.897,2006,2.775]],["body/properties.html",[21,0.017,45,0.015,46,0.015,51,1.187,202,1.187,2170,5.279,2177,4.318,2248,6.115,2249,6.115,2250,6.115]],["title/miscellaneous/variables.html",[1168,3.574,2032,1.953]],["body/miscellaneous/variables.html",[10,0.352,21,0.017,23,0.533,45,0.014,46,0.014,64,0.911,77,2.011,129,2.772,164,2.049,193,3.009,227,1.791,251,1.571,293,1.958,317,2.364,357,2.147,446,2.619,894,4.224,1078,2.928,1081,3.857,1115,4.224,1128,5.076,1168,4.224,1284,5.076,1679,4.224,1683,5.646,1984,4.716,1985,5.667,1988,4.716,2032,3.32,2251,5.463,2252,6.564,2253,5.463,2254,5.463,2255,5.463,2256,5.463,2257,5.463,2258,5.463,2259,5.463,2260,6.564,2261,5.463]]],"invertedIndex":[["",{"_index":21,"title":{},"body":{"classes/AddDobToUsers1714389820000.html":{},"entities/Address.html":{},"modules/AdminModule.html":{},"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateOrderDto.html":{},"classes/CreateOrdersTables1714390000000.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"classes/OrderItemDto.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"entities/Product.html":{},"classes/ProductQueryDto.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"entities/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":652,"title":{},"body":{"injectables/AdminUserService.html":{},"classes/CreateOrdersTables1714390000000.html":{},"classes/CreateProductDto.html":{},"entities/Order.html":{},"injectables/OrdersService.html":{},"entities/Product.html":{},"guards/RolesGuard.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"coverage.html":{}}}],["0.0.1",{"_index":2249,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":2017,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":2025,"title":{},"body":{"dependencies.html":{}}}],["0.3.22",{"_index":2031,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":2016,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":2020,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1987,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":2004,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":1996,"title":{},"body":{"coverage.html":{}}}],["0/18",{"_index":1998,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1980,"title":{},"body":{"coverage.html":{}}}],["0/22",{"_index":2000,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1991,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1995,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1992,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":2002,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1968,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":2001,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1997,"title":{},"body":{"coverage.html":{}}}],["01",{"_index":1040,"title":{},"body":{"classes/CreateUserDto.html":{},"controllers/OrdersController.html":{}}}],["01'})@isnotempty()@isdatestring({strict",{"_index":1041,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["02",{"_index":1326,"title":{},"body":{"controllers/OrdersController.html":{}}}],["04",{"_index":1295,"title":{},"body":{"controllers/OrdersController.html":{}}}],["0})@column({type",{"_index":1522,"title":{},"body":{"entities/Product.html":{}}}],["0})@isnumber()@min(0",{"_index":994,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["1",{"_index":534,"title":{"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{}},"body":{"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"classes/ProductQueryDto.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/UserQueryDto.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["1)'})@apiquery({name",{"_index":1249,"title":{},"body":{"controllers/OrdersController.html":{},"controllers/ProductsController.html":{}}}],["1.0.0",{"_index":2019,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1989,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":1990,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":2003,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":529,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"entities/Product.html":{},"classes/ProductQueryDto.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/UserQueryDto.html":{},"injectables/UsersService.html":{}}}],["10)'})@apiquery({name",{"_index":1250,"title":{},"body":{"controllers/OrdersController.html":{},"controllers/ProductsController.html":{}}}],["10.00",{"_index":1587,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["100",{"_index":69,"title":{},"body":{"entities/Address.html":{},"classes/CreateProductDto.html":{},"controllers/OrdersController.html":{},"entities/Product.html":{},"classes/ProductQueryDto.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["1000",{"_index":739,"title":{},"body":{"modules/AppModule.html":{}}}],["100})@column({length",{"_index":1517,"title":{},"body":{"entities/Product.html":{}}}],["100})@isnumber()@min(0)@isoptional",{"_index":1754,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["100})@type(undefined)@isnumber()@min(1)@max(100)@isoptional",{"_index":1569,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["10})@isoptional()@type(undefined)@isint()@min(1)@max(100",{"_index":532,"title":{},"body":{"classes/AdminUserQueryDto.html":{}}}],["10})@type(undefined)@isnumber()@min(0)@isoptional",{"_index":1574,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["11.0.0",{"_index":2009,"title":{},"body":{"dependencies.html":{}}}],["11.0.1",{"_index":2007,"title":{},"body":{"dependencies.html":{}}}],["11.0.5",{"_index":2010,"title":{},"body":{"dependencies.html":{}}}],["11.1.5",{"_index":2012,"title":{},"body":{"dependencies.html":{}}}],["123e4567",{"_index":863,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{},"controllers/OrdersController.html":{}}}],["12d3",{"_index":865,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{},"controllers/OrdersController.html":{}}}],["1499.99",{"_index":1327,"title":{},"body":{"controllers/OrdersController.html":{}}}],["15",{"_index":1318,"title":{},"body":{"controllers/OrdersController.html":{}}}],["150",{"_index":1752,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["16",{"_index":2247,"title":{},"body":{"overview.html":{}}}],["17/17",{"_index":1999,"title":{},"body":{"coverage.html":{}}}],["180",{"_index":1024,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["1990",{"_index":1039,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["1d",{"_index":806,"title":{},"body":{"modules/AuthModule.html":{}}}],["1})@isnumber",{"_index":1234,"title":{},"body":{"classes/OrderItemDto.html":{}}}],["1})@isoptional()@type(undefined)@isint()@min(1",{"_index":535,"title":{},"body":{"classes/AdminUserQueryDto.html":{}}}],["1})@type(undefined)@isnumber()@min(1)@isoptional",{"_index":1576,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["2",{"_index":870,"title":{},"body":{"classes/CreateOrderDto.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"classes/OrderItemDto.html":{},"controllers/OrdersController.html":{},"entities/Product.html":{},"classes/UpdateProductDto.html":{}}}],["2/2",{"_index":1981,"title":{},"body":{"coverage.html":{}}}],["2/3",{"_index":1983,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":83,"title":{},"body":{"entities/Address.html":{},"controllers/OrdersController.html":{},"coverage.html":{}}}],["200",{"_index":201,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AuthController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":285,"title":{},"body":{"controllers/AdminProductsController.html":{},"controllers/OrdersController.html":{},"controllers/UsersController.html":{}}}],["2024",{"_index":1294,"title":{},"body":{"controllers/OrdersController.html":{}}}],["2025",{"_index":2180,"title":{},"body":{"license.html":{}}}],["24.99",{"_index":996,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["25",{"_index":1316,"title":{},"body":{"controllers/OrdersController.html":{},"coverage.html":{}}}],["255",{"_index":80,"title":{},"body":{"entities/Address.html":{},"entities/Product.html":{},"entities/Users.html":{}}}],["28",{"_index":1757,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["29.99",{"_index":993,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["29t09:00:00.000z",{"_index":1296,"title":{},"body":{"controllers/OrdersController.html":{}}}],["29t09:30:00.000z",{"_index":1306,"title":{},"body":{"controllers/OrdersController.html":{}}}],["3",{"_index":1523,"title":{},"body":{"entities/Product.html":{}}}],["3/3",{"_index":1973,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":686,"title":{},"body":{"injectables/AdminUserService.html":{},"controllers/OrdersController.html":{},"classes/UpdateProductDto.html":{}}}],["32",{"_index":881,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{},"classes/UpdateProductDto.html":{}}}],["34",{"_index":1758,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["36",{"_index":1759,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["38",{"_index":1760,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["4.0.1",{"_index":2021,"title":{},"body":{"dependencies.html":{}}}],["4.0.2",{"_index":2008,"title":{},"body":{"dependencies.html":{}}}],["4/7",{"_index":1970,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":1244,"title":{},"body":{"controllers/OrdersController.html":{},"controllers/UsersController.html":{}}}],["401",{"_index":771,"title":{},"body":{"controllers/AuthController.html":{}}}],["403",{"_index":287,"title":{},"body":{"controllers/AdminProductsController.html":{},"controllers/OrdersController.html":{}}}],["404",{"_index":210,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["426614174000",{"_index":867,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{},"controllers/OrdersController.html":{}}}],["426614174000'})@isuuid",{"_index":1232,"title":{},"body":{"classes/OrderItemDto.html":{}}}],["426614174001",{"_index":880,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{}}}],["46",{"_index":1971,"title":{},"body":{"coverage.html":{}}}],["49.99",{"_index":1292,"title":{},"body":{"controllers/OrdersController.html":{},"classes/UpdateOrderDto.html":{}}}],["5",{"_index":848,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{},"controllers/OrdersController.html":{},"classes/UpdateProductDto.html":{}}}],["5.0.1",{"_index":2030,"title":{},"body":{"dependencies.html":{}}}],["5.0.2",{"_index":2014,"title":{},"body":{"dependencies.html":{}}}],["5.1.1",{"_index":2015,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":1977,"title":{},"body":{"coverage.html":{}}}],["50.00",{"_index":1588,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["50})@type(undefined)@isnumber()@min(0)@isoptional",{"_index":1572,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["57",{"_index":1969,"title":{},"body":{"coverage.html":{}}}],["59.99",{"_index":1748,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["59.99})@isnumber()@min(0)@isoptional",{"_index":1732,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["6",{"_index":2244,"title":{},"body":{"overview.html":{}}}],["6/10",{"_index":1979,"title":{},"body":{"coverage.html":{}}}],["6/13",{"_index":1972,"title":{},"body":{"coverage.html":{}}}],["6/6",{"_index":1974,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":1978,"title":{},"body":{"coverage.html":{}}}],["66",{"_index":1982,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":2246,"title":{},"body":{"overview.html":{}}}],["7.8.1",{"_index":2027,"title":{},"body":{"dependencies.html":{}}}],["79.99",{"_index":1746,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["8",{"_index":2245,"title":{},"body":{"overview.html":{}}}],["8.15.6",{"_index":2023,"title":{},"body":{"dependencies.html":{}}}],["8801712345678",{"_index":1053,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["9/10",{"_index":1976,"title":{},"body":{"coverage.html":{}}}],["90",{"_index":1975,"title":{},"body":{"coverage.html":{}}}],["98",{"_index":1743,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["99.98",{"_index":1293,"title":{},"body":{"controllers/OrdersController.html":{}}}],["99.99",{"_index":1291,"title":{},"body":{"controllers/OrdersController.html":{}}}],["999.99",{"_index":1324,"title":{},"body":{"controllers/OrdersController.html":{}}}],["9999.99",{"_index":1312,"title":{},"body":{"controllers/OrdersController.html":{}}}],["9_]+):\\s",{"_index":1936,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["__dirname",{"_index":731,"title":{},"body":{"modules/AppModule.html":{}}}],["a456",{"_index":866,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{},"controllers/OrdersController.html":{}}}],["above",{"_index":2210,"title":{},"body":{"license.html":{}}}],["acc",{"_index":1422,"title":{},"body":{"injectables/OrdersService.html":{}}}],["acc[order.status",{"_index":1421,"title":{},"body":{"injectables/OrdersService.html":{}}}],["access",{"_index":289,"title":{},"body":{"controllers/AdminProductsController.html":{},"controllers/OrdersController.html":{}}}],["access_token",{"_index":784,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["accessories",{"_index":1542,"title":{},"body":{"entities/Product.html":{},"miscellaneous/enumerations.html":{}}}],["action",{"_index":2233,"title":{},"body":{"license.html":{}}}],["activate",{"_index":499,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["active",{"_index":395,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"entities/Product.html":{},"classes/UpdateProductDto.html":{}}}],["activeusers",{"_index":679,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["add",{"_index":33,"title":{},"body":{"classes/AddDobToUsers1714389820000.html":{}}}],["adddobtousers.ts",{"_index":7,"title":{},"body":{"classes/AddDobToUsers1714389820000.html":{},"coverage.html":{}}}],["adddobtousers.ts:12",{"_index":19,"title":{},"body":{"classes/AddDobToUsers1714389820000.html":{}}}],["adddobtousers.ts:4",{"_index":28,"title":{},"body":{"classes/AddDobToUsers1714389820000.html":{}}}],["adddobtousers1714389820000",{"_index":1,"title":{"classes/AddDobToUsers1714389820000.html":{}},"body":{"classes/AddDobToUsers1714389820000.html":{},"coverage.html":{}}}],["added",{"_index":1614,"title":{},"body":{"controllers/ProductsController.html":{}}}],["additional",{"_index":845,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{},"classes/UpdateOrderDto.html":{}}}],["additionalproperties",{"_index":1529,"title":{},"body":{"entities/Product.html":{}}}],["address",{"_index":48,"title":{"entities/Address.html":{}},"body":{"entities/Address.html":{},"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDto.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"entities/Users.html":{},"coverage.html":{}}}],["address'})@isoptional()@isemail",{"_index":391,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["address.entity",{"_index":1841,"title":{},"body":{"entities/Users.html":{}}}],["address.user",{"_index":1815,"title":{},"body":{"entities/Users.html":{}}}],["addresses",{"_index":1813,"title":{},"body":{"entities/Users.html":{}}}],["addressrepository",{"_index":1343,"title":{},"body":{"injectables/OrdersService.html":{}}}],["addselect('count",{"_index":1438,"title":{},"body":{"injectables/OrdersService.html":{},"injectables/ProductsService.html":{}}}],["addselect('sum(order.totalamount",{"_index":1439,"title":{},"body":{"injectables/OrdersService.html":{}}}],["admin",{"_index":161,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"injectables/OrdersService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"modules/ProductsModule.html":{},"miscellaneous/enumerations.html":{}}}],["admin/admin.module",{"_index":715,"title":{},"body":{"modules/AppModule.html":{}}}],["admin/orders",{"_index":145,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["admin/products",{"_index":270,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["admin/users",{"_index":428,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["administrative",{"_index":611,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["adminmodule",{"_index":101,"title":{"modules/AdminModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["adminnotes",{"_index":195,"title":{},"body":{"controllers/AdminOrdersController.html":{},"classes/CreateOrdersTables1714390000000.html":{},"entities/Order.html":{},"injectables/OrdersService.html":{}}}],["adminorderscontroller",{"_index":123,"title":{"controllers/AdminOrdersController.html":{}},"body":{"modules/AdminModule.html":{},"controllers/AdminOrdersController.html":{},"coverage.html":{}}}],["adminproductscontroller",{"_index":122,"title":{"controllers/AdminProductsController.html":{}},"body":{"modules/AdminModule.html":{},"controllers/AdminProductsController.html":{},"modules/ProductsModule.html":{},"coverage.html":{}}}],["adminupdateuserdto",{"_index":372,"title":{"classes/AdminUpdateUserDto.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"coverage.html":{}}}],["adminusercontroller",{"_index":121,"title":{"controllers/AdminUserController.html":{}},"body":{"modules/AdminModule.html":{},"controllers/AdminUserController.html":{},"coverage.html":{}}}],["adminuserquerydto",{"_index":437,"title":{"classes/AdminUserQueryDto.html":{}},"body":{"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"coverage.html":{}}}],["adminuserservice",{"_index":115,"title":{"injectables/AdminUserService.html":{}},"body":{"modules/AdminModule.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"coverage.html":{},"overview.html":{}}}],["advanced",{"_index":736,"title":{},"body":{"modules/AppModule.html":{}}}],["after)'})@isoptional()@isdatestring",{"_index":519,"title":{},"body":{"classes/AdminUserQueryDto.html":{}}}],["allowing",{"_index":2120,"title":{},"body":{"index.html":{}}}],["already",{"_index":1893,"title":{},"body":{"injectables/UsersService.html":{}}}],["alter",{"_index":38,"title":{},"body":{"classes/AddDobToUsers1714389820000.html":{}}}],["amazing",{"_index":2163,"title":{},"body":{"index.html":{}}}],["amount",{"_index":1213,"title":{},"body":{"entities/Order.html":{},"injectables/OrdersService.html":{},"classes/UpdateOrderDto.html":{}}}],["analysis",{"_index":1323,"title":{},"body":{"controllers/OrdersController.html":{}}}],["analysis'})@apiquery({name",{"_index":1274,"title":{},"body":{"controllers/OrdersController.html":{}}}],["analytics",{"_index":254,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["analytics'})@apiquery({name",{"_index":176,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["and/or",{"_index":2202,"title":{},"body":{"license.html":{}}}],["andwhere('order.status",{"_index":1449,"title":{},"body":{"injectables/OrdersService.html":{}}}],["another",{"_index":1257,"title":{},"body":{"controllers/OrdersController.html":{}}}],["any).error",{"_index":1100,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["any).message",{"_index":1098,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["api",{"_index":568,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"injectables/AppService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{}}}],["apibearerauth",{"_index":235,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"controllers/OrdersController.html":{}}}],["apibody",{"_index":344,"title":{},"body":{"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"controllers/AuthController.html":{},"controllers/OrdersController.html":{}}}],["apioperation",{"_index":232,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"controllers/AuthController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["apiparam",{"_index":481,"title":{},"body":{"controllers/AdminUserController.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":418,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/OrderItemDto.html":{},"entities/Product.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{}}}],["apiproperty({description",{"_index":400,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/OrderItemDto.html":{},"entities/Product.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{}}}],["apipropertyoptional",{"_index":420,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"classes/CreateProductDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"classes/ProductQueryDto.html":{},"classes/UpdateProductDto.html":{}}}],["apipropertyoptional({description",{"_index":386,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"classes/CreateProductDto.html":{},"classes/ProductQueryDto.html":{},"classes/UpdateProductDto.html":{}}}],["apipropertyoptional({enum",{"_index":537,"title":{},"body":{"classes/AdminUserQueryDto.html":{}}}],["apiquery",{"_index":234,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminUserController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["apiresponse",{"_index":233,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"controllers/AuthController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["apisecurity",{"_index":480,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["apitags",{"_index":231,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"controllers/AuthController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["apitags('a",{"_index":781,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('b",{"_index":1859,"title":{},"body":{"controllers/UsersController.html":{}}}],["apitags('c",{"_index":1619,"title":{},"body":{"controllers/ProductsController.html":{}}}],["apitags('d",{"_index":1288,"title":{},"body":{"controllers/OrdersController.html":{}}}],["apitags('e",{"_index":482,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["apitags('f",{"_index":345,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["apitags('g",{"_index":237,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["app.controller",{"_index":712,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":700,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":695,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":747,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["application_name",{"_index":742,"title":{},"body":{"modules/AppModule.html":{}}}],["applications",{"_index":2071,"title":{},"body":{"index.html":{}}}],["apply",{"_index":628,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["appmodule",{"_index":702,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appropriate",{"_index":1137,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["appservice",{"_index":699,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argumentshost",{"_index":1074,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["arising",{"_index":2237,"title":{},"body":{"license.html":{}}}],["array",{"_index":572,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"entities/Order.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"entities/Product.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["array.isarray(messages",{"_index":1924,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["arrival",{"_index":325,"title":{},"body":{"controllers/AdminProductsController.html":{},"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/ProductQueryDto.html":{},"controllers/ProductsController.html":{},"classes/UpdateProductDto.html":{}}}],["arrival')@apioperation({summary",{"_index":324,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["arrival'})@apiresponse({status",{"_index":326,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["arrivals",{"_index":1565,"title":{},"body":{"classes/ProductQueryDto.html":{},"controllers/ProductsController.html":{}}}],["arrivals')@apioperation({summary",{"_index":1612,"title":{},"body":{"controllers/ProductsController.html":{}}}],["asc",{"_index":547,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"injectables/OrdersService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"classes/ProductQueryDto.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["assertion",{"_index":1945,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["assign",{"_index":1902,"title":{},"body":{"injectables/UsersService.html":{}}}],["associated",{"_index":563,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"license.html":{}}}],["async",{"_index":13,"title":{},"body":{"classes/AddDobToUsers1714389820000.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateOrdersTables1714390000000.html":{},"injectables/JwtStrategy.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/ProductsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth",{"_index":759,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":799,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":223,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"modules/AuthModule.html":{},"controllers/OrdersController.html":{},"controllers/UsersController.html":{}}}],["auth.guard.ts",{"_index":1103,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:17",{"_index":1113,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:25",{"_index":1116,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:40",{"_index":1119,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.service",{"_index":779,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":713,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/decorators/current",{"_index":1285,"title":{},"body":{"controllers/OrdersController.html":{}}}],["auth/decorators/roles.decorator",{"_index":226,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/OrdersController.html":{}}}],["auth/guards/jwt",{"_index":222,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/OrdersController.html":{},"controllers/UsersController.html":{}}}],["auth/guards/roles.guard",{"_index":225,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/OrdersController.html":{}}}],["authcontroller",{"_index":757,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticated",{"_index":776,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/RolesGuard.html":{}}}],["authenticates",{"_index":775,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["authentication",{"_index":760,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["authguard",{"_index":1121,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":1108,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":706,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":2170,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authority",{"_index":1136,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authors",{"_index":2227,"title":{},"body":{"license.html":{}}}],["authservice",{"_index":778,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["available",{"_index":963,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/UpdateProductDto.html":{}}}],["average",{"_index":1521,"title":{},"body":{"entities/Product.html":{}}}],["averageordervalue",{"_index":1313,"title":{},"body":{"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["avg(order.totalamount",{"_index":1448,"title":{},"body":{"injectables/OrdersService.html":{}}}],["await",{"_index":36,"title":{},"body":{"classes/AddDobToUsers1714389820000.html":{},"controllers/AdminProductsController.html":{},"injectables/AdminUserService.html":{},"injectables/AuthService.html":{},"classes/CreateOrdersTables1714390000000.html":{},"injectables/JwtStrategy.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/ProductsService.html":{},"injectables/UsersService.html":{}}}],["aws",{"_index":2109,"title":{},"body":{"index.html":{}}}],["azminur",{"_index":2181,"title":{},"body":{"license.html":{}}}],["back.jpg",{"_index":1765,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["backers",{"_index":2164,"title":{},"body":{"index.html":{}}}],["bad",{"_index":1297,"title":{},"body":{"controllers/OrdersController.html":{},"controllers/UsersController.html":{}}}],["badrequestexception",{"_index":605,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["badrequestexception('created",{"_index":620,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["badrequestexception('email",{"_index":1892,"title":{},"body":{"injectables/UsersService.html":{}}}],["badrequestexception('last",{"_index":624,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["badrequestexception(`error",{"_index":658,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["badrequestexception(`role",{"_index":673,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["bangladeshi",{"_index":1052,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["based",{"_index":1125,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"index.html":{}}}],["basic",{"_index":666,"title":{},"body":{"injectables/AdminUserService.html":{},"entities/Product.html":{}}}],["bcrypt",{"_index":815,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["bcrypt.compare(logindto.password",{"_index":822,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(createuserdto.password",{"_index":1895,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcrypt.hash(password",{"_index":1913,"title":{},"body":{"injectables/UsersService.html":{}}}],["beauty",{"_index":1546,"title":{},"body":{"entities/Product.html":{},"miscellaneous/enumerations.html":{}}}],["before",{"_index":576,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"controllers/OrdersController.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{}}}],["before)'})@isoptional()@isdatestring",{"_index":521,"title":{},"body":{"classes/AdminUserQueryDto.html":{}}}],["being",{"_index":1304,"title":{},"body":{"controllers/OrdersController.html":{},"classes/UpdateOrderDto.html":{}}}],["best",{"_index":307,"title":{},"body":{"controllers/AdminProductsController.html":{},"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/ProductQueryDto.html":{},"controllers/ProductsController.html":{},"classes/UpdateProductDto.html":{}}}],["bestsellerscount",{"_index":1666,"title":{},"body":{"injectables/ProductsService.html":{}}}],["between",{"_index":607,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/OrdersService.html":{}}}],["between(startdate",{"_index":1395,"title":{},"body":{"injectables/OrdersService.html":{}}}],["between(thirtydaysago",{"_index":691,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["birth",{"_index":390,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{}}}],["birth'})@isoptional()@type(undefined)@isdate",{"_index":387,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["black",{"_index":1017,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/ProductQueryDto.html":{},"classes/UpdateProductDto.html":{}}}],["black'})@isstring()@isoptional",{"_index":1559,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["bleach",{"_index":954,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["blue",{"_index":879,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{},"classes/UpdateProductDto.html":{}}}],["board",{"_index":2157,"title":{},"body":{"index.html":{}}}],["body",{"_index":214,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"controllers/AuthController.html":{},"controllers/OrdersController.html":{},"controllers/UsersController.html":{}}}],["body('adminnotes",{"_index":264,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["body('isactive",{"_index":502,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["body('orderids",{"_index":266,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["body('role",{"_index":506,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["body('status",{"_index":263,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["books",{"_index":1543,"title":{},"body":{"entities/Product.html":{},"miscellaneous/enumerations.html":{}}}],["boolean",{"_index":76,"title":{},"body":{"entities/Address.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"classes/CreateProductDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"entities/Product.html":{},"classes/ProductQueryDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateProductDto.html":{},"entities/User.html":{},"entities/Users.html":{}}}],["boolean})@transform",{"_index":1561,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["bootstrap",{"_index":106,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/OrdersModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["brand",{"_index":934,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/ProductQueryDto.html":{},"classes/UpdateProductDto.html":{}}}],["browse",{"_index":2242,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":2240,"title":{},"body":{"modules.html":{}}}],["building",{"_index":2067,"title":{},"body":{"index.html":{}}}],["burgundy",{"_index":1019,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["button",{"_index":1771,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["c",{"_index":2179,"title":{},"body":{"license.html":{}}}],["calculating",{"_index":1372,"title":{},"body":{"injectables/OrdersService.html":{}}}],["canactivate",{"_index":1109,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":1114,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["cancelled",{"_index":1319,"title":{},"body":{"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"miscellaneous/enumerations.html":{}}}],["care",{"_index":947,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/UpdateProductDto.html":{}}}],["careinstructions",{"_index":935,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/UpdateProductDto.html":{}}}],["cascade",{"_index":910,"title":{},"body":{"classes/CreateOrdersTables1714390000000.html":{},"entities/Order.html":{}}}],["cash_on_delivery",{"_index":886,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{}}}],["casual",{"_index":1027,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["casual_wear",{"_index":2053,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["catalog",{"_index":1620,"title":{},"body":{"controllers/ProductsController.html":{}}}],["catch",{"_index":655,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["catch(badrequestexception",{"_index":1918,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["catch(exception",{"_index":1072,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["catch(httpexception",{"_index":1080,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["categorization",{"_index":1481,"title":{},"body":{"entities/Product.html":{}}}],["category",{"_index":936,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/ProductQueryDto.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductDto.html":{}}}],["category'})@apiresponse({status",{"_index":1596,"title":{},"body":{"controllers/ProductsController.html":{}}}],["category.'})@apiresponse({status",{"_index":1607,"title":{},"body":{"controllers/ProductsController.html":{}}}],["category.enum",{"_index":1586,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["category.enum.ts",{"_index":2039,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["categorycounts",{"_index":1668,"title":{},"body":{"injectables/ProductsService.html":{}}}],["change",{"_index":1912,"title":{},"body":{"injectables/UsersService.html":{}}}],["changepassword",{"_index":1874,"title":{},"body":{"injectables/UsersService.html":{}}}],["changepassword(id",{"_index":1879,"title":{},"body":{"injectables/UsersService.html":{}}}],["channel",{"_index":2132,"title":{},"body":{"index.html":{}}}],["charge",{"_index":2186,"title":{},"body":{"license.html":{}}}],["check",{"_index":1127,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"index.html":{}}}],["checks",{"_index":754,"title":{},"body":{"injectables/AppService.html":{}}}],["city",{"_index":52,"title":{},"body":{"entities/Address.html":{}}}],["claim",{"_index":2230,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/AddDobToUsers1714389820000.html":{},"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateOrdersTables1714390000000.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoginDto.html":{},"classes/OrderItemDto.html":{},"classes/ProductQueryDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"classes/ValidationExceptionFilter.html":{}},"body":{"classes/AddDobToUsers1714389820000.html":{},"entities/Address.html":{},"modules/AdminModule.html":{},"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateOrderDto.html":{},"classes/CreateOrdersTables1714390000000.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"classes/OrderItemDto.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"entities/Product.html":{},"classes/ProductQueryDto.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"entities/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AddDobToUsers1714389820000.html":{},"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateOrdersTables1714390000000.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoginDto.html":{},"classes/OrderItemDto.html":{},"classes/ProductQueryDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"classes/ValidationExceptionFilter.html":{},"overview.html":{}}}],["classic",{"_index":971,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["clicks",{"_index":2119,"title":{},"body":{"index.html":{}}}],["closure",{"_index":1770,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["clothing",{"_index":874,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{},"entities/Product.html":{},"miscellaneous/enumerations.html":{}}}],["cloud",{"_index":2104,"title":{},"body":{"index.html":{}}}],["cluster_adminmodule",{"_index":109,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_adminmodule_exports",{"_index":111,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_adminmodule_imports",{"_index":110,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_adminmodule_providers",{"_index":112,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":703,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":705,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":704,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":787,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":788,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":789,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_ordersmodule",{"_index":1329,"title":{},"body":{"modules/OrdersModule.html":{},"overview.html":{}}}],["cluster_ordersmodule_exports",{"_index":1331,"title":{},"body":{"modules/OrdersModule.html":{},"overview.html":{}}}],["cluster_ordersmodule_imports",{"_index":1332,"title":{},"body":{"modules/OrdersModule.html":{}}}],["cluster_ordersmodule_providers",{"_index":1330,"title":{},"body":{"modules/OrdersModule.html":{},"overview.html":{}}}],["cluster_productsmodule",{"_index":1632,"title":{},"body":{"modules/ProductsModule.html":{},"overview.html":{}}}],["cluster_productsmodule_exports",{"_index":1633,"title":{},"body":{"modules/ProductsModule.html":{},"overview.html":{}}}],["cluster_productsmodule_providers",{"_index":1634,"title":{},"body":{"modules/ProductsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1867,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":1868,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cold",{"_index":950,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["color",{"_index":877,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{},"classes/ProductQueryDto.html":{}}}],["colors",{"_index":937,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/UpdateProductDto.html":{}}}],["column",{"_index":34,"title":{},"body":{"classes/AddDobToUsers1714389820000.html":{},"entities/Address.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"entities/Roles.html":{},"entities/User.html":{},"entities/Users.html":{}}}],["column('varchar",{"_index":1551,"title":{},"body":{"entities/Product.html":{}}}],["column({default",{"_index":1784,"title":{},"body":{"entities/User.html":{}}}],["column({nullable",{"_index":1781,"title":{},"body":{"entities/User.html":{},"entities/Users.html":{}}}],["column({type",{"_index":66,"title":{},"body":{"entities/Address.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Roles.html":{},"entities/User.html":{},"entities/Users.html":{}}}],["column({unique",{"_index":1779,"title":{},"body":{"entities/User.html":{}}}],["come",{"_index":2124,"title":{},"body":{"index.html":{}}}],["comfort",{"_index":1727,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["comfortable",{"_index":970,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["comment",{"_index":1819,"title":{},"body":{"entities/Users.html":{}}}],["comments",{"_index":1705,"title":{},"body":{"classes/UpdateOrderDto.html":{}}}],["commerce",{"_index":1477,"title":{},"body":{"entities/Product.html":{}}}],["conditions",{"_index":2209,"title":{},"body":{"license.html":{}}}],["configmodule",{"_index":709,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":716,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":710,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('dbhost",{"_index":722,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('dbname",{"_index":730,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('dbpassword",{"_index":728,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('dbport",{"_index":724,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('dbuser",{"_index":726,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('jwt_expires_in",{"_index":805,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get('jwt_secret",{"_index":802,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["connection",{"_index":2238,"title":{},"body":{"license.html":{}}}],["console",{"_index":737,"title":{},"body":{"modules/AppModule.html":{}}}],["const",{"_index":357,"title":{},"body":{"controllers/AdminProductsController.html":{},"injectables/AdminUserService.html":{},"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["constraint",{"_index":905,"title":{},"body":{"classes/CreateOrdersTables1714390000000.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["constraintmatch",{"_index":1932,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["constraintmatch[1",{"_index":1937,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["constraintmatch[2",{"_index":1938,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["constraints",{"_index":1946,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["constraints[key",{"_index":1952,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["constructor",{"_index":588,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/OrdersService.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"injectables/UsersService.html":{}}}],["constructor(configservice",{"_index":1153,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(jwtservice",{"_index":1111,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["constructor(orderrepository",{"_index":1340,"title":{},"body":{"injectables/OrdersService.html":{}}}],["constructor(private",{"_index":241,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{}}}],["constructor(productrepository",{"_index":1639,"title":{},"body":{"injectables/ProductsService.html":{}}}],["constructor(reflector",{"_index":1680,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(userrepository",{"_index":589,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["constructor(usersrepository",{"_index":808,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["containing",{"_index":1157,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["contains",{"_index":557,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{}}}],["context",{"_index":1117,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["context.getclass",{"_index":1132,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":1131,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":1689,"title":{},"body":{"guards/RolesGuard.html":{}}}],["continue",{"_index":1133,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["contract",{"_index":2234,"title":{},"body":{"license.html":{}}}],["controller",{"_index":141,"title":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('admin/orders",{"_index":238,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["controller('admin/products",{"_index":347,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["controller('admin/users",{"_index":483,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["controller('auth",{"_index":782,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('orders",{"_index":1289,"title":{},"body":{"controllers/OrdersController.html":{}}}],["controller('products",{"_index":1621,"title":{},"body":{"controllers/ProductsController.html":{}}}],["controller('users",{"_index":1860,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":120,"title":{},"body":{"modules/AdminModule.html":{},"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["controllers/admin",{"_index":131,"title":{},"body":{"modules/AdminModule.html":{}}}],["copies",{"_index":2204,"title":{},"body":{"license.html":{}}}],["copy",{"_index":2189,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":2178,"title":{},"body":{"license.html":{}}}],["core",{"_index":751,"title":{},"body":{"injectables/AppService.html":{}}}],["cotton",{"_index":968,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/ProductQueryDto.html":{},"classes/UpdateProductDto.html":{}}}],["cotton'})@isstring()@isoptional",{"_index":989,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/ProductQueryDto.html":{}}}],["count",{"_index":681,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/ProductsService.html":{}}}],["count(distinct",{"_index":1467,"title":{},"body":{"injectables/OrdersService.html":{}}}],["count(order.id",{"_index":1447,"title":{},"body":{"injectables/OrdersService.html":{}}}],["country",{"_index":53,"title":{},"body":{"entities/Address.html":{}}}],["courses",{"_index":2138,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":1965,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":271,"title":{},"body":{"controllers/AdminProductsController.html":{},"classes/CreateOrdersTables1714390000000.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/ProductsService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(@body",{"_index":348,"title":{},"body":{"controllers/AdminProductsController.html":{},"controllers/OrdersController.html":{},"controllers/UsersController.html":{}}}],["create(createorderdto",{"_index":1240,"title":{},"body":{"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["create(createproductdto",{"_index":278,"title":{},"body":{"controllers/AdminProductsController.html":{},"injectables/ProductsService.html":{}}}],["create(createuserdto",{"_index":1845,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["created",{"_index":286,"title":{},"body":{"controllers/AdminProductsController.html":{},"injectables/AdminUserService.html":{},"controllers/OrdersController.html":{},"entities/Product.html":{},"controllers/UsersController.html":{}}}],["created'})@createdatecolumn",{"_index":1496,"title":{},"body":{"entities/Product.html":{}}}],["created_at",{"_index":1800,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["createdafter",{"_index":510,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{}}}],["createdat",{"_index":54,"title":{},"body":{"entities/Address.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"classes/CreateOrdersTables1714390000000.html":{},"entities/Order.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"entities/Product.html":{},"classes/ProductQueryDto.html":{},"injectables/ProductsService.html":{},"entities/User.html":{},"entities/Users.html":{}}}],["createdatecolumn",{"_index":72,"title":{},"body":{"entities/Address.html":{},"entities/Order.html":{},"entities/Product.html":{},"entities/User.html":{},"entities/Users.html":{}}}],["createdbefore",{"_index":511,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{}}}],["createorderdto",{"_index":836,"title":{"classes/CreateOrderDto.html":{}},"body":{"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"coverage.html":{}}}],["createorderdto.items",{"_index":1376,"title":{},"body":{"injectables/OrdersService.html":{}}}],["createorderdto.notes",{"_index":1368,"title":{},"body":{"injectables/OrdersService.html":{}}}],["createorderdto.paymentmethod",{"_index":1370,"title":{},"body":{"injectables/OrdersService.html":{}}}],["createorderdto})@apiresponse({status",{"_index":1243,"title":{},"body":{"controllers/OrdersController.html":{}}}],["createorderstables.ts",{"_index":889,"title":{},"body":{"classes/CreateOrdersTables1714390000000.html":{},"coverage.html":{}}}],["createorderstables.ts:4",{"_index":891,"title":{},"body":{"classes/CreateOrdersTables1714390000000.html":{}}}],["createorderstables.ts:49",{"_index":890,"title":{},"body":{"classes/CreateOrdersTables1714390000000.html":{}}}],["createorderstables1714390000000",{"_index":887,"title":{"classes/CreateOrdersTables1714390000000.html":{}},"body":{"classes/CreateOrdersTables1714390000000.html":{},"coverage.html":{}}}],["createparamdecorator",{"_index":2254,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createproductdto",{"_index":279,"title":{"classes/CreateProductDto.html":{}},"body":{"controllers/AdminProductsController.html":{},"classes/CreateProductDto.html":{},"injectables/ProductsService.html":{},"coverage.html":{}}}],["createproductdto})@apiresponse({status",{"_index":284,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["createquerybuilder('order",{"_index":1435,"title":{},"body":{"injectables/OrdersService.html":{}}}],["createquerybuilder('orderitem",{"_index":1425,"title":{},"body":{"injectables/OrdersService.html":{}}}],["createquerybuilder('product",{"_index":1463,"title":{},"body":{"injectables/OrdersService.html":{},"injectables/ProductsService.html":{}}}],["createquerybuilder('user",{"_index":1454,"title":{},"body":{"injectables/OrdersService.html":{}}}],["creates",{"_index":282,"title":{},"body":{"controllers/AdminProductsController.html":{},"controllers/OrdersController.html":{}}}],["createuserdto",{"_index":1032,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.profileimage",{"_index":1901,"title":{},"body":{"injectables/UsersService.html":{}}}],["creation",{"_index":518,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{}}}],["credentials",{"_index":773,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{}}}],["credit_card",{"_index":856,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{}}}],["crew",{"_index":1029,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["criteria",{"_index":653,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["ctx",{"_index":1081,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["ctx.getrequest",{"_index":1084,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":1083,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":2255,"title":{},"body":{"miscellaneous/variables.html":{}}}],["current",{"_index":558,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"controllers/OrdersController.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"entities/Product.html":{}}}],["currently",{"_index":1509,"title":{},"body":{"entities/Product.html":{},"controllers/ProductsController.html":{}}}],["currentuser",{"_index":1284,"title":{},"body":{"controllers/OrdersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["customer",{"_index":174,"title":{},"body":{"controllers/AdminOrdersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["customerrole",{"_index":1897,"title":{},"body":{"injectables/UsersService.html":{}}}],["d",{"_index":2018,"title":{},"body":{"dependencies.html":{}}}],["damages",{"_index":2231,"title":{},"body":{"license.html":{}}}],["dark",{"_index":882,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{},"classes/UpdateProductDto.html":{}}}],["data",{"_index":293,"title":{},"body":{"controllers/AdminProductsController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"classes/LoginDto.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"classes/ProductQueryDto.html":{},"injectables/ProductsService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["database",{"_index":729,"title":{},"body":{"modules/AppModule.html":{}}}],["date",{"_index":42,"title":{},"body":{"classes/AddDobToUsers1714389820000.html":{},"entities/Address.html":{},"controllers/AdminOrdersController.html":{},"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"entities/Order.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"entities/Product.html":{},"entities/User.html":{},"entities/Users.html":{}}}],["date'})@apiquery({name",{"_index":1252,"title":{},"body":{"controllers/OrdersController.html":{}}}],["date'})@apiresponse({status",{"_index":1253,"title":{},"body":{"controllers/OrdersController.html":{}}}],["date().toisostring",{"_index":1095,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["date(0",{"_index":638,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["date(createdbefore",{"_index":618,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["date(lastloginafter",{"_index":622,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["date(lastloginbefore",{"_index":623,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["date_trunc('${interval",{"_index":1445,"title":{},"body":{"injectables/OrdersService.html":{}}}],["date})@apiquery({name",{"_index":169,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["day",{"_index":185,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["day)'})@apiresponse({status",{"_index":1275,"title":{},"body":{"controllers/OrdersController.html":{}}}],["days",{"_index":687,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["dd",{"_index":1038,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["deactivate",{"_index":500,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["deal",{"_index":2192,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":2239,"title":{},"body":{"license.html":{}}}],["decimal",{"_index":1195,"title":{},"body":{"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{}}}],["decimal'})@column({type",{"_index":1519,"title":{},"body":{"entities/Product.html":{}}}],["decimal(10,2",{"_index":897,"title":{},"body":{"classes/CreateOrdersTables1714390000000.html":{}}}],["declarations",{"_index":105,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/OrdersModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorator",{"_index":2258,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decorators",{"_index":65,"title":{},"body":{"entities/Address.html":{},"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"classes/OrderItemDto.html":{},"controllers/OrdersController.html":{},"entities/Product.html":{},"classes/ProductQueryDto.html":{},"controllers/ProductsController.html":{},"entities/Roles.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"entities/Users.html":{},"controllers/UsersController.html":{}}}],["deeper",{"_index":2134,"title":{},"body":{"index.html":{}}}],["default",{"_index":77,"title":{},"body":{"entities/Address.html":{},"controllers/AdminOrdersController.html":{},"classes/AdminUserQueryDto.html":{},"classes/CreateOrdersTables1714390000000.html":{},"classes/CreateProductDto.html":{},"classes/HttpExceptionFilter.html":{},"entities/Order.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"entities/Product.html":{},"classes/ProductQueryDto.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"entities/Users.html":{},"injectables/UsersService.html":{},"classes/ValidationExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":18,"title":{},"body":{"classes/AddDobToUsers1714389820000.html":{},"entities/Address.html":{},"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateOrderDto.html":{},"classes/CreateOrdersTables1714390000000.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"classes/OrderItemDto.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"entities/Product.html":{},"classes/ProductQueryDto.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"entities/Users.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationExceptionFilter.html":{}}}],["defines",{"_index":422,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"classes/LoginDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"classes/ProductQueryDto.html":{}}}],["delete",{"_index":299,"title":{},"body":{"controllers/AdminProductsController.html":{},"classes/CreateOrdersTables1714390000000.html":{},"controllers/UsersController.html":{}}}],["delete(':id",{"_index":353,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["delete(':id')@apioperation({summary",{"_index":298,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["deleted",{"_index":302,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["deletes",{"_index":300,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["deliver",{"_index":847,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{}}}],["delivered",{"_index":1317,"title":{},"body":{"controllers/OrdersController.html":{},"miscellaneous/enumerations.html":{}}}],["delivery_man",{"_index":2059,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["denim",{"_index":1721,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["dependencies",{"_index":103,"title":{"dependencies.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/OrdersModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":2094,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":2108,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":2101,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":2118,"title":{},"body":{"index.html":{}}}],["desc",{"_index":548,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"injectables/OrdersService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"classes/ProductQueryDto.html":{},"injectables/ProductsService.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["desc'})@isoptional()@isstring",{"_index":549,"title":{},"body":{"classes/AdminUserQueryDto.html":{}}}],["description",{"_index":202,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/OrderItemDto.html":{},"controllers/OrdersController.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"entities/Product.html":{},"classes/ProductQueryDto.html":{},"controllers/ProductsController.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"controllers/UsersController.html":{},"index.html":{},"properties.html":{}}}],["detail.jpg",{"_index":1766,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["detailed",{"_index":189,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/OrdersController.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{}}}],["details",{"_index":1290,"title":{},"body":{"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"entities/Product.html":{}}}],["details.'})@apibody({type",{"_index":1242,"title":{},"body":{"controllers/OrdersController.html":{}}}],["development",{"_index":2080,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":2144,"title":{},"body":{"index.html":{}}}],["direction.enum",{"_index":1810,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["direction.enum.ts",{"_index":2035,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["discord",{"_index":2131,"title":{},"body":{"index.html":{}}}],["discounted",{"_index":1500,"title":{},"body":{"entities/Product.html":{},"classes/UpdateProductDto.html":{}}}],["discountedprice",{"_index":1482,"title":{},"body":{"entities/Product.html":{},"classes/UpdateProductDto.html":{}}}],["distribute",{"_index":2200,"title":{},"body":{"license.html":{}}}],["dive",{"_index":2133,"title":{},"body":{"index.html":{}}}],["dob",{"_index":41,"title":{},"body":{"classes/AddDobToUsers1714389820000.html":{},"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"entities/Users.html":{}}}],["documentation",{"_index":1966,"title":{},"body":{"coverage.html":{},"index.html":{},"license.html":{}}}],["doe",{"_index":1047,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["doesn't",{"_index":1700,"title":{},"body":{"guards/RolesGuard.html":{}}}],["down",{"_index":14,"title":{},"body":{"classes/AddDobToUsers1714389820000.html":{},"classes/CreateOrdersTables1714390000000.html":{}}}],["down(queryrunner",{"_index":16,"title":{},"body":{"classes/AddDobToUsers1714389820000.html":{},"classes/CreateOrdersTables1714390000000.html":{}}}],["dresses",{"_index":2044,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["drop",{"_index":44,"title":{},"body":{"classes/AddDobToUsers1714389820000.html":{}}}],["dry",{"_index":952,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["dsc",{"_index":2041,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["dto/admin",{"_index":474,"title":{},"body":{"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{}}}],["dto/create",{"_index":341,"title":{},"body":{"controllers/AdminProductsController.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/ProductsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/login.dto",{"_index":780,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/update",{"_index":343,"title":{},"body":{"controllers/AdminProductsController.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/ProductsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/user",{"_index":1858,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["during",{"_index":835,"title":{},"body":{"injectables/AuthService.html":{}}}],["e",{"_index":1476,"title":{},"body":{"entities/Product.html":{}}}],["e2e",{"_index":2089,"title":{},"body":{"index.html":{}}}],["e89b",{"_index":864,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{},"controllers/OrdersController.html":{}}}],["each",{"_index":884,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/OrderItemDto.html":{},"classes/UpdateProductDto.html":{}}}],["efficient",{"_index":2068,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":2099,"title":{},"body":{"index.html":{}}}],["elastane",{"_index":1767,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["elastane'})@isstring()@isoptional",{"_index":1744,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["electronics",{"_index":1537,"title":{},"body":{"entities/Product.html":{},"miscellaneous/enumerations.html":{}}}],["elevate",{"_index":944,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/ProductQueryDto.html":{},"classes/UpdateProductDto.html":{}}}],["elevate_admin",{"_index":743,"title":{},"body":{"modules/AppModule.html":{}}}],["elvate",{"_index":755,"title":{},"body":{"injectables/AppService.html":{}}}],["email",{"_index":379,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"entities/User.html":{},"entities/Users.html":{},"injectables/UsersService.html":{}}}],["email'})@isoptional()@isstring",{"_index":541,"title":{},"body":{"classes/AdminUserQueryDto.html":{}}}],["end",{"_index":1264,"title":{},"body":{"controllers/OrdersController.html":{}}}],["enddate",{"_index":158,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["ensure",{"_index":2097,"title":{},"body":{"index.html":{}}}],["enterprise",{"_index":2148,"title":{},"body":{"index.html":{}}}],["entities",{"_index":49,"title":{},"body":{"entities/Address.html":{},"modules/AppModule.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"entities/Roles.html":{},"entities/User.html":{},"entities/Users.html":{},"overview.html":{}}}],["entities/order",{"_index":1335,"title":{},"body":{"modules/OrdersModule.html":{},"injectables/OrdersService.html":{}}}],["entities/order.entity",{"_index":1334,"title":{},"body":{"modules/OrdersModule.html":{},"injectables/OrdersService.html":{}}}],["entities/product.entity",{"_index":1007,"title":{},"body":{"classes/CreateProductDto.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductDto.html":{}}}],["entities/roles.entity",{"_index":1872,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entities/users.entity",{"_index":1871,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entity",{"_index":47,"title":{"entities/Address.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"entities/Roles.html":{},"entities/User.html":{},"entities/Users.html":{}},"body":{"entities/Address.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"entities/Roles.html":{},"entities/User.html":{},"entities/Users.html":{},"coverage.html":{}}}],["entity('addresses",{"_index":98,"title":{},"body":{"entities/Address.html":{}}}],["entity('order_items",{"_index":1229,"title":{},"body":{"entities/OrderItem.html":{}}}],["entity('orders",{"_index":1209,"title":{},"body":{"entities/Order.html":{}}}],["entity('products",{"_index":1550,"title":{},"body":{"entities/Product.html":{}}}],["entity('users",{"_index":1790,"title":{},"body":{"entities/User.html":{}}}],["entity{.ts,.js",{"_index":732,"title":{},"body":{"modules/AppModule.html":{}}}],["enum",{"_index":166,"title":{},"body":{"controllers/AdminOrdersController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"entities/Order.html":{},"classes/OrderItemDto.html":{},"controllers/OrdersController.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"entities/Product.html":{},"classes/ProductQueryDto.html":{},"controllers/ProductsController.html":{},"entities/Roles.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"entities/User.html":{}}}],["enumerations",{"_index":2033,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/order",{"_index":1208,"title":{},"body":{"entities/Order.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"classes/UpdateOrderDto.html":{}}}],["enums/product",{"_index":1585,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["enums/roles.enum",{"_index":1677,"title":{},"body":{"entities/Roles.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["environment",{"_index":1167,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["equal",{"_index":1798,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["err",{"_index":1120,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["error",{"_index":656,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"controllers/OrdersController.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["error('jwt_secret",{"_index":1166,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["error.children",{"_index":1953,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["error.children.foreach(child",{"_index":1955,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["error.children.length",{"_index":1954,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["error.constraints",{"_index":1948,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["error.match(/^([a",{"_index":1933,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["error.message",{"_index":660,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["error.property",{"_index":1944,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["errorresponse",{"_index":1093,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["errors",{"_index":1921,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["errors.foreach(error",{"_index":1957,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["errors.map(error",{"_index":1930,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["ethnic_wear",{"_index":2054,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["event",{"_index":2226,"title":{},"body":{"license.html":{}}}],["everyday",{"_index":974,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["example",{"_index":401,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/OrderItemDto.html":{},"controllers/OrdersController.html":{},"classes/ProductQueryDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"index.html":{}}}],["exception",{"_index":1076,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["exception.filter.ts",{"_index":1068,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:13",{"_index":1071,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.filter.ts:15",{"_index":1075,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.filter.ts:18",{"_index":1961,"title":{},"body":{"classes/ValidationExceptionFilter.html":{}}}],["exception.filter.ts:20",{"_index":1962,"title":{},"body":{"classes/ValidationExceptionFilter.html":{}}}],["exception.filter.ts:63",{"_index":1964,"title":{},"body":{"classes/ValidationExceptionFilter.html":{}}}],["exception.filter.ts:77",{"_index":1963,"title":{},"body":{"classes/ValidationExceptionFilter.html":{}}}],["exception.getresponse",{"_index":1087,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["exception.getstatus",{"_index":1085,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["exception.message",{"_index":1099,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exceptionfilter",{"_index":1069,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["exceptionresponse",{"_index":1086,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["executioncontext",{"_index":1115,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["existing",{"_index":301,"title":{},"body":{"controllers/AdminProductsController.html":{},"controllers/OrdersController.html":{}}}],["existinguser",{"_index":1891,"title":{},"body":{"injectables/UsersService.html":{}}}],["exists",{"_index":931,"title":{},"body":{"classes/CreateOrdersTables1714390000000.html":{},"guards/RolesGuard.html":{}}}],["exp",{"_index":1143,"title":{},"body":{"interfaces/JwtPayload.html":{}}}],["experience",{"_index":2136,"title":{},"body":{"index.html":{}}}],["expiration",{"_index":1144,"title":{},"body":{"interfaces/JwtPayload.html":{}}}],["expiresin",{"_index":804,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":31,"title":{},"body":{"classes/AddDobToUsers1714389820000.html":{},"entities/Address.html":{},"modules/AdminModule.html":{},"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateOrderDto.html":{},"classes/CreateOrdersTables1714390000000.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"classes/OrderItemDto.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"entities/Product.html":{},"classes/ProductQueryDto.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"entities/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["exports",{"_index":108,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/OrdersModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":1079,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"dependencies.html":{},"license.html":{}}}],["extends",{"_index":1107,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/UpdateUserDto.html":{}}}],["extra",{"_index":740,"title":{},"body":{"modules/AppModule.html":{}}}],["extracterrors",{"_index":1941,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["extracterrors(child",{"_index":1956,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["extracterrors(error",{"_index":1958,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["extractjwt",{"_index":1160,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":1170,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extracts",{"_index":1149,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["fabric",{"_index":1022,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["failed",{"_index":1928,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["false",{"_index":78,"title":{},"body":{"entities/Address.html":{},"controllers/AdminOrdersController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"modules/AppModule.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"classes/OrderItemDto.html":{},"controllers/OrdersController.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"entities/Users.html":{},"controllers/UsersController.html":{}}}],["false})@column({type",{"_index":1511,"title":{},"body":{"entities/Product.html":{}}}],["false})@isboolean()@isoptional",{"_index":985,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["false})@isboolean()@isoptional()@transform",{"_index":983,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["false})@isenum(orderstatus)@isoptional",{"_index":1708,"title":{},"body":{"classes/UpdateOrderDto.html":{}}}],["false})@isenum(productcategory)@isoptional",{"_index":1716,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["false})@isnumber()@min(0)@isoptional",{"_index":997,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{}}}],["false})@isoptional()@isboolean",{"_index":402,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["false})@isoptional()@isstring",{"_index":1048,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["false})@isoptional()@isstring()@isphonenumber('bd",{"_index":1054,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["false})@isstring()@isoptional",{"_index":852,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{}}}],["false})@isurl()@isoptional",{"_index":981,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["fashion",{"_index":1030,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/ProductQueryDto.html":{},"classes/UpdateProductDto.html":{}}}],["fashion'})@isstring()@isoptional",{"_index":945,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/ProductQueryDto.html":{},"classes/UpdateProductDto.html":{}}}],["fast",{"_index":2112,"title":{},"body":{"index.html":{}}}],["featured",{"_index":320,"title":{},"body":{"controllers/AdminProductsController.html":{},"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/ProductQueryDto.html":{},"controllers/ProductsController.html":{},"classes/UpdateProductDto.html":{}}}],["featured')@apioperation({summary",{"_index":319,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["featuredcount",{"_index":1664,"title":{},"body":{"injectables/ProductsService.html":{}}}],["features",{"_index":1725,"title":{},"body":{"classes/UpdateProductDto.html":{},"index.html":{}}}],["fetch",{"_index":1896,"title":{},"body":{"injectables/UsersService.html":{}}}],["few",{"_index":2113,"title":{},"body":{"index.html":{}}}],["field",{"_index":544,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"classes/ProductQueryDto.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["fields",{"_index":667,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AddDobToUsers1714389820000.html":{},"entities/Address.html":{},"modules/AdminModule.html":{},"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateOrderDto.html":{},"classes/CreateOrdersTables1714390000000.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"classes/OrderItemDto.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"entities/Product.html":{},"classes/ProductQueryDto.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"entities/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"coverage.html":{}}}],["files",{"_index":2191,"title":{},"body":{"license.html":{}}}],["filter",{"_index":517,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"controllers/OrdersController.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"classes/ProductQueryDto.html":{},"controllers/ProductsController.html":{}}}],["filtering",{"_index":438,"title":{},"body":{"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"controllers/OrdersController.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"classes/ProductQueryDto.html":{},"controllers/ProductsController.html":{}}}],["filtering.'})@apiquery({name",{"_index":1248,"title":{},"body":{"controllers/OrdersController.html":{},"controllers/ProductsController.html":{}}}],["filters",{"_index":629,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["final",{"_index":1387,"title":{},"body":{"injectables/OrdersService.html":{}}}],["finalsortby",{"_index":643,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["finalsortorder",{"_index":645,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["finalsortorder.touppercase",{"_index":649,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["findall",{"_index":146,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findall(@query",{"_index":488,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["findall(@query('page",{"_index":1862,"title":{},"body":{"controllers/UsersController.html":{}}}],["findall(page",{"_index":152,"title":{},"body":{"controllers/AdminOrdersController.html":{},"injectables/OrdersService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findall(querydto",{"_index":436,"title":{},"body":{"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{}}}],["findall(user",{"_index":1247,"title":{},"body":{"controllers/OrdersController.html":{}}}],["findone",{"_index":432,"title":{},"body":{"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findone(@param('id",{"_index":494,"title":{},"body":{"controllers/AdminUserController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["findone(id",{"_index":447,"title":{},"body":{"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findoptionswhere",{"_index":609,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/ProductsService.html":{}}}],["first",{"_index":32,"title":{},"body":{"classes/AddDobToUsers1714389820000.html":{},"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{}}}],["firstname",{"_index":380,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"classes/CreateUserDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"entities/User.html":{},"entities/Users.html":{},"injectables/UsersService.html":{}}}],["fit",{"_index":972,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["fitness",{"_index":2222,"title":{},"body":{"license.html":{}}}],["five",{"_index":1728,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["fk_order_items_order",{"_index":915,"title":{},"body":{"classes/CreateOrdersTables1714390000000.html":{}}}],["fk_order_items_product",{"_index":917,"title":{},"body":{"classes/CreateOrdersTables1714390000000.html":{}}}],["fk_orders_user",{"_index":906,"title":{},"body":{"classes/CreateOrdersTables1714390000000.html":{}}}],["focus",{"_index":2121,"title":{},"body":{"index.html":{}}}],["follow",{"_index":2151,"title":{},"body":{"index.html":{}}}],["following",{"_index":2208,"title":{},"body":{"license.html":{}}}],["food",{"_index":1547,"title":{},"body":{"entities/Product.html":{},"miscellaneous/enumerations.html":{}}}],["forbidden",{"_index":288,"title":{},"body":{"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"controllers/OrdersController.html":{}}}],["forbidden'})@apiresponse({status",{"_index":450,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["forbiddenexception",{"_index":1281,"title":{},"body":{"controllers/OrdersController.html":{},"guards/RolesGuard.html":{}}}],["forbiddenexception('user",{"_index":1693,"title":{},"body":{"guards/RolesGuard.html":{}}}],["forbiddenexception('you",{"_index":1303,"title":{},"body":{"controllers/OrdersController.html":{}}}],["foreign",{"_index":907,"title":{},"body":{"classes/CreateOrdersTables1714390000000.html":{}}}],["forest",{"_index":1020,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["formal_wear",{"_index":2052,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["format",{"_index":459,"title":{},"body":{"controllers/AdminUserController.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"entities/Product.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["formatnestedvalidationerrors",{"_index":1959,"title":{},"body":{"classes/ValidationExceptionFilter.html":{}}}],["formatnestedvalidationerrors(errors",{"_index":1939,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["formattederrors",{"_index":1940,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["formattederrors.push",{"_index":1951,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["formatvalidationerrors",{"_index":1960,"title":{},"body":{"classes/ValidationExceptionFilter.html":{}}}],["formatvalidationerrors(errors",{"_index":1929,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["found",{"_index":211,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"injectables/JwtStrategy.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["found'})@httpcode(httpstatus.ok",{"_index":462,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["framework",{"_index":2066,"title":{},"body":{"index.html":{}}}],["free",{"_index":2185,"title":{},"body":{"license.html":{}}}],["front.jpg",{"_index":1764,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["full",{"_index":2147,"title":{},"body":{"index.html":{}}}],["function",{"_index":1994,"title":{},"body":{"coverage.html":{}}}],["functionality",{"_index":752,"title":{},"body":{"injectables/AppService.html":{}}}],["functions",{"_index":2060,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":2207,"title":{},"body":{"license.html":{}}}],["g",{"_index":2116,"title":{},"body":{"index.html":{}}}],["generates",{"_index":813,"title":{},"body":{"injectables/AuthService.html":{}}}],["generation",{"_index":817,"title":{},"body":{"injectables/AuthService.html":{}}}],["generic",{"_index":567,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{}}}],["get(':id",{"_index":492,"title":{},"body":{"controllers/AdminUserController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["get(':id')@apioperation({summary",{"_index":448,"title":{},"body":{"controllers/AdminUserController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{}}}],["get(':id')@useguards(jwtauthguard)@apioperation({summary",{"_index":1850,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('analytics",{"_index":370,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["get('analytics')@apioperation({summary",{"_index":291,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["get('analytics/customer",{"_index":257,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["get('analytics/customer')@apioperation({summary",{"_index":173,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["get('analytics/product",{"_index":259,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["get('analytics/product')@apioperation({summary",{"_index":179,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["get('analytics/revenue",{"_index":253,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["get('analytics/revenue')@apioperation({summary",{"_index":188,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["get('analytics/summary",{"_index":1308,"title":{},"body":{"controllers/OrdersController.html":{}}}],["get('analytics/summary')@apioperation({summary",{"_index":1260,"title":{},"body":{"controllers/OrdersController.html":{}}}],["get('analytics/trends",{"_index":1322,"title":{},"body":{"controllers/OrdersController.html":{}}}],["get('analytics/trends')@apioperation({summary",{"_index":1268,"title":{},"body":{"controllers/OrdersController.html":{}}}],["get('best",{"_index":1600,"title":{},"body":{"controllers/ProductsController.html":{}}}],["get('category/:category",{"_index":1629,"title":{},"body":{"controllers/ProductsController.html":{}}}],["get('category/:category')@apioperation({summary",{"_index":1606,"title":{},"body":{"controllers/ProductsController.html":{}}}],["get('featured",{"_index":1624,"title":{},"body":{"controllers/ProductsController.html":{}}}],["get('featured')@apioperation({summary",{"_index":1609,"title":{},"body":{"controllers/ProductsController.html":{}}}],["get('new",{"_index":1611,"title":{},"body":{"controllers/ProductsController.html":{}}}],["get('on",{"_index":1616,"title":{},"body":{"controllers/ProductsController.html":{}}}],["get('stats",{"_index":490,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["get('stats')@apioperation({summary",{"_index":452,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["get()@apioperation({summary",{"_index":159,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminUserController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{}}}],["get()@useguards(jwtauthguard)@apioperation({summary",{"_index":1847,"title":{},"body":{"controllers/UsersController.html":{}}}],["getallusers",{"_index":1875,"title":{},"body":{"injectables/UsersService.html":{}}}],["getallusers(userquerydto",{"_index":1884,"title":{},"body":{"injectables/UsersService.html":{}}}],["getanalytics",{"_index":272,"title":{},"body":{"controllers/AdminProductsController.html":{},"controllers/OrdersController.html":{}}}],["getanalytics(startdate",{"_index":1259,"title":{},"body":{"controllers/OrdersController.html":{}}}],["getbestsellers",{"_index":1591,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["getbycategory",{"_index":1592,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["getbycategory(@param('category",{"_index":1630,"title":{},"body":{"controllers/ProductsController.html":{}}}],["getbycategory(category",{"_index":1605,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["getcustomeranalytics",{"_index":147,"title":{},"body":{"controllers/AdminOrdersController.html":{},"injectables/OrdersService.html":{}}}],["getcustomeranalytics(startdate",{"_index":172,"title":{},"body":{"controllers/AdminOrdersController.html":{},"injectables/OrdersService.html":{}}}],["getfeatured",{"_index":1593,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["gethello",{"_index":697,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getmanyandcount",{"_index":1658,"title":{},"body":{"injectables/ProductsService.html":{}}}],["getnewarrivals",{"_index":1594,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["getonsale",{"_index":1595,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["getorderanalytics",{"_index":1339,"title":{},"body":{"injectables/OrdersService.html":{}}}],["getorderanalytics(startdate",{"_index":1350,"title":{},"body":{"injectables/OrdersService.html":{}}}],["getproductanalytics",{"_index":148,"title":{},"body":{"controllers/AdminOrdersController.html":{},"injectables/OrdersService.html":{}}}],["getproductanalytics(startdate",{"_index":178,"title":{},"body":{"controllers/AdminOrdersController.html":{},"injectables/OrdersService.html":{}}}],["getproductstats",{"_index":1638,"title":{},"body":{"injectables/ProductsService.html":{}}}],["getrawmany",{"_index":1432,"title":{},"body":{"injectables/OrdersService.html":{},"injectables/ProductsService.html":{}}}],["getrevenueanalytics",{"_index":149,"title":{},"body":{"controllers/AdminOrdersController.html":{},"injectables/OrdersService.html":{}}}],["getrevenueanalytics(startdate",{"_index":183,"title":{},"body":{"controllers/AdminOrdersController.html":{},"injectables/OrdersService.html":{}}}],["getsalestrends",{"_index":1239,"title":{},"body":{"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["getsalestrends(startdate",{"_index":1267,"title":{},"body":{"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["getstats",{"_index":433,"title":{},"body":{"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{}}}],["getting",{"_index":2062,"title":{"index.html":{},"license.html":{}},"body":{}}],["getuserbyid",{"_index":1876,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserbyid(id",{"_index":1886,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserstats",{"_index":585,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["gift",{"_index":850,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{}}}],["granted",{"_index":2184,"title":{},"body":{"license.html":{}}}],["graph",{"_index":2141,"title":{},"body":{"index.html":{}}}],["greater",{"_index":1797,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["green",{"_index":1021,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["greeting",{"_index":749,"title":{},"body":{"injectables/AppService.html":{}}}],["groupby('date",{"_index":1441,"title":{},"body":{"injectables/OrdersService.html":{}}}],["groupby('orderitem.productid",{"_index":1429,"title":{},"body":{"injectables/OrdersService.html":{}}}],["groupby('period",{"_index":1451,"title":{},"body":{"injectables/OrdersService.html":{}}}],["groupby('product.category",{"_index":1670,"title":{},"body":{"injectables/ProductsService.html":{}}}],["groupby('product.id",{"_index":1471,"title":{},"body":{"injectables/OrdersService.html":{}}}],["groupby('user.id",{"_index":1459,"title":{},"body":{"injectables/OrdersService.html":{}}}],["grow",{"_index":2160,"title":{},"body":{"index.html":{}}}],["gsm",{"_index":1025,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["guard",{"_index":1104,"title":{"guards/RolesGuard.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"overview.html":{}}}],["guards",{"_index":1678,"title":{},"body":{"guards/RolesGuard.html":{}}}],["guards/jwt",{"_index":797,"title":{},"body":{"modules/AuthModule.html":{}}}],["guards/roles.guard",{"_index":798,"title":{},"body":{"modules/AuthModule.html":{}}}],["handle",{"_index":669,"title":{},"body":{"injectables/AdminUserService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["handlerequest",{"_index":1110,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["handlerequest(err",{"_index":1118,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["handlers",{"_index":2260,"title":{},"body":{"miscellaneous/variables.html":{}}}],["handles",{"_index":610,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/AppService.html":{}}}],["handling",{"_index":429,"title":{},"body":{"controllers/AdminUserController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{}}}],["hands",{"_index":2135,"title":{},"body":{"index.html":{}}}],["handy",{"_index":2125,"title":{},"body":{"index.html":{}}}],["hashedpassword",{"_index":1894,"title":{},"body":{"injectables/UsersService.html":{}}}],["hasrole",{"_index":1697,"title":{},"body":{"guards/RolesGuard.html":{}}}],["headers",{"_index":1150,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["health",{"_index":753,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":2139,"title":{},"body":{"index.html":{}}}],["here",{"_index":2168,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":2183,"title":{},"body":{"license.html":{}}}],["high",{"_index":1720,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["history",{"_index":902,"title":{},"body":{"classes/CreateOrdersTables1714390000000.html":{},"entities/Order.html":{}}}],["holders",{"_index":2228,"title":{},"body":{"license.html":{}}}],["home",{"_index":1544,"title":{},"body":{"entities/Product.html":{},"miscellaneous/enumerations.html":{}}}],["hoodies",{"_index":2048,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["host",{"_index":721,"title":{},"body":{"modules/AppModule.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["host.switchtohttp",{"_index":1082,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["httpcode",{"_index":472,"title":{},"body":{"controllers/AdminUserController.html":{},"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok",{"_index":501,"title":{},"body":{"controllers/AdminUserController.html":{},"controllers/AuthController.html":{}}}],["httpexception",{"_index":1073,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["httpexceptionfilter",{"_index":1066,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["https://example.com/images/classic",{"_index":979,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["https://example.com/images/jeans",{"_index":1763,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["https://example.com/images/premium",{"_index":1736,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["https://example.com/profile.jpg",{"_index":1058,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["https://nestjs.com",{"_index":2174,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":471,"title":{},"body":{"controllers/AdminUserController.html":{},"controllers/AuthController.html":{},"classes/HttpExceptionFilter.html":{}}}],["httpstatus.forbidden",{"_index":487,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["httpstatus.not_found",{"_index":493,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["httpstatus.ok",{"_index":484,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["httpstatus.unauthorized",{"_index":485,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["httpstatus[status",{"_index":1101,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["id",{"_index":55,"title":{},"body":{"entities/Address.html":{},"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"classes/CreateOrderDto.html":{},"classes/CreateOrdersTables1714390000000.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"classes/OrderItemDto.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"entities/Roles.html":{},"entities/User.html":{},"entities/Users.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["id'})@apiresponse({status",{"_index":449,"title":{},"body":{"controllers/AdminUserController.html":{},"controllers/UsersController.html":{}}}],["id.tostring",{"_index":1914,"title":{},"body":{"injectables/UsersService.html":{}}}],["identifier",{"_index":1504,"title":{},"body":{"entities/Product.html":{},"coverage.html":{}}}],["idx_order_items_order",{"_index":926,"title":{},"body":{"classes/CreateOrdersTables1714390000000.html":{}}}],["idx_order_items_product",{"_index":928,"title":{},"body":{"classes/CreateOrdersTables1714390000000.html":{}}}],["idx_orders_created",{"_index":924,"title":{},"body":{"classes/CreateOrdersTables1714390000000.html":{}}}],["idx_orders_status",{"_index":922,"title":{},"body":{"classes/CreateOrdersTables1714390000000.html":{}}}],["idx_orders_user",{"_index":920,"title":{},"body":{"classes/CreateOrdersTables1714390000000.html":{}}}],["ignoreexpiration",{"_index":1171,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["ilike",{"_index":608,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["image",{"_index":978,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateProductDto.html":{},"injectables/UsersService.html":{}}}],["images",{"_index":1483,"title":{},"body":{"entities/Product.html":{},"classes/UpdateProductDto.html":{}}}],["imageurl",{"_index":938,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["implement",{"_index":1124,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["implements",{"_index":8,"title":{},"body":{"classes/AddDobToUsers1714389820000.html":{},"classes/CreateOrdersTables1714390000000.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["implied",{"_index":2218,"title":{},"body":{"license.html":{}}}],["import",{"_index":29,"title":{},"body":{"classes/AddDobToUsers1714389820000.html":{},"entities/Address.html":{},"modules/AdminModule.html":{},"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateOrderDto.html":{},"classes/CreateOrdersTables1714390000000.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"classes/OrderItemDto.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"entities/Product.html":{},"classes/ProductQueryDto.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"entities/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["imports",{"_index":124,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/OrdersModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{}}}],["in(orderids",{"_index":1411,"title":{},"body":{"injectables/OrdersService.html":{}}}],["inactive",{"_index":825,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["inactiveusers",{"_index":692,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["included",{"_index":2213,"title":{},"body":{"license.html":{}}}],["including",{"_index":762,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Product.html":{},"license.html":{}}}],["index",{"_index":10,"title":{"index.html":{}},"body":{"classes/AddDobToUsers1714389820000.html":{},"entities/Address.html":{},"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateOrderDto.html":{},"classes/CreateOrdersTables1714390000000.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"classes/OrderItemDto.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"entities/Product.html":{},"classes/ProductQueryDto.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"entities/Users.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["indexes",{"_index":919,"title":{},"body":{"classes/CreateOrdersTables1714390000000.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AddDobToUsers1714389820000.html":{},"entities/Address.html":{},"modules/AdminModule.html":{},"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateOrderDto.html":{},"classes/CreateOrdersTables1714390000000.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"classes/OrderItemDto.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"entities/Product.html":{},"classes/ProductQueryDto.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"entities/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["information",{"_index":378,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"injectables/JwtStrategy.html":{},"controllers/OrdersController.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["information'})@apiresponse({status",{"_index":1853,"title":{},"body":{"controllers/UsersController.html":{}}}],["infrastructure",{"_index":2122,"title":{},"body":{"index.html":{}}}],["initial",{"_index":1365,"title":{},"body":{"injectables/OrdersService.html":{}}}],["inject",{"_index":744,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["injectable",{"_index":578,"title":{"injectables/AdminUserService.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/OrdersService.html":{},"injectables/ProductsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AdminUserService.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/OrdersService.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":579,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/OrdersService.html":{},"injectables/ProductsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":606,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/OrdersService.html":{},"injectables/ProductsService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(address",{"_index":1364,"title":{},"body":{"injectables/OrdersService.html":{}}}],["injectrepository(order",{"_index":1361,"title":{},"body":{"injectables/OrdersService.html":{}}}],["injectrepository(orderitem",{"_index":1362,"title":{},"body":{"injectables/OrdersService.html":{}}}],["injectrepository(product",{"_index":1363,"title":{},"body":{"injectables/OrdersService.html":{},"injectables/ProductsService.html":{}}}],["injectrepository(roles",{"_index":614,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(users",{"_index":612,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/OrdersService.html":{},"injectables/UsersService.html":{}}}],["input",{"_index":1245,"title":{},"body":{"controllers/OrdersController.html":{}}}],["inside",{"_index":1714,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["install",{"_index":2115,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":2078,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":657,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/AuthService.html":{}}}],["instructions",{"_index":948,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/UpdateProductDto.html":{}}}],["int",{"_index":1224,"title":{},"body":{"entities/OrderItem.html":{},"entities/Product.html":{}}}],["integer",{"_index":913,"title":{},"body":{"classes/CreateOrdersTables1714390000000.html":{},"entities/Product.html":{}}}],["interact",{"_index":2142,"title":{},"body":{"index.html":{}}}],["interface",{"_index":555,"title":{"interfaces/JwtPayload.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"interfaces/ValidationErrorItem.html":{}},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"coverage.html":{}}}],["interfaces",{"_index":1139,"title":{},"body":{"interfaces/JwtPayload.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"interfaces/ValidationErrorItem.html":{},"overview.html":{}}}],["interfaces/jwt",{"_index":1162,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["internalservererrorexception",{"_index":814,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["internalservererrorexception('customer",{"_index":1898,"title":{},"body":{"injectables/UsersService.html":{}}}],["internalservererrorexception('error",{"_index":834,"title":{},"body":{"injectables/AuthService.html":{}}}],["internalservererrorexception('failed",{"_index":1904,"title":{},"body":{"injectables/UsersService.html":{}}}],["interval",{"_index":184,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["invalid",{"_index":772,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/OrdersController.html":{}}}],["inventory",{"_index":1480,"title":{},"body":{"entities/Product.html":{}}}],["iron",{"_index":955,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["isactive",{"_index":381,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"entities/Product.html":{},"classes/UpdateProductDto.html":{},"entities/User.html":{},"entities/Users.html":{}}}],["isarray",{"_index":860,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/OrderItemDto.html":{},"classes/UpdateProductDto.html":{}}}],["isbestseller",{"_index":365,"title":{},"body":{"controllers/AdminProductsController.html":{},"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/ProductQueryDto.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductDto.html":{}}}],["isboolean",{"_index":410,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"classes/CreateProductDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"classes/ProductQueryDto.html":{},"classes/UpdateProductDto.html":{}}}],["isboolean()@isoptional",{"_index":1562,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["isdate",{"_index":421,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["isdatestring",{"_index":551,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"classes/CreateUserDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"classes/UpdateUserDto.html":{}}}],["isdefault",{"_index":56,"title":{},"body":{"entities/Address.html":{}}}],["isemail",{"_index":411,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/UpdateUserDto.html":{}}}],["isemailverified",{"_index":382,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"entities/Users.html":{}}}],["isenum",{"_index":412,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"classes/CreateProductDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"classes/ProductQueryDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{}}}],["isenum(orderdirection",{"_index":1811,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["isenum(orderstatus",{"_index":1711,"title":{},"body":{"classes/UpdateOrderDto.html":{}}}],["isenum(productcategory",{"_index":1011,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/ProductQueryDto.html":{},"classes/UpdateProductDto.html":{}}}],["isenum(role",{"_index":426,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{}}}],["isfeatured",{"_index":359,"title":{},"body":{"controllers/AdminProductsController.html":{},"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/ProductQueryDto.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductDto.html":{}}}],["isglobal",{"_index":717,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":552,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"classes/UserQueryDto.html":{}}}],["isnan(page",{"_index":617,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["isnewarrival",{"_index":362,"title":{},"body":{"controllers/AdminProductsController.html":{},"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/ProductQueryDto.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductDto.html":{}}}],["isnotempty",{"_index":859,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/OrderItemDto.html":{}}}],["isnumber",{"_index":861,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/OrderItemDto.html":{},"classes/ProductQueryDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{}}}],["iso",{"_index":1035,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isobject",{"_index":1005,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["isonsale",{"_index":368,"title":{},"body":{"controllers/AdminProductsController.html":{},"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/ProductQueryDto.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductDto.html":{}}}],["isoptional",{"_index":413,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/OrderItemDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"classes/ProductQueryDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{}}}],["isoptional()@isenum(orderdirection",{"_index":1805,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["isoptional()@isint()@min(1",{"_index":1796,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["isoptional()@isstring",{"_index":1801,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["ispasswordvalid",{"_index":821,"title":{},"body":{"injectables/AuthService.html":{}}}],["isphonenumber",{"_index":1060,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["isphonenumber('bd",{"_index":1064,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isphoneverified",{"_index":383,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Users.html":{}}}],["ispublic",{"_index":1129,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["isstring",{"_index":414,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/OrderItemDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"classes/ProductQueryDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{}}}],["isurl",{"_index":1004,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["isuuid",{"_index":415,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{}}}],["item",{"_index":875,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{},"injectables/OrdersService.html":{}}}],["item.entity",{"_index":1207,"title":{},"body":{"entities/Order.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{}}}],["item.entity.ts",{"_index":1215,"title":{},"body":{"entities/OrderItem.html":{},"coverage.html":{}}}],["item.entity.ts:11",{"_index":1219,"title":{},"body":{"entities/OrderItem.html":{}}}],["item.entity.ts:14",{"_index":1223,"title":{},"body":{"entities/OrderItem.html":{}}}],["item.entity.ts:18",{"_index":1218,"title":{},"body":{"entities/OrderItem.html":{}}}],["item.entity.ts:22",{"_index":1222,"title":{},"body":{"entities/OrderItem.html":{}}}],["item.entity.ts:25",{"_index":1225,"title":{},"body":{"entities/OrderItem.html":{}}}],["item.entity.ts:28",{"_index":1220,"title":{},"body":{"entities/OrderItem.html":{}}}],["item.entity.ts:31",{"_index":1226,"title":{},"body":{"entities/OrderItem.html":{}}}],["item.entity.ts:8",{"_index":1216,"title":{},"body":{"entities/OrderItem.html":{}}}],["item.productid",{"_index":1378,"title":{},"body":{"injectables/OrdersService.html":{}}}],["item.quantity",{"_index":1382,"title":{},"body":{"injectables/OrdersService.html":{}}}],["items",{"_index":530,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"classes/CreateOrderDto.html":{},"entities/Order.html":{},"classes/OrderItemDto.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"classes/ProductQueryDto.html":{},"controllers/ProductsController.html":{}}}],["items.product",{"_index":1399,"title":{},"body":{"injectables/OrdersService.html":{}}}],["jackets",{"_index":2047,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["jeans",{"_index":1722,"title":{},"body":{"classes/UpdateProductDto.html":{},"miscellaneous/enumerations.html":{}}}],["jeans.jpg",{"_index":1737,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["job",{"_index":2154,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":2156,"title":{},"body":{"index.html":{}}}],["john",{"_index":1061,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["john'})@isnotempty()@isstring",{"_index":1045,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["john.doe@example.com",{"_index":1063,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["john.doe@example.com'})@isnotempty()@isemail",{"_index":1043,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["join",{"_index":2166,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":96,"title":{},"body":{"entities/Address.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{}}}],["jointable",{"_index":1838,"title":{},"body":{"entities/Users.html":{}}}],["json",{"_index":1528,"title":{},"body":{"entities/Product.html":{}}}],["json.stringify(exceptionresponse",{"_index":1092,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["jsonb",{"_index":901,"title":{},"body":{"classes/CreateOrdersTables1714390000000.html":{},"entities/Order.html":{},"entities/Product.html":{}}}],["jwt",{"_index":769,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwtauthguard",{"_index":221,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"controllers/OrdersController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"overview.html":{}}}],["jwtfromrequest",{"_index":1169,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":792,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":800,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":1138,"title":{"interfaces/JwtPayload.html":{}},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["jwtsecret",{"_index":1165,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtservice",{"_index":809,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{}}}],["jwtstrategy",{"_index":790,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":2171,"title":{},"body":{"index.html":{}}}],["key",{"_index":894,"title":{},"body":{"classes/CreateOrdersTables1714390000000.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["kids_wear",{"_index":2055,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["kind",{"_index":2217,"title":{},"body":{"license.html":{}}}],["l",{"_index":1014,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["label",{"_index":57,"title":{},"body":{"entities/Address.html":{}}}],["last",{"_index":404,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"entities/Product.html":{}}}],["lastloginafter",{"_index":512,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{}}}],["lastloginat",{"_index":577,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"entities/Users.html":{}}}],["lastloginbefore",{"_index":513,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{}}}],["lastname",{"_index":384,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"classes/CreateUserDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"entities/User.html":{},"entities/Users.html":{},"injectables/UsersService.html":{}}}],["lastorderdate",{"_index":1457,"title":{},"body":{"injectables/OrdersService.html":{}}}],["later",{"_index":621,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["learn",{"_index":2128,"title":{},"body":{"index.html":{}}}],["leftjoin('orderitem.order",{"_index":1470,"title":{},"body":{"injectables/OrdersService.html":{}}}],["leftjoin('product.orderitems",{"_index":1469,"title":{},"body":{"injectables/OrdersService.html":{}}}],["leftjoin('user.orders",{"_index":1458,"title":{},"body":{"injectables/OrdersService.html":{}}}],["legend",{"_index":104,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/OrdersModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":68,"title":{},"body":{"entities/Address.html":{},"entities/Product.html":{},"entities/Users.html":{}}}],["lessthanorequal",{"_index":1358,"title":{},"body":{"injectables/OrdersService.html":{}}}],["lessthanorequal(enddate",{"_index":1397,"title":{},"body":{"injectables/OrdersService.html":{}}}],["liability",{"_index":2232,"title":{},"body":{"license.html":{}}}],["liable",{"_index":2229,"title":{},"body":{"license.html":{}}}],["license",{"_index":2177,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["licensed",{"_index":2159,"title":{},"body":{"index.html":{}}}],["light",{"_index":1761,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["like(`%${search",{"_index":1906,"title":{},"body":{"injectables/UsersService.html":{}}}],["limit",{"_index":154,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"classes/ProductQueryDto.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/UserQueryDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["limit(10",{"_index":1431,"title":{},"body":{"injectables/OrdersService.html":{}}}],["limitation",{"_index":2195,"title":{},"body":{"license.html":{}}}],["limited",{"_index":2219,"title":{},"body":{"license.html":{}}}],["linkedin",{"_index":2153,"title":{},"body":{"index.html":{}}}],["list",{"_index":441,"title":{},"body":{"controllers/AdminUserController.html":{},"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["literal",{"_index":1193,"title":{},"body":{"entities/Order.html":{}}}],["log",{"_index":1088,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["logger",{"_index":735,"title":{},"body":{"modules/AppModule.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["logger(httpexceptionfilter.name",{"_index":1070,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["logger(validationexceptionfilter.name",{"_index":1920,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["logging",{"_index":734,"title":{},"body":{"modules/AppModule.html":{}}}],["login",{"_index":526,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{}}}],["login'})@apibody({type",{"_index":766,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(@body",{"_index":785,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(logindto",{"_index":763,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logindto",{"_index":764,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["logindto.email",{"_index":819,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindto})@apiresponse({status",{"_index":767,"title":{},"body":{"controllers/AuthController.html":{}}}],["logschemasync",{"_index":741,"title":{},"body":{"modules/AppModule.html":{}}}],["looking",{"_index":2103,"title":{},"body":{"index.html":{}}}],["loop",{"_index":2150,"title":{},"body":{"index.html":{}}}],["low",{"_index":953,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["m",{"_index":876,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/OrderItemDto.html":{},"classes/ProductQueryDto.html":{}}}],["m'})@isstring()@isoptional",{"_index":1579,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["machine",{"_index":949,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["main",{"_index":746,"title":{},"body":{"injectables/AppService.html":{}}}],["make",{"_index":1690,"title":{},"body":{"guards/RolesGuard.html":{}}}],["makes",{"_index":2110,"title":{},"body":{"index.html":{}}}],["management",{"_index":430,"title":{},"body":{"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"controllers/UsersController.html":{}}}],["manages",{"_index":816,"title":{},"body":{"injectables/AuthService.html":{}}}],["managing",{"_index":583,"title":{},"body":{"injectables/AdminUserService.html":{},"index.html":{}}}],["manytomany",{"_index":1676,"title":{},"body":{"entities/Roles.html":{},"entities/Users.html":{}}}],["manytomany(undefined",{"_index":1674,"title":{},"body":{"entities/Roles.html":{},"entities/Users.html":{}}}],["manytoone",{"_index":95,"title":{},"body":{"entities/Address.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{}}}],["manytoone(undefined",{"_index":89,"title":{},"body":{"entities/Address.html":{},"entities/Order.html":{},"entities/OrderItem.html":{}}}],["manytoone(undefined)@joincolumn({name",{"_index":1221,"title":{},"body":{"entities/OrderItem.html":{}}}],["marked",{"_index":313,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["matching",{"_index":46,"title":{},"body":{"classes/AddDobToUsers1714389820000.html":{},"entities/Address.html":{},"modules/AdminModule.html":{},"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateOrderDto.html":{},"classes/CreateOrdersTables1714390000000.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"classes/OrderItemDto.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"entities/Product.html":{},"classes/ProductQueryDto.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"entities/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["material",{"_index":939,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/ProductQueryDto.html":{},"classes/UpdateProductDto.html":{}}}],["maternity_wear",{"_index":2056,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["math.ceil(total",{"_index":654,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/OrdersService.html":{}}}],["mau",{"_index":2106,"title":{},"body":{"index.html":{}}}],["max",{"_index":554,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"classes/CreateProductDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"classes/ProductQueryDto.html":{}}}],["max(100",{"_index":575,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"classes/ProductQueryDto.html":{}}}],["max(order.createdat",{"_index":1456,"title":{},"body":{"injectables/OrdersService.html":{}}}],["maximum",{"_index":1568,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["maxlength",{"_index":1488,"title":{},"body":{"entities/Product.html":{}}}],["maxprice",{"_index":1554,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["maxqueryexecutiontime",{"_index":738,"title":{},"body":{"modules/AppModule.html":{}}}],["means",{"_index":1686,"title":{},"body":{"guards/RolesGuard.html":{}}}],["medium",{"_index":1762,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["merchantability",{"_index":2221,"title":{},"body":{"license.html":{}}}],["merge",{"_index":2198,"title":{},"body":{"license.html":{}}}],["message",{"_index":562,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"injectables/AppService.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"controllers/OrdersController.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"classes/UserQueryDto.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["messages",{"_index":1923,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["meta",{"_index":573,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"injectables/UsersService.html":{}}}],["metadata",{"_index":446,"title":{},"body":{"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["method",{"_index":855,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/HttpExceptionFilter.html":{},"entities/Order.html":{},"classes/OrderItemDto.html":{},"injectables/OrdersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["methods",{"_index":11,"title":{},"body":{"classes/AddDobToUsers1714389820000.html":{},"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateOrdersTables1714390000000.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationExceptionFilter.html":{}}}],["mid",{"_index":1769,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["migrationinterface",{"_index":9,"title":{},"body":{"classes/AddDobToUsers1714389820000.html":{},"classes/CreateOrdersTables1714390000000.html":{}}}],["min",{"_index":553,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"classes/CreateProductDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"classes/ProductQueryDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UserQueryDto.html":{}}}],["min(0",{"_index":1009,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/ProductQueryDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{}}}],["min(1",{"_index":574,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"classes/ProductQueryDto.html":{},"classes/UserQueryDto.html":{}}}],["minimum",{"_index":871,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/OrderItemDto.html":{},"classes/ProductQueryDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{}}}],["minlength",{"_index":1179,"title":{},"body":{"classes/LoginDto.html":{}}}],["minlength(6",{"_index":1182,"title":{},"body":{"classes/LoginDto.html":{}}}],["minprice",{"_index":1555,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["miscellaneous",{"_index":2032,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":2158,"title":{},"body":{"index.html":{},"license.html":{}}}],["mm",{"_index":1037,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["mode",{"_index":2082,"title":{},"body":{"index.html":{}}}],["modern",{"_index":1723,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["modify",{"_index":2197,"title":{},"body":{"license.html":{}}}],["module",{"_index":100,"title":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/OrdersModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/OrdersModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":102,"title":{"modules.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/OrdersModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["month",{"_index":187,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["more",{"_index":2102,"title":{},"body":{"index.html":{}}}],["morethanorequal",{"_index":1359,"title":{},"body":{"injectables/OrdersService.html":{}}}],["morethanorequal(startdate",{"_index":1396,"title":{},"body":{"injectables/OrdersService.html":{}}}],["multiple",{"_index":199,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["myśliwiec",{"_index":2172,"title":{},"body":{"index.html":{}}}],["name",{"_index":22,"title":{},"body":{"classes/AddDobToUsers1714389820000.html":{},"entities/Address.html":{},"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateOrdersTables1714390000000.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"entities/Product.html":{},"classes/ProductQueryDto.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"classes/UpdateProductDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationExceptionFilter.html":{}}}],["name'})@isoptional()@isstring",{"_index":393,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["navy",{"_index":878,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/OrderItemDto.html":{}}}],["neck",{"_index":1028,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["need",{"_index":2145,"title":{},"body":{"index.html":{}}}],["needed",{"_index":1031,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["needed.'})@isstring()@isoptional",{"_index":958,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["nest",{"_index":2072,"title":{},"body":{"index.html":{}}}],["nested",{"_index":1926,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["nestframework",{"_index":2176,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":2095,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":125,"title":{},"body":{"modules/AdminModule.html":{},"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":711,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1122,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":793,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"dependencies.html":{}}}],["nestjs/mau",{"_index":2117,"title":{},"body":{"index.html":{}}}],["nestjs/passport",{"_index":795,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":2011,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":236,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"controllers/AuthController.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/OrderItemDto.html":{},"controllers/OrdersController.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"entities/Product.html":{},"classes/ProductQueryDto.html":{},"controllers/ProductsController.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":127,"title":{},"body":{"modules/AdminModule.html":{},"injectables/AdminUserService.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":281,"title":{},"body":{"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"injectables/AuthService.html":{},"classes/CreateProductDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"entities/Product.html":{},"classes/ProductQueryDto.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"coverage.html":{}}}],["newarrivalscount",{"_index":1665,"title":{},"body":{"injectables/ProductsService.html":{}}}],["newuser",{"_index":1899,"title":{},"body":{"injectables/UsersService.html":{}}}],["newusers",{"_index":690,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["node.js",{"_index":2065,"title":{},"body":{"index.html":{}}}],["noninfringement",{"_index":2225,"title":{},"body":{"license.html":{}}}],["not'})@apiresponse({status",{"_index":321,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["note",{"_index":1409,"title":{},"body":{"injectables/OrdersService.html":{}}}],["notes",{"_index":839,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/CreateOrdersTables1714390000000.html":{},"entities/Order.html":{},"classes/OrderItemDto.html":{},"controllers/OrdersController.html":{},"classes/UpdateOrderDto.html":{}}}],["notfoundexception",{"_index":604,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/OrdersService.html":{},"injectables/ProductsService.html":{},"injectables/UsersService.html":{}}}],["notfoundexception('no",{"_index":1909,"title":{},"body":{"injectables/UsersService.html":{}}}],["notfoundexception('some",{"_index":1414,"title":{},"body":{"injectables/OrdersService.html":{}}}],["notfoundexception(`order",{"_index":1402,"title":{},"body":{"injectables/OrdersService.html":{}}}],["notfoundexception(`product",{"_index":1379,"title":{},"body":{"injectables/OrdersService.html":{},"injectables/ProductsService.html":{}}}],["notfoundexception(`user",{"_index":664,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/UsersService.html":{}}}],["notice",{"_index":2211,"title":{},"body":{"license.html":{}}}],["now",{"_index":904,"title":{},"body":{"classes/CreateOrdersTables1714390000000.html":{}}}],["npm",{"_index":2077,"title":{},"body":{"index.html":{}}}],["null",{"_index":43,"title":{},"body":{"classes/AddDobToUsers1714389820000.html":{},"classes/CreateOrdersTables1714390000000.html":{},"entities/Order.html":{},"injectables/OrdersService.html":{}}}],["nullable",{"_index":35,"title":{},"body":{"classes/AddDobToUsers1714389820000.html":{},"entities/Address.html":{},"entities/Order.html":{},"entities/Product.html":{},"entities/User.html":{},"entities/Users.html":{}}}],["number",{"_index":153,"title":{},"body":{"controllers/AdminOrdersController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/JwtPayload.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"classes/OrderItemDto.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"entities/Product.html":{},"classes/ProductQueryDto.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"entities/Roles.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UserQueryDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["number'})@isoptional()@isstring",{"_index":406,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["number})@apiquery({name",{"_index":165,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminUserController.html":{},"controllers/UsersController.html":{}}}],["number})@apiresponse({status",{"_index":440,"title":{},"body":{"controllers/AdminUserController.html":{},"controllers/UsersController.html":{}}}],["object",{"_index":376,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"controllers/AuthController.html":{},"classes/LoginDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"entities/Product.html":{},"classes/ProductQueryDto.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["object.assign(product",{"_index":1659,"title":{},"body":{"injectables/ProductsService.html":{}}}],["object.assign(user",{"_index":668,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["object.keys(constraints).foreach(key",{"_index":1950,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["object.keys(constraints).length",{"_index":1949,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["object.values(role",{"_index":505,"title":{},"body":{"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{}}}],["obtaining",{"_index":2188,"title":{},"body":{"license.html":{}}}],["offer",{"_index":2155,"title":{},"body":{"index.html":{}}}],["official",{"_index":2107,"title":{},"body":{"index.html":{}}}],["onetomany",{"_index":1205,"title":{},"body":{"entities/Order.html":{},"entities/Product.html":{},"entities/Users.html":{}}}],["onetomany(undefined",{"_index":1189,"title":{},"body":{"entities/Order.html":{},"entities/Users.html":{}}}],["only)'})@apibody({type",{"_index":283,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["only)'})@apiresponse({status",{"_index":200,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{}}}],["onsalecount",{"_index":1667,"title":{},"body":{"injectables/ProductsService.html":{}}}],["open",{"_index":1687,"title":{},"body":{"guards/RolesGuard.html":{},"index.html":{}}}],["operations",{"_index":431,"title":{},"body":{"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["optional",{"_index":24,"title":{},"body":{"classes/AddDobToUsers1714389820000.html":{},"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateOrderDto.html":{},"classes/CreateOrdersTables1714390000000.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/OrderItemDto.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"classes/ProductQueryDto.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UserQueryDto.html":{},"entities/Users.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["order",{"_index":175,"title":{"entities/Order.html":{}},"body":{"controllers/AdminOrdersController.html":{},"classes/AdminUserQueryDto.html":{},"classes/CreateOrderDto.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"classes/OrderItemDto.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"classes/ProductQueryDto.html":{},"injectables/ProductsService.html":{},"classes/UpdateOrderDto.html":{},"entities/Users.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["order.createdat",{"_index":1437,"title":{},"body":{"injectables/OrdersService.html":{}}}],["order.dto",{"_index":1283,"title":{},"body":{"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["order.dto.ts",{"_index":838,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{},"classes/UpdateOrderDto.html":{},"coverage.html":{}}}],["order.dto.ts:11",{"_index":1233,"title":{},"body":{"classes/OrderItemDto.html":{}}}],["order.dto.ts:14",{"_index":1709,"title":{},"body":{"classes/UpdateOrderDto.html":{}}}],["order.dto.ts:19",{"_index":1235,"title":{},"body":{"classes/OrderItemDto.html":{}}}],["order.dto.ts:23",{"_index":1706,"title":{},"body":{"classes/UpdateOrderDto.html":{}}}],["order.dto.ts:28",{"_index":1236,"title":{},"body":{"classes/OrderItemDto.html":{}}}],["order.dto.ts:34",{"_index":1707,"title":{},"body":{"classes/UpdateOrderDto.html":{}}}],["order.dto.ts:37",{"_index":1231,"title":{},"body":{"classes/OrderItemDto.html":{}}}],["order.dto.ts:62",{"_index":844,"title":{},"body":{"classes/CreateOrderDto.html":{}}}],["order.dto.ts:71",{"_index":858,"title":{},"body":{"classes/CreateOrderDto.html":{}}}],["order.dto.ts:80",{"_index":853,"title":{},"body":{"classes/CreateOrderDto.html":{}}}],["order.entity",{"_index":1227,"title":{},"body":{"entities/OrderItem.html":{}}}],["order.id",{"_index":1468,"title":{},"body":{"injectables/OrdersService.html":{}}}],["order.items",{"_index":1230,"title":{},"body":{"entities/OrderItem.html":{}}}],["order.items)@joincolumn({name",{"_index":1217,"title":{},"body":{"entities/OrderItem.html":{}}}],["order.notes",{"_index":1367,"title":{},"body":{"injectables/OrdersService.html":{}}}],["order.notes}\\n[admin",{"_index":1408,"title":{},"body":{"injectables/OrdersService.html":{}}}],["order.paymentdetails",{"_index":1369,"title":{},"body":{"injectables/OrdersService.html":{}}}],["order.refundamount",{"_index":1406,"title":{},"body":{"injectables/OrdersService.html":{}}}],["order.status",{"_index":1366,"title":{},"body":{"injectables/OrdersService.html":{}}}],["order.totalamount",{"_index":1371,"title":{},"body":{"injectables/OrdersService.html":{}}}],["order.user",{"_index":1828,"title":{},"body":{"entities/Users.html":{}}}],["order.userid",{"_index":1302,"title":{},"body":{"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["order_by",{"_index":1794,"title":{},"body":{"classes/UserQueryDto.html":{},"injectables/UsersService.html":{}}}],["order_direction",{"_index":1795,"title":{},"body":{"classes/UserQueryDto.html":{},"injectables/UsersService.html":{}}}],["order_direction.touppercase",{"_index":1908,"title":{},"body":{"injectables/UsersService.html":{}}}],["order_items",{"_index":911,"title":{},"body":{"classes/CreateOrdersTables1714390000000.html":{}}}],["order_items\"(\"orderid",{"_index":927,"title":{},"body":{"classes/CreateOrdersTables1714390000000.html":{}}}],["order_items\"(\"productid",{"_index":929,"title":{},"body":{"classes/CreateOrdersTables1714390000000.html":{}}}],["orderby('date",{"_index":1442,"title":{},"body":{"injectables/OrdersService.html":{}}}],["orderby('period",{"_index":1452,"title":{},"body":{"injectables/OrdersService.html":{}}}],["orderby('totalquantity",{"_index":1430,"title":{},"body":{"injectables/OrdersService.html":{}}}],["orderby('totalrevenue",{"_index":1472,"title":{},"body":{"injectables/OrdersService.html":{}}}],["orderby('totalspent",{"_index":1460,"title":{},"body":{"injectables/OrdersService.html":{}}}],["ordercount",{"_index":1325,"title":{},"body":{"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["orderdirection",{"_index":1803,"title":{},"body":{"classes/UserQueryDto.html":{},"miscellaneous/enumerations.html":{}}}],["orderdirection.desc",{"_index":1804,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["orderid",{"_index":912,"title":{},"body":{"classes/CreateOrdersTables1714390000000.html":{},"entities/OrderItem.html":{},"injectables/OrdersService.html":{}}}],["orderids",{"_index":206,"title":{},"body":{"controllers/AdminOrdersController.html":{},"injectables/OrdersService.html":{}}}],["orderids.length",{"_index":1413,"title":{},"body":{"injectables/OrdersService.html":{}}}],["orderitem",{"_index":1188,"title":{"entities/OrderItem.html":{}},"body":{"entities/Order.html":{},"entities/OrderItem.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"coverage.html":{}}}],["orderitem.order",{"_index":1190,"title":{},"body":{"entities/Order.html":{}}}],["orderitem.total",{"_index":1384,"title":{},"body":{"injectables/OrdersService.html":{}}}],["orderitemdto",{"_index":841,"title":{"classes/OrderItemDto.html":{}},"body":{"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{},"coverage.html":{}}}],["orderitemrepository",{"_index":1341,"title":{},"body":{"injectables/OrdersService.html":{}}}],["orderitems",{"_index":1375,"title":{},"body":{"injectables/OrdersService.html":{}}}],["orderitems.push(orderitem",{"_index":1385,"title":{},"body":{"injectables/OrdersService.html":{}}}],["orderrepository",{"_index":1345,"title":{},"body":{"injectables/OrdersService.html":{}}}],["orders",{"_index":160,"title":{},"body":{"controllers/AdminOrdersController.html":{},"classes/CreateOrdersTables1714390000000.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"entities/Users.html":{}}}],["orders\"(\"createdat",{"_index":925,"title":{},"body":{"classes/CreateOrdersTables1714390000000.html":{}}}],["orders\"(\"id",{"_index":916,"title":{},"body":{"classes/CreateOrdersTables1714390000000.html":{}}}],["orders\"(\"status",{"_index":923,"title":{},"body":{"classes/CreateOrdersTables1714390000000.html":{}}}],["orders\"(\"userid",{"_index":921,"title":{},"body":{"classes/CreateOrdersTables1714390000000.html":{}}}],["orders.'})@apibody({type",{"_index":1278,"title":{},"body":{"controllers/OrdersController.html":{}}}],["orders.'})@apiquery({name",{"_index":1261,"title":{},"body":{"controllers/OrdersController.html":{}}}],["orders.'})@apiresponse({status",{"_index":1256,"title":{},"body":{"controllers/OrdersController.html":{}}}],["orders.controller",{"_index":139,"title":{},"body":{"modules/AdminModule.html":{},"modules/OrdersModule.html":{}}}],["orders.controller.ts",{"_index":143,"title":{},"body":{"controllers/AdminOrdersController.html":{},"coverage.html":{}}}],["orders.controller.ts:26",{"_index":170,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["orders.controller.ts:42",{"_index":192,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["orders.controller.ts:54",{"_index":177,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["orders.controller.ts:65",{"_index":182,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["orders.controller.ts:76",{"_index":212,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["orders.controller.ts:87",{"_index":205,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["orders.length",{"_index":1412,"title":{},"body":{"injectables/OrdersService.html":{}}}],["orders.map(order",{"_index":1416,"title":{},"body":{"injectables/OrdersService.html":{}}}],["orders.reduce((acc",{"_index":1420,"title":{},"body":{"injectables/OrdersService.html":{}}}],["orders.reduce((sum",{"_index":1418,"title":{},"body":{"injectables/OrdersService.html":{}}}],["orders.service",{"_index":1282,"title":{},"body":{"controllers/OrdersController.html":{},"modules/OrdersModule.html":{}}}],["orders/entities/order.entity",{"_index":1840,"title":{},"body":{"entities/Users.html":{}}}],["orders/enums/order",{"_index":229,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["orders/orders.module",{"_index":136,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{}}}],["orders/orders.service",{"_index":220,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["ordersbystatus",{"_index":1314,"title":{},"body":{"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["orderscontroller",{"_index":1237,"title":{"controllers/OrdersController.html":{}},"body":{"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"coverage.html":{}}}],["ordersmodule",{"_index":113,"title":{"modules/OrdersModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/OrdersModule.html":{},"modules.html":{},"overview.html":{}}}],["ordersservice",{"_index":219,"title":{"injectables/OrdersService.html":{}},"body":{"controllers/AdminOrdersController.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"coverage.html":{},"overview.html":{}}}],["orderstatus",{"_index":156,"title":{},"body":{"controllers/AdminOrdersController.html":{},"entities/Order.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"classes/UpdateOrderDto.html":{},"miscellaneous/enumerations.html":{}}}],["orderstatus.cancelled",{"_index":1450,"title":{},"body":{"injectables/OrdersService.html":{}}}],["orderstatus.pending",{"_index":1211,"title":{},"body":{"entities/Order.html":{},"injectables/OrdersService.html":{}}}],["orderstatus.processing",{"_index":1710,"title":{},"body":{"classes/UpdateOrderDto.html":{}}}],["orderstatus.refunded",{"_index":1407,"title":{},"body":{"injectables/OrdersService.html":{}}}],["orderstatus})@apiquery({name",{"_index":167,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["otherwise",{"_index":2236,"title":{},"body":{"license.html":{}}}],["out",{"_index":118,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/OrdersModule.html":{},"modules/ProductsModule.html":{},"classes/UpdateProductDto.html":{},"modules/UsersModule.html":{},"index.html":{},"license.html":{},"overview.html":{}}}],["over",{"_index":1271,"title":{},"body":{"controllers/OrdersController.html":{}}}],["overview",{"_index":2243,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":2006,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":163,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"classes/ProductQueryDto.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/UserQueryDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["pages",{"_index":560,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{}}}],["paginated",{"_index":564,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"controllers/OrdersController.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"controllers/ProductsController.html":{}}}],["paginatedresponse",{"_index":566,"title":{"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{}},"body":{"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"coverage.html":{}}}],["pagination",{"_index":444,"title":{},"body":{"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"controllers/OrdersController.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"classes/ProductQueryDto.html":{},"controllers/ProductsController.html":{}}}],["pagination'})@apiquery({name",{"_index":439,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["paginationmeta",{"_index":556,"title":{"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{}},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"coverage.html":{}}}],["pants",{"_index":1540,"title":{},"body":{"entities/Product.html":{},"miscellaneous/enumerations.html":{}}}],["param",{"_index":216,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["param('id",{"_index":262,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminUserController.html":{}}}],["parameters",{"_index":20,"title":{},"body":{"classes/AddDobToUsers1714389820000.html":{},"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateOrdersTables1714390000000.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"classes/ProductQueryDto.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationExceptionFilter.html":{}}}],["parentfield",{"_index":1942,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["parentfield}.${error.property",{"_index":1943,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["parse",{"_index":1931,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["parseuuidpipe",{"_index":473,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["part",{"_index":2146,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":1776,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["partialtype(createuserdto",{"_index":1775,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["particular",{"_index":2223,"title":{},"body":{"license.html":{}}}],["passport",{"_index":1161,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passport's",{"_index":1123,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["passportmodule",{"_index":794,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":1159,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1152,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":727,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"entities/User.html":{},"entities/Users.html":{},"injectables/UsersService.html":{}}}],["password123",{"_index":1065,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{}}}],["password123'})@isnotempty()@isstring",{"_index":1050,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["password123'})@isstring()@isnotempty()@minlength(6",{"_index":1177,"title":{},"body":{"classes/LoginDto.html":{}}}],["patch",{"_index":215,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"controllers/OrdersController.html":{},"controllers/UsersController.html":{}}}],["patch(':id",{"_index":350,"title":{},"body":{"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"controllers/OrdersController.html":{},"controllers/UsersController.html":{}}}],["patch(':id')@apioperation({summary",{"_index":335,"title":{},"body":{"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"controllers/OrdersController.html":{}}}],["patch(':id')@useguards(jwtauthguard)@apioperation({summary",{"_index":1852,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch(':id/role",{"_index":504,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["patch(':id/role')@apioperation({summary",{"_index":468,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["patch(':id/status",{"_index":261,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminUserController.html":{}}}],["patch(':id/status')@apioperation({summary",{"_index":208,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminUserController.html":{}}}],["patch(':id/toggle",{"_index":306,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["patch('bulk",{"_index":196,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["path",{"_index":1096,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["payload",{"_index":829,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["payload.interface",{"_index":1163,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.interface.ts",{"_index":1141,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["payment",{"_index":854,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["paymentdetails",{"_index":900,"title":{},"body":{"classes/CreateOrdersTables1714390000000.html":{},"entities/Order.html":{}}}],["paymentmethod",{"_index":840,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{}}}],["paypal",{"_index":885,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{}}}],["pending",{"_index":895,"title":{},"body":{"classes/CreateOrdersTables1714390000000.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"miscellaneous/enumerations.html":{}}}],["per",{"_index":531,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"controllers/OrdersController.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"classes/ProductQueryDto.html":{},"controllers/ProductsController.html":{}}}],["perfect",{"_index":973,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["performance",{"_index":181,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["period",{"_index":1309,"title":{},"body":{"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["period'})@apiquery({name",{"_index":1263,"title":{},"body":{"controllers/OrdersController.html":{}}}],["period'})@apiresponse({status",{"_index":1265,"title":{},"body":{"controllers/OrdersController.html":{}}}],["period.'})@apiquery({name",{"_index":1272,"title":{},"body":{"controllers/OrdersController.html":{}}}],["permission",{"_index":1300,"title":{},"body":{"controllers/OrdersController.html":{},"license.html":{}}}],["permissions",{"_index":1702,"title":{},"body":{"guards/RolesGuard.html":{}}}],["permit",{"_index":2205,"title":{},"body":{"license.html":{}}}],["person",{"_index":2187,"title":{},"body":{"license.html":{}}}],["persons",{"_index":2206,"title":{},"body":{"license.html":{}}}],["perspective",{"_index":584,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["pg",{"_index":2022,"title":{},"body":{"dependencies.html":{}}}],["phone",{"_index":385,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"entities/Users.html":{},"injectables/UsersService.html":{}}}],["platform",{"_index":2105,"title":{},"body":{"index.html":{}}}],["please",{"_index":846,"title":{},"body":{"classes/CreateOrderDto.html":{},"injectables/JwtAuthGuard.html":{},"classes/OrderItemDto.html":{},"index.html":{}}}],["plus_size",{"_index":2057,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["pm",{"_index":849,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{}}}],["pocket",{"_index":1729,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["pockets",{"_index":1773,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["popular",{"_index":1423,"title":{},"body":{"injectables/OrdersService.html":{}}}],["popularproducts",{"_index":1433,"title":{},"body":{"injectables/OrdersService.html":{}}}],["port",{"_index":723,"title":{},"body":{"modules/AppModule.html":{}}}],["portions",{"_index":2215,"title":{},"body":{"license.html":{}}}],["possible",{"_index":2100,"title":{},"body":{"index.html":{}}}],["post",{"_index":213,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AuthController.html":{},"controllers/OrdersController.html":{},"controllers/UsersController.html":{}}}],["post('login",{"_index":783,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":765,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@apioperation({summary",{"_index":280,"title":{},"body":{"controllers/AdminProductsController.html":{},"controllers/OrdersController.html":{},"controllers/UsersController.html":{}}}],["postalcode",{"_index":58,"title":{},"body":{"entities/Address.html":{}}}],["postgres",{"_index":720,"title":{},"body":{"modules/AppModule.html":{}}}],["precision",{"_index":1196,"title":{},"body":{"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{}}}],["prefix",{"_index":144,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"controllers/AuthController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["premium",{"_index":966,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["price",{"_index":914,"title":{},"body":{"classes/CreateOrdersTables1714390000000.html":{},"classes/CreateProductDto.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"entities/Product.html":{},"classes/ProductQueryDto.html":{},"classes/UpdateProductDto.html":{}}}],["price'})@isstring()@isoptional",{"_index":1581,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["pricing",{"_index":1479,"title":{},"body":{"entities/Product.html":{}}}],["primary",{"_index":893,"title":{},"body":{"classes/CreateOrdersTables1714390000000.html":{}}}],["primarygeneratedcolumn",{"_index":94,"title":{},"body":{"entities/Address.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"entities/Roles.html":{},"entities/User.html":{},"entities/Users.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":74,"title":{},"body":{"entities/Address.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"entities/User.html":{},"entities/Users.html":{}}}],["private",{"_index":613,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/OrdersService.html":{},"injectables/ProductsService.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["processed",{"_index":1305,"title":{},"body":{"controllers/OrdersController.html":{},"classes/UpdateOrderDto.html":{}}}],["processing",{"_index":659,"title":{},"body":{"injectables/AdminUserService.html":{},"controllers/OrdersController.html":{},"miscellaneous/enumerations.html":{}}}],["product",{"_index":180,"title":{"entities/Product.html":{}},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"entities/OrderItem.html":{},"classes/OrderItemDto.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"entities/Product.html":{},"classes/ProductQueryDto.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["product'})@column({type",{"_index":1498,"title":{},"body":{"entities/Product.html":{}}}],["product'})@primarygeneratedcolumn('uuid",{"_index":1505,"title":{},"body":{"entities/Product.html":{}}}],["product.'})@apiresponse({status",{"_index":1598,"title":{},"body":{"controllers/ProductsController.html":{}}}],["product.dto",{"_index":342,"title":{},"body":{"controllers/AdminProductsController.html":{},"injectables/ProductsService.html":{}}}],["product.dto.ts",{"_index":933,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["product.dto.ts:100",{"_index":1733,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.dto.ts:104",{"_index":946,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:109",{"_index":1755,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.dto.ts:112",{"_index":990,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:118",{"_index":1750,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.dto.ts:120",{"_index":959,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:127",{"_index":1719,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.dto.ts:129",{"_index":986,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:13",{"_index":992,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["product.dto.ts:138",{"_index":987,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:140",{"_index":1735,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.dto.ts:147",{"_index":984,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:154",{"_index":1751,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.dto.ts:156",{"_index":988,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:162",{"_index":1713,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.dto.ts:170",{"_index":1745,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.dto.ts:178",{"_index":1715,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.dto.ts:186",{"_index":1742,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.dto.ts:194",{"_index":1741,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.dto.ts:202",{"_index":1740,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.dto.ts:21",{"_index":976,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:22",{"_index":1731,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.dto.ts:30",{"_index":995,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:33",{"_index":1747,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.dto.ts:40",{"_index":998,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:43",{"_index":1749,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.dto.ts:49",{"_index":1003,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:54",{"_index":1753,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.dto.ts:57",{"_index":962,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:64",{"_index":1717,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.dto.ts:65",{"_index":999,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:73",{"_index":965,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["product.dto.ts:82",{"_index":982,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["product.dto.ts:91",{"_index":1738,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.dto.ts:96",{"_index":1002,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.id",{"_index":1464,"title":{},"body":{"injectables/OrdersService.html":{}}}],["product.isbestseller",{"_index":366,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["product.isfeatured",{"_index":360,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["product.isnewarrival",{"_index":363,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["product.isonsale",{"_index":369,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["product.name",{"_index":1465,"title":{},"body":{"injectables/OrdersService.html":{}}}],["product.price",{"_index":1383,"title":{},"body":{"injectables/OrdersService.html":{}}}],["productcategory",{"_index":960,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/ProductQueryDto.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductDto.html":{},"miscellaneous/enumerations.html":{}}}],["productcategory.pants",{"_index":1756,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["productcategory.t_shirts",{"_index":1010,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["productcategory})@column({type",{"_index":1492,"title":{},"body":{"entities/Product.html":{}}}],["productcategory})@isenum(productcategory)@isoptional",{"_index":1557,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["productid",{"_index":868,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/CreateOrdersTables1714390000000.html":{},"entities/OrderItem.html":{},"classes/OrderItemDto.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["production",{"_index":2084,"title":{},"body":{"index.html":{}}}],["productquerydto",{"_index":1552,"title":{"classes/ProductQueryDto.html":{}},"body":{"classes/ProductQueryDto.html":{},"coverage.html":{}}}],["productrepository",{"_index":1342,"title":{},"body":{"injectables/OrdersService.html":{},"injectables/ProductsService.html":{}}}],["products",{"_index":346,"title":{},"body":{"controllers/AdminProductsController.html":{},"injectables/OrdersService.html":{},"classes/ProductQueryDto.html":{},"controllers/ProductsController.html":{}}}],["products\"(\"id",{"_index":918,"title":{},"body":{"classes/CreateOrdersTables1714390000000.html":{}}}],["products'})@apiresponse({status",{"_index":294,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["products.'})@apiresponse({status",{"_index":1603,"title":{},"body":{"controllers/ProductsController.html":{}}}],["products.controller",{"_index":138,"title":{},"body":{"modules/AdminModule.html":{},"modules/ProductsModule.html":{}}}],["products.controller.ts",{"_index":269,"title":{},"body":{"controllers/AdminProductsController.html":{},"coverage.html":{}}}],["products.controller.ts:24",{"_index":290,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["products.controller.ts:34",{"_index":338,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["products.controller.ts:43",{"_index":304,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["products.controller.ts:52",{"_index":322,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["products.controller.ts:62",{"_index":327,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["products.controller.ts:72",{"_index":316,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["products.controller.ts:82",{"_index":332,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["products.controller.ts:91",{"_index":296,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["products.service",{"_index":340,"title":{},"body":{"controllers/AdminProductsController.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{}}}],["products/admin",{"_index":137,"title":{},"body":{"modules/AdminModule.html":{}}}],["products/entities/product.entity",{"_index":1228,"title":{},"body":{"entities/OrderItem.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{}}}],["products/products.module",{"_index":135,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/OrdersModule.html":{}}}],["products/products.service",{"_index":1360,"title":{},"body":{"injectables/OrdersService.html":{}}}],["productscontroller",{"_index":1589,"title":{"controllers/ProductsController.html":{}},"body":{"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"coverage.html":{}}}],["productsmodule",{"_index":114,"title":{"modules/ProductsModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/OrdersModule.html":{},"modules/ProductsModule.html":{},"modules.html":{},"overview.html":{}}}],["productsservice",{"_index":339,"title":{"injectables/ProductsService.html":{}},"body":{"controllers/AdminProductsController.html":{},"injectables/OrdersService.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"coverage.html":{},"overview.html":{}}}],["profile",{"_index":1057,"title":{},"body":{"classes/CreateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["profile.jpg",{"_index":1832,"title":{},"body":{"entities/Users.html":{},"injectables/UsersService.html":{}}}],["profileimage",{"_index":1034,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/Users.html":{},"injectables/UsersService.html":{}}}],["progressive",{"_index":2064,"title":{},"body":{"index.html":{}}}],["project",{"_index":2075,"title":{},"body":{"index.html":{}}}],["promise",{"_index":26,"title":{},"body":{"classes/AddDobToUsers1714389820000.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateOrdersTables1714390000000.html":{},"injectables/ProductsService.html":{},"injectables/UsersService.html":{}}}],["properties",{"_index":51,"title":{"properties.html":{}},"body":{"entities/Address.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"controllers/AuthController.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDto.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"classes/OrderItemDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"entities/Product.html":{},"classes/ProductQueryDto.html":{},"entities/Roles.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"entities/Users.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"properties.html":{}}}],["property",{"_index":1947,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["protects",{"_index":1105,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["provided",{"_index":670,"title":{},"body":{"injectables/AdminUserService.html":{},"license.html":{}}}],["providers",{"_index":107,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/OrdersModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["public",{"_index":12,"title":{},"body":{"classes/AddDobToUsers1714389820000.html":{},"classes/CreateOrdersTables1714390000000.html":{},"injectables/JwtAuthGuard.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["publish",{"_index":2199,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":2224,"title":{},"body":{"license.html":{}}}],["put",{"_index":1855,"title":{},"body":{"controllers/UsersController.html":{}}}],["quality",{"_index":967,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["quantity",{"_index":869,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/CreateOrdersTables1714390000000.html":{},"classes/CreateProductDto.html":{},"entities/OrderItem.html":{},"classes/OrderItemDto.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"entities/Product.html":{},"classes/UpdateProductDto.html":{}}}],["queries",{"_index":509,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{}}}],["query",{"_index":217,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"classes/ProductQueryDto.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/UsersController.html":{}}}],["query('category",{"_index":1622,"title":{},"body":{"controllers/ProductsController.html":{}}}],["query('enddate",{"_index":250,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/OrdersController.html":{}}}],["query('interval",{"_index":255,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/OrdersController.html":{}}}],["query('limit",{"_index":246,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["query('page",{"_index":245,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{}}}],["query('startdate",{"_index":249,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/OrdersController.html":{}}}],["query('status",{"_index":247,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/OrdersController.html":{}}}],["query('userid",{"_index":248,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["query.dto",{"_index":476,"title":{},"body":{"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["query.dto.ts",{"_index":508,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"classes/ProductQueryDto.html":{},"classes/UserQueryDto.html":{},"coverage.html":{}}}],["query.dto.ts:101",{"_index":542,"title":{},"body":{"classes/AdminUserQueryDto.html":{}}}],["query.dto.ts:108",{"_index":1580,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["query.dto.ts:110",{"_index":539,"title":{},"body":{"classes/AdminUserQueryDto.html":{}}}],["query.dto.ts:12",{"_index":1807,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["query.dto.ts:120",{"_index":524,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"classes/ProductQueryDto.html":{}}}],["query.dto.ts:126",{"_index":525,"title":{},"body":{"classes/AdminUserQueryDto.html":{}}}],["query.dto.ts:131",{"_index":520,"title":{},"body":{"classes/AdminUserQueryDto.html":{}}}],["query.dto.ts:132",{"_index":1556,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["query.dto.ts:136",{"_index":522,"title":{},"body":{"classes/AdminUserQueryDto.html":{}}}],["query.dto.ts:141",{"_index":527,"title":{},"body":{"classes/AdminUserQueryDto.html":{}}}],["query.dto.ts:144",{"_index":1571,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["query.dto.ts:146",{"_index":528,"title":{},"body":{"classes/AdminUserQueryDto.html":{}}}],["query.dto.ts:154",{"_index":546,"title":{},"body":{"classes/AdminUserQueryDto.html":{}}}],["query.dto.ts:161",{"_index":1564,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["query.dto.ts:163",{"_index":550,"title":{},"body":{"classes/AdminUserQueryDto.html":{}}}],["query.dto.ts:17",{"_index":1799,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["query.dto.ts:178",{"_index":1566,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["query.dto.ts:195",{"_index":1563,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["query.dto.ts:21",{"_index":1802,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["query.dto.ts:212",{"_index":1567,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["query.dto.ts:225",{"_index":1582,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["query.dto.ts:239",{"_index":1584,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["query.dto.ts:25",{"_index":1806,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["query.dto.ts:26",{"_index":1577,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["query.dto.ts:44",{"_index":1570,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["query.dto.ts:56",{"_index":1578,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["query.dto.ts:68",{"_index":1558,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["query.dto.ts:7",{"_index":1808,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["query.dto.ts:79",{"_index":536,"title":{},"body":{"classes/AdminUserQueryDto.html":{}}}],["query.dto.ts:82",{"_index":1575,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["query.dto.ts:92",{"_index":533,"title":{},"body":{"classes/AdminUserQueryDto.html":{}}}],["query.dto.ts:96",{"_index":1573,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["query.getrawmany",{"_index":1443,"title":{},"body":{"injectables/OrdersService.html":{}}}],["query.where('order.createdat",{"_index":1461,"title":{},"body":{"injectables/OrdersService.html":{}}}],["query.where('product.category",{"_index":1655,"title":{},"body":{"injectables/ProductsService.html":{}}}],["querybuilder",{"_index":626,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["querybuilder.andwhere",{"_index":630,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["querybuilder.andwhere('user.createdat",{"_index":637,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["querybuilder.andwhere('user.isactive",{"_index":635,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["querybuilder.andwhere('user.isemailverified",{"_index":636,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["querybuilder.andwhere('user.lastloginat",{"_index":639,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["querybuilder.andwhere('user.role",{"_index":634,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["querybuilder.getmanyandcount",{"_index":651,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["querybuilder.orderby(`user.${finalsortby",{"_index":648,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["querybuilder.skip(skip).take(limit",{"_index":650,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["querydto",{"_index":445,"title":{},"body":{"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{}}}],["queryrunner",{"_index":17,"title":{},"body":{"classes/AddDobToUsers1714389820000.html":{},"classes/CreateOrdersTables1714390000000.html":{}}}],["queryrunner.query",{"_index":37,"title":{},"body":{"classes/AddDobToUsers1714389820000.html":{},"classes/CreateOrdersTables1714390000000.html":{}}}],["queryrunner.query(`drop",{"_index":930,"title":{},"body":{"classes/CreateOrdersTables1714390000000.html":{}}}],["questions",{"_index":2129,"title":{},"body":{"index.html":{}}}],["rahman",{"_index":2182,"title":{},"body":{"license.html":{}}}],["rating",{"_index":1484,"title":{},"body":{"entities/Product.html":{}}}],["read",{"_index":2167,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":242,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["ready",{"_index":2093,"title":{},"body":{"index.html":{}}}],["real",{"_index":2143,"title":{},"body":{"index.html":{}}}],["recently",{"_index":1613,"title":{},"body":{"controllers/ProductsController.html":{}}}],["record",{"_index":1000,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/UpdateProductDto.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["references",{"_index":908,"title":{},"body":{"classes/CreateOrdersTables1714390000000.html":{}}}],["reflect",{"_index":2024,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":1112,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["refreshtoken",{"_index":1814,"title":{},"body":{"entities/Users.html":{}}}],["refundamount",{"_index":898,"title":{},"body":{"classes/CreateOrdersTables1714390000000.html":{},"entities/Order.html":{},"classes/UpdateOrderDto.html":{}}}],["refunded",{"_index":1320,"title":{},"body":{"controllers/OrdersController.html":{},"classes/UpdateOrderDto.html":{},"miscellaneous/enumerations.html":{}}}],["related",{"_index":1549,"title":{},"body":{"entities/Product.html":{}}}],["relations",{"_index":663,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/OrdersService.html":{},"injectables/UsersService.html":{}}}],["remove",{"_index":273,"title":{},"body":{"controllers/AdminProductsController.html":{},"injectables/ProductsService.html":{}}}],["remove(@param('id",{"_index":354,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["remove(id",{"_index":297,"title":{},"body":{"controllers/AdminProductsController.html":{},"injectables/ProductsService.html":{}}}],["repository",{"_index":590,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/OrdersService.html":{},"injectables/ProductsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["representing",{"_index":1142,"title":{},"body":{"interfaces/JwtPayload.html":{},"entities/Product.html":{}}}],["request",{"_index":1078,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/OrdersController.html":{},"controllers/UsersController.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["request.method",{"_index":1090,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["request.url",{"_index":1091,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["request.user",{"_index":2256,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requests",{"_index":1180,"title":{},"body":{"classes/LoginDto.html":{}}}],["required",{"_index":164,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/OrderItemDto.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{},"guards/RolesGuard.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["required'})@apiresponse({status",{"_index":303,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["requiredroles",{"_index":1684,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredroles.join",{"_index":1703,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredroles.length",{"_index":1688,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredroles.some(role",{"_index":1698,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiring",{"_index":1106,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"index.html":{}}}],["reset",{"_index":117,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/OrdersModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resources",{"_index":2123,"title":{},"body":{"index.html":{}}}],["response",{"_index":565,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["response.interface.ts",{"_index":1474,"title":{},"body":{"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{},"coverage.html":{}}}],["response.status(status).json(errorresponse",{"_index":1102,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["responses",{"_index":569,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{}}}],["rest",{"_index":756,"title":{},"body":{"injectables/AppService.html":{}}}],["restriction",{"_index":2194,"title":{},"body":{"license.html":{}}}],["results",{"_index":45,"title":{},"body":{"classes/AddDobToUsers1714389820000.html":{},"entities/Address.html":{},"modules/AdminModule.html":{},"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateOrderDto.html":{},"classes/CreateOrdersTables1714390000000.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"classes/OrderItemDto.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"entities/Product.html":{},"classes/ProductQueryDto.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"entities/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retrieved",{"_index":295,"title":{},"body":{"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["retrieves",{"_index":292,"title":{},"body":{"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{}}}],["return",{"_index":251,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"classes/ProductQueryDto.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":25,"title":{},"body":{"classes/AddDobToUsers1714389820000.html":{},"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateOrdersTables1714390000000.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationExceptionFilter.html":{}}}],["revenue",{"_index":190,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["reverse",{"_index":956,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["reviewcount",{"_index":1485,"title":{},"body":{"entities/Product.html":{}}}],["reviews",{"_index":1525,"title":{},"body":{"entities/Product.html":{}}}],["rights",{"_index":2196,"title":{},"body":{"license.html":{}}}],["rise",{"_index":1768,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["role",{"_index":227,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"controllers/OrdersController.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"entities/Users.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["role'})@apiparam({name",{"_index":469,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["role'})@isoptional()@isenum(role",{"_index":538,"title":{},"body":{"classes/AdminUserQueryDto.html":{}}}],["role.customer",{"_index":1791,"title":{},"body":{"entities/User.html":{},"injectables/UsersService.html":{}}}],["role.name",{"_index":1696,"title":{},"body":{"guards/RolesGuard.html":{}}}],["role.users",{"_index":1842,"title":{},"body":{"entities/Users.html":{}}}],["role.users)@jointable",{"_index":1835,"title":{},"body":{"entities/Users.html":{}}}],["rolecounts",{"_index":682,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["rolecounts[role",{"_index":684,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["roleentity",{"_index":683,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["roleentity?.users?.length",{"_index":685,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["roles",{"_index":129,"title":{"entities/Roles.html":{}},"body":{"modules/AdminModule.html":{},"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/OrdersController.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"entities/Users.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles(role.admin",{"_index":240,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{}}}],["roles.entity",{"_index":1839,"title":{},"body":{"entities/Users.html":{}}}],["roles_key",{"_index":1683,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolesguard",{"_index":224,"title":{"guards/RolesGuard.html":{}},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"modules/AuthModule.html":{},"controllers/OrdersController.html":{},"guards/RolesGuard.html":{},"coverage.html":{},"overview.html":{}}}],["rolesrepository",{"_index":591,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/UsersService.html":{}}}],["role})@isoptional()@isenum(role",{"_index":408,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["route",{"_index":1128,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["routes",{"_index":761,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{}}}],["rules",{"_index":425,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"classes/LoginDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"classes/ProductQueryDto.html":{}}}],["run",{"_index":2079,"title":{},"body":{"index.html":{}}}],["runs",{"_index":2098,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":2026,"title":{},"body":{"dependencies.html":{}}}],["s",{"_index":1013,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["sale",{"_index":330,"title":{},"body":{"controllers/AdminProductsController.html":{},"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/ProductQueryDto.html":{},"controllers/ProductsController.html":{},"classes/UpdateProductDto.html":{}}}],["sale')@apioperation({summary",{"_index":329,"title":{},"body":{"controllers/AdminProductsController.html":{},"controllers/ProductsController.html":{}}}],["sale'})@apiresponse({status",{"_index":331,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["sale.'})@apiresponse({status",{"_index":1617,"title":{},"body":{"controllers/ProductsController.html":{}}}],["saleprice",{"_index":940,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["sales",{"_index":1269,"title":{},"body":{"controllers/OrdersController.html":{}}}],["savedorder",{"_index":1373,"title":{},"body":{"injectables/OrdersService.html":{}}}],["savedorder.id",{"_index":1381,"title":{},"body":{"injectables/OrdersService.html":{}}}],["savedorder.paymentdetails",{"_index":1389,"title":{},"body":{"injectables/OrdersService.html":{}}}],["savedorder.paymentdetails.amount",{"_index":1390,"title":{},"body":{"injectables/OrdersService.html":{}}}],["savedorder.totalamount",{"_index":1388,"title":{},"body":{"injectables/OrdersService.html":{}}}],["scalable",{"_index":2069,"title":{},"body":{"index.html":{}}}],["scale",{"_index":1197,"title":{},"body":{"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{}}}],["schema",{"_index":498,"title":{},"body":{"controllers/AdminUserController.html":{},"controllers/AuthController.html":{},"controllers/OrdersController.html":{}}}],["search",{"_index":514,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"classes/ProductQueryDto.html":{},"classes/UserQueryDto.html":{},"injectables/UsersService.html":{}}}],["secret",{"_index":801,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":1172,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["select",{"_index":1444,"title":{},"body":{"injectables/OrdersService.html":{}}}],["select('orderitem.productid",{"_index":1426,"title":{},"body":{"injectables/OrdersService.html":{}}}],["select('product.category",{"_index":1669,"title":{},"body":{"injectables/ProductsService.html":{}}}],["select(`date_trunc('${interval",{"_index":1436,"title":{},"body":{"injectables/OrdersService.html":{}}}],["selected",{"_index":872,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{}}}],["sell",{"_index":2203,"title":{},"body":{"license.html":{}}}],["seller",{"_index":310,"title":{},"body":{"controllers/AdminProductsController.html":{},"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/ProductQueryDto.html":{},"controllers/ProductsController.html":{},"classes/UpdateProductDto.html":{}}}],["seller')@apioperation({summary",{"_index":308,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["seller'})@apiresponse({status",{"_index":314,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["sellers",{"_index":1560,"title":{},"body":{"classes/ProductQueryDto.html":{},"controllers/ProductsController.html":{}}}],["sellers')@apioperation({summary",{"_index":1601,"title":{},"body":{"controllers/ProductsController.html":{}}}],["selling",{"_index":1602,"title":{},"body":{"controllers/ProductsController.html":{}}}],["server",{"_index":2070,"title":{},"body":{"index.html":{}}}],["service",{"_index":582,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{}}}],["services/admin",{"_index":133,"title":{},"body":{"modules/AdminModule.html":{},"controllers/AdminUserController.html":{}}}],["set",{"_index":457,"title":{},"body":{"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{}}}],["setmetadata(roles_key",{"_index":2257,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setstatus",{"_index":434,"title":{},"body":{"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{}}}],["setstatus(id",{"_index":456,"title":{},"body":{"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{}}}],["setup",{"_index":2076,"title":{},"body":{"index.html":{}}}],["shall",{"_index":2212,"title":{},"body":{"license.html":{}}}],["shipped",{"_index":1315,"title":{},"body":{"controllers/OrdersController.html":{},"miscellaneous/enumerations.html":{}}}],["shirt",{"_index":969,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["shirt'})@isstring()@isnotempty",{"_index":991,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["shirts",{"_index":1539,"title":{},"body":{"entities/Product.html":{},"miscellaneous/enumerations.html":{}}}],["shoes",{"_index":1541,"title":{},"body":{"entities/Product.html":{},"miscellaneous/enumerations.html":{}}}],["side",{"_index":957,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{},"index.html":{}}}],["signoptions",{"_index":803,"title":{},"body":{"modules/AuthModule.html":{}}}],["simple",{"_index":2114,"title":{},"body":{"index.html":{}}}],["single",{"_index":1864,"title":{},"body":{"controllers/UsersController.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["size",{"_index":873,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{},"classes/ProductQueryDto.html":{}}}],["sizes",{"_index":941,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/UpdateProductDto.html":{}}}],["skip",{"_index":625,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/OrdersService.html":{},"injectables/UsersService.html":{}}}],["skip((page",{"_index":1656,"title":{},"body":{"injectables/ProductsService.html":{}}}],["skirts",{"_index":2045,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["slim",{"_index":1724,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["software",{"_index":2190,"title":{},"body":{"license.html":{}}}],["sort",{"_index":543,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"classes/ProductQueryDto.html":{}}}],["sortby",{"_index":515,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"classes/ProductQueryDto.html":{}}}],["sorting",{"_index":640,"title":{},"body":{"injectables/AdminUserService.html":{},"classes/ProductQueryDto.html":{}}}],["sortorder",{"_index":516,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"classes/ProductQueryDto.html":{}}}],["sortorder.tolowercase",{"_index":647,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AddDobToUsers1714389820000.html":{},"entities/Address.html":{},"modules/AdminModule.html":{},"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateOrderDto.html":{},"classes/CreateOrdersTables1714390000000.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"classes/OrderItemDto.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"entities/Product.html":{},"classes/ProductQueryDto.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"entities/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"index.html":{}}}],["specific",{"_index":1255,"title":{},"body":{"controllers/OrdersController.html":{},"controllers/ProductsController.html":{}}}],["specifications",{"_index":942,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/UpdateProductDto.html":{}}}],["specified",{"_index":1241,"title":{},"body":{"controllers/OrdersController.html":{}}}],["specifying",{"_index":2259,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sponsors",{"_index":2162,"title":{},"body":{"index.html":{}}}],["sports",{"_index":1545,"title":{},"body":{"entities/Product.html":{},"miscellaneous/enumerations.html":{}}}],["sportwear",{"_index":2050,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../current",{"_index":2251,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":2061,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../order",{"_index":2034,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../product",{"_index":2038,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../product.entity.ts",{"_index":2037,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../roles.decorator.ts",{"_index":2252,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../roles.enum.ts",{"_index":2040,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../roles.guard.ts",{"_index":2253,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/admin/admin.module.ts",{"_index":119,"title":{},"body":{"modules/AdminModule.html":{}}}],["src/admin/controllers/admin",{"_index":142,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminUserController.html":{},"coverage.html":{}}}],["src/admin/dto/admin",{"_index":373,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"coverage.html":{}}}],["src/admin/interfaces/paginated",{"_index":1473,"title":{},"body":{"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{},"coverage.html":{}}}],["src/admin/services/admin",{"_index":580,"title":{},"body":{"injectables/AdminUserService.html":{},"coverage.html":{}}}],["src/app.controller.ts",{"_index":696,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":698,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":708,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":745,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:14",{"_index":748,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":758,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:35",{"_index":774,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":791,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":807,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:16",{"_index":810,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:29",{"_index":812,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/decorators/current",{"_index":1984,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/roles.decorator",{"_index":479,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["src/auth/decorators/roles.decorator.ts",{"_index":1988,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dto/login.dto.ts",{"_index":1174,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/auth/dto/login.dto.ts:19",{"_index":1176,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/login.dto.ts:32",{"_index":1178,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/guards/jwt",{"_index":477,"title":{},"body":{"controllers/AdminUserController.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guards/roles.guard",{"_index":478,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["src/auth/guards/roles.guard.ts",{"_index":1679,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/guards/roles.guard.ts:11",{"_index":1682,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/guards/roles.guard.ts:8",{"_index":1681,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/interfaces/jwt",{"_index":1140,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts",{"_index":1147,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts:18",{"_index":1154,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/jwt.strategy.ts:42",{"_index":1156,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/common/exceptions/http",{"_index":1067,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/common/exceptions/validation",{"_index":1916,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":1993,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/migrations/1714389820000",{"_index":6,"title":{},"body":{"classes/AddDobToUsers1714389820000.html":{},"coverage.html":{}}}],["src/migrations/1714390000000",{"_index":888,"title":{},"body":{"classes/CreateOrdersTables1714390000000.html":{},"coverage.html":{}}}],["src/orders/dto/create",{"_index":837,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{},"coverage.html":{}}}],["src/orders/dto/update",{"_index":1704,"title":{},"body":{"classes/UpdateOrderDto.html":{},"coverage.html":{}}}],["src/orders/entities/order",{"_index":1214,"title":{},"body":{"entities/OrderItem.html":{},"coverage.html":{}}}],["src/orders/entities/order.entity.ts",{"_index":1183,"title":{},"body":{"entities/Order.html":{},"coverage.html":{}}}],["src/orders/entities/order.entity.ts:12",{"_index":1204,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/entities/order.entity.ts:16",{"_index":1203,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/entities/order.entity.ts:19",{"_index":1199,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/entities/order.entity.ts:22",{"_index":1200,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/entities/order.entity.ts:25",{"_index":1198,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/entities/order.entity.ts:28",{"_index":1192,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/entities/order.entity.ts:31",{"_index":1184,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/entities/order.entity.ts:34",{"_index":1194,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/entities/order.entity.ts:42",{"_index":1186,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/entities/order.entity.ts:52",{"_index":1191,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/entities/order.entity.ts:55",{"_index":1185,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/entities/order.entity.ts:58",{"_index":1201,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/entities/order.entity.ts:9",{"_index":1187,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/enums/order",{"_index":2042,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/orders/orders.controller.ts",{"_index":1238,"title":{},"body":{"controllers/OrdersController.html":{},"coverage.html":{}}}],["src/orders/orders.controller.ts:130",{"_index":1254,"title":{},"body":{"controllers/OrdersController.html":{}}}],["src/orders/orders.controller.ts:189",{"_index":1258,"title":{},"body":{"controllers/OrdersController.html":{}}}],["src/orders/orders.controller.ts:237",{"_index":1280,"title":{},"body":{"controllers/OrdersController.html":{}}}],["src/orders/orders.controller.ts:281",{"_index":1266,"title":{},"body":{"controllers/OrdersController.html":{}}}],["src/orders/orders.controller.ts:333",{"_index":1276,"title":{},"body":{"controllers/OrdersController.html":{}}}],["src/orders/orders.controller.ts:60",{"_index":1246,"title":{},"body":{"controllers/OrdersController.html":{}}}],["src/orders/orders.module.ts",{"_index":1333,"title":{},"body":{"modules/OrdersModule.html":{}}}],["src/orders/orders.service.ts",{"_index":1338,"title":{},"body":{"injectables/OrdersService.html":{},"coverage.html":{}}}],["src/orders/orders.service.ts:135",{"_index":1348,"title":{},"body":{"injectables/OrdersService.html":{}}}],["src/orders/orders.service.ts:148",{"_index":1355,"title":{},"body":{"injectables/OrdersService.html":{}}}],["src/orders/orders.service.ts:15",{"_index":1344,"title":{},"body":{"injectables/OrdersService.html":{}}}],["src/orders/orders.service.ts:167",{"_index":1357,"title":{},"body":{"injectables/OrdersService.html":{}}}],["src/orders/orders.service.ts:183",{"_index":1356,"title":{},"body":{"injectables/OrdersService.html":{}}}],["src/orders/orders.service.ts:206",{"_index":1351,"title":{},"body":{"injectables/OrdersService.html":{}}}],["src/orders/orders.service.ts:249",{"_index":1354,"title":{},"body":{"injectables/OrdersService.html":{}}}],["src/orders/orders.service.ts:262",{"_index":1353,"title":{},"body":{"injectables/OrdersService.html":{}}}],["src/orders/orders.service.ts:279",{"_index":1349,"title":{},"body":{"injectables/OrdersService.html":{}}}],["src/orders/orders.service.ts:30",{"_index":1346,"title":{},"body":{"injectables/OrdersService.html":{}}}],["src/orders/orders.service.ts:300",{"_index":1352,"title":{},"body":{"injectables/OrdersService.html":{}}}],["src/orders/orders.service.ts:90",{"_index":1347,"title":{},"body":{"injectables/OrdersService.html":{}}}],["src/products/admin",{"_index":268,"title":{},"body":{"controllers/AdminProductsController.html":{},"coverage.html":{}}}],["src/products/dto/create",{"_index":932,"title":{},"body":{"classes/CreateProductDto.html":{},"coverage.html":{}}}],["src/products/dto/product",{"_index":1553,"title":{},"body":{"classes/ProductQueryDto.html":{},"coverage.html":{}}}],["src/products/dto/update",{"_index":1712,"title":{},"body":{"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["src/products/entities/product.entity.ts",{"_index":1475,"title":{},"body":{"entities/Product.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/products/entities/product.entity.ts:103",{"_index":1490,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:107",{"_index":1516,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:111",{"_index":1491,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:115",{"_index":1514,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:119",{"_index":1512,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:123",{"_index":1515,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:127",{"_index":1497,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:131",{"_index":1533,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:30",{"_index":1506,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:34",{"_index":1518,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:38",{"_index":1499,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:42",{"_index":1520,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:46",{"_index":1502,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:50",{"_index":1531,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:58",{"_index":1493,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:62",{"_index":1527,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:66",{"_index":1495,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:70",{"_index":1508,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:74",{"_index":1510,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:78",{"_index":1513,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:82",{"_index":1536,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:86",{"_index":1524,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:90",{"_index":1526,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:99",{"_index":1530,"title":{},"body":{"entities/Product.html":{}}}],["src/products/enums/product",{"_index":2043,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/products/products.controller.ts",{"_index":1590,"title":{},"body":{"controllers/ProductsController.html":{},"coverage.html":{}}}],["src/products/products.controller.ts:107",{"_index":1608,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/products/products.controller.ts:124",{"_index":1599,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/products/products.controller.ts:38",{"_index":1597,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/products/products.controller.ts:55",{"_index":1610,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/products/products.controller.ts:68",{"_index":1615,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/products/products.controller.ts:81",{"_index":1604,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/products/products.controller.ts:94",{"_index":1618,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/products/products.module.ts",{"_index":1635,"title":{},"body":{"modules/ProductsModule.html":{}}}],["src/products/products.service.ts",{"_index":1637,"title":{},"body":{"injectables/ProductsService.html":{},"coverage.html":{}}}],["src/products/products.service.ts:15",{"_index":1641,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/products.service.ts:20",{"_index":1642,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/products.service.ts:39",{"_index":1643,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/products.service.ts:47",{"_index":1651,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/products.service.ts:53",{"_index":1650,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/products.service.ts:58",{"_index":1646,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/products.service.ts:65",{"_index":1647,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/products.service.ts:72",{"_index":1644,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/products.service.ts:79",{"_index":1648,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/products.service.ts:86",{"_index":1645,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/products.service.ts:9",{"_index":1640,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/products.service.ts:93",{"_index":1649,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/users/dto/create",{"_index":1033,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":1774,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/user",{"_index":1793,"title":{},"body":{"classes/UserQueryDto.html":{},"coverage.html":{}}}],["src/users/entities/address.entity.ts",{"_index":50,"title":{},"body":{"entities/Address.html":{},"coverage.html":{}}}],["src/users/entities/address.entity.ts:15",{"_index":75,"title":{},"body":{"entities/Address.html":{}}}],["src/users/entities/address.entity.ts:18",{"_index":86,"title":{},"body":{"entities/Address.html":{}}}],["src/users/entities/address.entity.ts:21",{"_index":70,"title":{},"body":{"entities/Address.html":{}}}],["src/users/entities/address.entity.ts:24",{"_index":85,"title":{},"body":{"entities/Address.html":{}}}],["src/users/entities/address.entity.ts:27",{"_index":84,"title":{},"body":{"entities/Address.html":{}}}],["src/users/entities/address.entity.ts:30",{"_index":71,"title":{},"body":{"entities/Address.html":{}}}],["src/users/entities/address.entity.ts:33",{"_index":79,"title":{},"body":{"entities/Address.html":{}}}],["src/users/entities/address.entity.ts:36",{"_index":82,"title":{},"body":{"entities/Address.html":{}}}],["src/users/entities/address.entity.ts:39",{"_index":93,"title":{},"body":{"entities/Address.html":{}}}],["src/users/entities/address.entity.ts:43",{"_index":91,"title":{},"body":{"entities/Address.html":{}}}],["src/users/entities/address.entity.ts:46",{"_index":73,"title":{},"body":{"entities/Address.html":{}}}],["src/users/entities/address.entity.ts:49",{"_index":88,"title":{},"body":{"entities/Address.html":{}}}],["src/users/entities/roles.entity",{"_index":130,"title":{},"body":{"modules/AdminModule.html":{},"injectables/AdminUserService.html":{}}}],["src/users/entities/roles.entity.ts",{"_index":1671,"title":{},"body":{"entities/Roles.html":{},"coverage.html":{}}}],["src/users/entities/roles.entity.ts:15",{"_index":1673,"title":{},"body":{"entities/Roles.html":{}}}],["src/users/entities/roles.entity.ts:18",{"_index":1675,"title":{},"body":{"entities/Roles.html":{}}}],["src/users/entities/roles.entity.ts:8",{"_index":1672,"title":{},"body":{"entities/Roles.html":{}}}],["src/users/entities/user.entity.ts",{"_index":1777,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts:10",{"_index":1780,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:13",{"_index":1787,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:16",{"_index":1782,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:19",{"_index":1786,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:22",{"_index":1788,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:25",{"_index":1785,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:28",{"_index":1778,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:31",{"_index":1789,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:7",{"_index":1783,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/users.entity",{"_index":128,"title":{},"body":{"modules/AdminModule.html":{},"injectables/AdminUserService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"entities/Roles.html":{}}}],["src/users/entities/users.entity.ts",{"_index":1812,"title":{},"body":{"entities/Users.html":{},"coverage.html":{}}}],["src/users/entities/users.entity.ts:18",{"_index":1822,"title":{},"body":{"entities/Users.html":{}}}],["src/users/entities/users.entity.ts:21",{"_index":1821,"title":{},"body":{"entities/Users.html":{}}}],["src/users/entities/users.entity.ts:24",{"_index":1827,"title":{},"body":{"entities/Users.html":{}}}],["src/users/entities/users.entity.ts:27",{"_index":1818,"title":{},"body":{"entities/Users.html":{}}}],["src/users/entities/users.entity.ts:35",{"_index":1820,"title":{},"body":{"entities/Users.html":{}}}],["src/users/entities/users.entity.ts:38",{"_index":1831,"title":{},"body":{"entities/Users.html":{}}}],["src/users/entities/users.entity.ts:41",{"_index":1830,"title":{},"body":{"entities/Users.html":{}}}],["src/users/entities/users.entity.ts:45",{"_index":1836,"title":{},"body":{"entities/Users.html":{}}}],["src/users/entities/users.entity.ts:48",{"_index":1829,"title":{},"body":{"entities/Users.html":{}}}],["src/users/entities/users.entity.ts:51",{"_index":1816,"title":{},"body":{"entities/Users.html":{}}}],["src/users/entities/users.entity.ts:54",{"_index":1823,"title":{},"body":{"entities/Users.html":{}}}],["src/users/entities/users.entity.ts:57",{"_index":1824,"title":{},"body":{"entities/Users.html":{}}}],["src/users/entities/users.entity.ts:60",{"_index":1825,"title":{},"body":{"entities/Users.html":{}}}],["src/users/entities/users.entity.ts:63",{"_index":1834,"title":{},"body":{"entities/Users.html":{}}}],["src/users/entities/users.entity.ts:71",{"_index":1833,"title":{},"body":{"entities/Users.html":{}}}],["src/users/entities/users.entity.ts:74",{"_index":1817,"title":{},"body":{"entities/Users.html":{}}}],["src/users/entities/users.entity.ts:77",{"_index":1837,"title":{},"body":{"entities/Users.html":{}}}],["src/users/entities/users.entity.ts:80",{"_index":1826,"title":{},"body":{"entities/Users.html":{}}}],["src/users/enums/order",{"_index":1809,"title":{},"body":{"classes/UserQueryDto.html":{},"miscellaneous/enumerations.html":{}}}],["src/users/enums/roles.enum",{"_index":417,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{}}}],["src/users/enums/roles.enum.ts",{"_index":2058,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/users/users.controller.ts",{"_index":1844,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:33",{"_index":1846,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:44",{"_index":1849,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:54",{"_index":1851,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:64",{"_index":1854,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":1869,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":1873,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:113",{"_index":1888,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:120",{"_index":1890,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:139",{"_index":1880,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:157",{"_index":1882,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:176",{"_index":1883,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:18",{"_index":1878,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:28",{"_index":1881,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:64",{"_index":1885,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:99",{"_index":1887,"title":{},"body":{"injectables/UsersService.html":{}}}],["start",{"_index":1262,"title":{},"body":{"controllers/OrdersController.html":{},"index.html":{}}}],["start:dev",{"_index":2083,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":2085,"title":{},"body":{"index.html":{}}}],["startdate",{"_index":157,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["started",{"_index":2063,"title":{"index.html":{},"license.html":{}},"body":{}}],["starter",{"_index":2074,"title":{},"body":{"index.html":{}}}],["state",{"_index":59,"title":{},"body":{"entities/Address.html":{}}}],["statements",{"_index":1967,"title":{},"body":{"coverage.html":{}}}],["statistics",{"_index":454,"title":{},"body":{"controllers/AdminUserController.html":{},"controllers/OrdersController.html":{}}}],["statistics'})@apiresponse({status",{"_index":453,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["status",{"_index":155,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"controllers/AuthController.html":{},"classes/CreateOrdersTables1714390000000.html":{},"classes/HttpExceptionFilter.html":{},"entities/Order.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"controllers/ProductsController.html":{},"classes/UpdateOrderDto.html":{},"controllers/UsersController.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["status')@apioperation({summary",{"_index":197,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["status'})@apiparam({name",{"_index":458,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["status'})@apiquery({name",{"_index":1251,"title":{},"body":{"controllers/OrdersController.html":{}}}],["status'})@isoptional()@isboolean",{"_index":396,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["status'})@isoptional()@type(undefined)@isboolean",{"_index":523,"title":{},"body":{"classes/AdminUserQueryDto.html":{}}}],["status.enum",{"_index":230,"title":{},"body":{"controllers/AdminOrdersController.html":{},"entities/Order.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"classes/UpdateOrderDto.html":{}}}],["status.enum.ts",{"_index":2036,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["statuscode",{"_index":1094,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"controllers/OrdersController.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["stay",{"_index":2149,"title":{},"body":{"index.html":{}}}],["steps",{"_index":2096,"title":{},"body":{"index.html":{}}}],["stock",{"_index":943,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/UpdateProductDto.html":{}}}],["stockquantity",{"_index":1486,"title":{},"body":{"entities/Product.html":{},"classes/UpdateProductDto.html":{}}}],["stores",{"_index":1548,"title":{},"body":{"entities/Product.html":{}}}],["storing",{"_index":2261,"title":{},"body":{"miscellaneous/variables.html":{}}}],["straightforward",{"_index":2111,"title":{},"body":{"index.html":{}}}],["strategies/jwt.strategy",{"_index":796,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":1148,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["street",{"_index":60,"title":{},"body":{"entities/Address.html":{}}}],["stretch",{"_index":1726,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["strict",{"_index":1062,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["string",{"_index":64,"title":{},"body":{"entities/Address.html":{},"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDto.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"classes/OrderItemDto.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"entities/Product.html":{},"classes/ProductQueryDto.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"entities/Users.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["string})@apiquery({name",{"_index":168,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["structure",{"_index":423,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"classes/ProductQueryDto.html":{}}}],["style",{"_index":1026,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["styling",{"_index":1730,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["sub",{"_index":830,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["subject",{"_index":1145,"title":{},"body":{"interfaces/JwtPayload.html":{},"license.html":{}}}],["sublicense",{"_index":2201,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":2214,"title":{},"body":{"license.html":{}}}],["successful",{"_index":768,"title":{},"body":{"controllers/AuthController.html":{}}}],["successfully",{"_index":204,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["successfully'})@apiresponse({status",{"_index":209,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["sufficient",{"_index":1701,"title":{},"body":{"guards/RolesGuard.html":{}}}],["suits",{"_index":2051,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["sum",{"_index":1419,"title":{},"body":{"injectables/OrdersService.html":{}}}],["sum(order.totalamount",{"_index":1446,"title":{},"body":{"injectables/OrdersService.html":{}}}],["sum(orderitem.quantity",{"_index":1427,"title":{},"body":{"injectables/OrdersService.html":{}}}],["sum(orderitem.total",{"_index":1466,"title":{},"body":{"injectables/OrdersService.html":{}}}],["summary",{"_index":243,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"controllers/AuthController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["super",{"_index":1126,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["super.canactivate(context",{"_index":1134,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["support",{"_index":2130,"title":{},"body":{"index.html":{},"modules.html":{}}}],["sure",{"_index":1691,"title":{},"body":{"guards/RolesGuard.html":{}}}],["svg",{"_index":2241,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":2028,"title":{},"body":{"dependencies.html":{}}}],["sweaters",{"_index":2046,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["synchronize",{"_index":733,"title":{},"body":{"modules/AppModule.html":{}}}],["system",{"_index":1478,"title":{},"body":{"entities/Product.html":{}}}],["t",{"_index":571,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"classes/CreateProductDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{}}}],["t_shirts",{"_index":1538,"title":{},"body":{"entities/Product.html":{},"miscellaneous/enumerations.html":{}}}],["table",{"_index":39,"title":{},"body":{"classes/AddDobToUsers1714389820000.html":{},"classes/CreateOrdersTables1714390000000.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2005,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":1400,"title":{},"body":{"injectables/OrdersService.html":{},"injectables/ProductsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["take(limit",{"_index":1657,"title":{},"body":{"injectables/ProductsService.html":{}}}],["template",{"_index":570,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{}}}],["term",{"_index":540,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"classes/ProductQueryDto.html":{}}}],["test",{"_index":2088,"title":{},"body":{"index.html":{}}}],["test:covdeployment",{"_index":2091,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":2090,"title":{},"body":{"index.html":{}}}],["tests",{"_index":2086,"title":{},"body":{"index.html":{}}}],["text",{"_index":899,"title":{},"body":{"classes/CreateOrdersTables1714390000000.html":{},"entities/Order.html":{},"entities/Product.html":{}}}],["thanks",{"_index":2161,"title":{},"body":{"index.html":{}}}],["thirtydaysago",{"_index":688,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["thirtydaysago.setdate(thirtydaysago.getdate",{"_index":689,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["this.adminuserservice.findall(querydto",{"_index":489,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["this.adminuserservice.findone(id",{"_index":495,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["this.adminuserservice.getstats",{"_index":491,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["this.adminuserservice.setstatus(id",{"_index":503,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["this.adminuserservice.update(id",{"_index":497,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["this.adminuserservice.updateuserrole(id",{"_index":507,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["this.appservice.gethello",{"_index":701,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login(logindto",{"_index":786,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.findone(id",{"_index":665,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/OrdersService.html":{},"injectables/ProductsService.html":{},"injectables/UsersService.html":{}}}],["this.formatnestedvalidationerrors(messages",{"_index":1927,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["this.formatvalidationerrors(messages",{"_index":1925,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["this.jwtservice.sign(payload",{"_index":833,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.error",{"_index":1089,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["this.orderitemrepository",{"_index":1424,"title":{},"body":{"injectables/OrdersService.html":{}}}],["this.orderitemrepository.create",{"_index":1380,"title":{},"body":{"injectables/OrdersService.html":{}}}],["this.orderitemrepository.save(orderitems",{"_index":1386,"title":{},"body":{"injectables/OrdersService.html":{}}}],["this.orderrepository",{"_index":1434,"title":{},"body":{"injectables/OrdersService.html":{}}}],["this.orderrepository.find",{"_index":1410,"title":{},"body":{"injectables/OrdersService.html":{}}}],["this.orderrepository.findandcount",{"_index":1398,"title":{},"body":{"injectables/OrdersService.html":{}}}],["this.orderrepository.findone",{"_index":1401,"title":{},"body":{"injectables/OrdersService.html":{}}}],["this.orderrepository.save(order",{"_index":1374,"title":{},"body":{"injectables/OrdersService.html":{}}}],["this.orderrepository.save(savedorder",{"_index":1391,"title":{},"body":{"injectables/OrdersService.html":{}}}],["this.orderrepository.save(updatedorders",{"_index":1417,"title":{},"body":{"injectables/OrdersService.html":{}}}],["this.ordersservice.create(createorderdto",{"_index":1298,"title":{},"body":{"controllers/OrdersController.html":{}}}],["this.ordersservice.findall(page",{"_index":252,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/OrdersController.html":{}}}],["this.ordersservice.findone(id",{"_index":1301,"title":{},"body":{"controllers/OrdersController.html":{}}}],["this.ordersservice.getcustomeranalytics(startdate",{"_index":258,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["this.ordersservice.getorderanalytics(startdate",{"_index":1321,"title":{},"body":{"controllers/OrdersController.html":{}}}],["this.ordersservice.getproductanalytics(startdate",{"_index":260,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["this.ordersservice.getrevenueanalytics(startdate",{"_index":256,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["this.ordersservice.getsalestrends(startdate",{"_index":1328,"title":{},"body":{"controllers/OrdersController.html":{}}}],["this.ordersservice.update(id",{"_index":1307,"title":{},"body":{"controllers/OrdersController.html":{}}}],["this.ordersservice.updatebulkstatus(orderids",{"_index":267,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["this.ordersservice.updatestatus(id",{"_index":265,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["this.productrepository",{"_index":1462,"title":{},"body":{"injectables/OrdersService.html":{},"injectables/ProductsService.html":{}}}],["this.productrepository.count",{"_index":1663,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.productrepository.create(createproductdto",{"_index":1652,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.productrepository.createquerybuilder('product",{"_index":1654,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.productrepository.find",{"_index":1661,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.productrepository.findone",{"_index":1377,"title":{},"body":{"injectables/OrdersService.html":{},"injectables/ProductsService.html":{}}}],["this.productrepository.remove(product",{"_index":1660,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.productrepository.save(product",{"_index":1653,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.productsservice.create(createproductdto",{"_index":349,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["this.productsservice.findall(page",{"_index":1623,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.productsservice.findone(id",{"_index":358,"title":{},"body":{"controllers/AdminProductsController.html":{},"controllers/ProductsController.html":{}}}],["this.productsservice.getbestsellers",{"_index":1627,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.productsservice.getbycategory(category",{"_index":1631,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.productsservice.getfeatured",{"_index":1625,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.productsservice.getnewarrivals",{"_index":1626,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.productsservice.getonsale",{"_index":1628,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.productsservice.getproductstats",{"_index":371,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["this.productsservice.remove(id",{"_index":355,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["this.productsservice.update(id",{"_index":352,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["this.reflector.getallandoverride('ispublic",{"_index":1130,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.reflector.getallandoverride(roles_key",{"_index":1685,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.rolesrepository.findone",{"_index":672,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/UsersService.html":{}}}],["this.userrepository",{"_index":1453,"title":{},"body":{"injectables/OrdersService.html":{}}}],["this.userrepository.count",{"_index":678,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["this.userrepository.createquerybuilder('user",{"_index":627,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["this.userrepository.findone",{"_index":662,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["this.userrepository.save(user",{"_index":675,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["this.userrepository.update(id",{"_index":693,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["this.usersrepository.create",{"_index":1900,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findandcount",{"_index":1907,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findone",{"_index":818,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.save(newuser",{"_index":1903,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.save(user",{"_index":828,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.update(id.tostring",{"_index":1910,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.create(createuserdto",{"_index":1861,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall(page",{"_index":1863,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone(+id",{"_index":1865,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.update(+id",{"_index":1866,"title":{},"body":{"controllers/UsersController.html":{}}}],["throw",{"_index":619,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"injectables/UsersService.html":{}}}],["throws",{"_index":661,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/AuthService.html":{}}}],["time",{"_index":826,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/OrdersController.html":{},"index.html":{}}}],["times",{"_index":1534,"title":{},"body":{"entities/Product.html":{}}}],["timestamp",{"_index":903,"title":{},"body":{"classes/CreateOrdersTables1714390000000.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/JwtPayload.html":{},"entities/Users.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["toggle",{"_index":309,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["togglebestseller",{"_index":274,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["togglebestseller(@param('id",{"_index":364,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["togglebestseller(id",{"_index":305,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["toggled",{"_index":315,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["togglefeatured",{"_index":275,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["togglefeatured(@param('id",{"_index":356,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["togglefeatured(id",{"_index":318,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["togglenewarrival",{"_index":276,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["togglenewarrival(@param('id",{"_index":361,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["togglenewarrival(id",{"_index":323,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["toggleonsale",{"_index":277,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["toggleonsale(@param('id",{"_index":367,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["toggleonsale(id",{"_index":328,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["toggles",{"_index":311,"title":{},"body":{"controllers/AdminProductsController.html":{},"injectables/AdminUserService.html":{}}}],["toggleuserstatus",{"_index":586,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["toggleuserstatus(id",{"_index":599,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["token",{"_index":770,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["tort",{"_index":2235,"title":{},"body":{"license.html":{}}}],["total",{"_index":559,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"classes/CreateOrdersTables1714390000000.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"injectables/ProductsService.html":{},"injectables/UsersService.html":{}}}],["totalamount",{"_index":896,"title":{},"body":{"classes/CreateOrdersTables1714390000000.html":{},"entities/Order.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["totalorders",{"_index":1310,"title":{},"body":{"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["totalpages",{"_index":561,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{}}}],["totalproducts",{"_index":1662,"title":{},"body":{"injectables/ProductsService.html":{}}}],["totalquantity",{"_index":1428,"title":{},"body":{"injectables/OrdersService.html":{}}}],["totalrevenue",{"_index":1311,"title":{},"body":{"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["totalspent",{"_index":1455,"title":{},"body":{"injectables/OrdersService.html":{}}}],["totalusers",{"_index":677,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["touch",{"_index":2169,"title":{},"body":{"index.html":{}}}],["transactionid",{"_index":1212,"title":{},"body":{"entities/Order.html":{},"injectables/OrdersService.html":{}}}],["transfer",{"_index":375,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"classes/LoginDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"classes/ProductQueryDto.html":{}}}],["transform",{"_index":1006,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/ProductQueryDto.html":{}}}],["transformer",{"_index":419,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/OrderItemDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"classes/ProductQueryDto.html":{},"dependencies.html":{}}}],["trend",{"_index":1273,"title":{},"body":{"controllers/OrdersController.html":{}}}],["trends",{"_index":1270,"title":{},"body":{"controllers/OrdersController.html":{}}}],["true",{"_index":81,"title":{},"body":{"entities/Address.html":{},"controllers/AdminOrdersController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"modules/AppModule.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"entities/Order.html":{},"classes/OrderItemDto.html":{},"controllers/OrdersController.html":{},"entities/Product.html":{},"classes/ProductQueryDto.html":{},"injectables/ProductsService.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"classes/UpdateProductDto.html":{},"entities/User.html":{},"entities/Users.html":{}}}],["true})@column({length",{"_index":1489,"title":{},"body":{"entities/Product.html":{}}}],["true})@column({type",{"_index":1501,"title":{},"body":{"entities/Product.html":{}}}],["true})@isboolean()@isoptional",{"_index":1739,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["true})@isoptional",{"_index":1718,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["true})@type(undefined",{"_index":843,"title":{},"body":{"classes/CreateOrderDto.html":{}}}],["try",{"_index":615,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["tshirt.jpg",{"_index":980,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["tumble",{"_index":951,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["twitter",{"_index":2175,"title":{},"body":{"index.html":{}}}],["type",{"_index":23,"title":{},"body":{"classes/AddDobToUsers1714389820000.html":{},"entities/Address.html":{},"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateOrderDto.html":{},"classes/CreateOrdersTables1714390000000.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"classes/OrderItemDto.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"entities/Product.html":{},"classes/ProductQueryDto.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"entities/Users.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeof",{"_index":1097,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["typeorm",{"_index":30,"title":{},"body":{"classes/AddDobToUsers1714389820000.html":{},"entities/Address.html":{},"injectables/AdminUserService.html":{},"injectables/AuthService.html":{},"classes/CreateOrdersTables1714390000000.html":{},"injectables/JwtStrategy.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"injectables/OrdersService.html":{},"entities/Product.html":{},"injectables/ProductsService.html":{},"entities/Roles.html":{},"entities/User.html":{},"entities/Users.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":126,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/OrdersModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([order",{"_index":1337,"title":{},"body":{"modules/OrdersModule.html":{}}}],["typeormmodule.forfeature([product",{"_index":1636,"title":{},"body":{"modules/ProductsModule.html":{}}}],["typeormmodule.forfeature([users",{"_index":140,"title":{},"body":{"modules/AdminModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":718,"title":{},"body":{"modules/AppModule.html":{}}}],["types/bcrypt",{"_index":2013,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":2073,"title":{},"body":{"index.html":{}}}],["typically",{"_index":1146,"title":{},"body":{"interfaces/JwtPayload.html":{}}}],["ui",{"_index":2029,"title":{},"body":{"dependencies.html":{}}}],["unauthorized",{"_index":486,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["unauthorized'})@apiresponse({status",{"_index":442,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["unauthorizedexception",{"_index":777,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["unauthorizedexception('insufficient",{"_index":1135,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["unauthorizedexception('invalid",{"_index":820,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('user",{"_index":824,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["undefined",{"_index":191,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"classes/CreateOrderDto.html":{},"entities/Order.html":{},"controllers/OrdersController.html":{},"entities/Product.html":{},"classes/ProductQueryDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["undefined})@apiresponse({status",{"_index":461,"title":{},"body":{"controllers/AdminUserController.html":{},"controllers/AuthController.html":{},"controllers/OrdersController.html":{}}}],["undefined})@column('varchar",{"_index":1494,"title":{},"body":{"entities/Product.html":{}}}],["undefined})@isarray()@isstring({each",{"_index":964,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["undefined})@isarray()@isurl",{"_index":1734,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["undefined})@isarray()@validatenested({each",{"_index":842,"title":{},"body":{"classes/CreateOrderDto.html":{}}}],["undefined})@isenum(productcategory",{"_index":961,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["undefined})@isobject()@isoptional",{"_index":1001,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["undefined})@isoptional()@isstring",{"_index":545,"title":{},"body":{"classes/AdminUserQueryDto.html":{}}}],["undefined})@isstring()@isnotempty",{"_index":857,"title":{},"body":{"classes/CreateOrderDto.html":{}}}],["undefined})@isstring()@isoptional",{"_index":1583,"title":{},"body":{"classes/ProductQueryDto.html":{}}}],["underwear",{"_index":2049,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["unique",{"_index":1503,"title":{},"body":{"entities/Product.html":{},"entities/Roles.html":{},"entities/User.html":{},"entities/Users.html":{}}}],["unit",{"_index":2087,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":317,"title":{},"body":{"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/ProductsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["unlicensed",{"_index":2250,"title":{},"body":{"properties.html":{}}}],["up",{"_index":15,"title":{},"body":{"classes/AddDobToUsers1714389820000.html":{},"classes/CreateOrdersTables1714390000000.html":{}}}],["up(queryrunner",{"_index":27,"title":{},"body":{"classes/AddDobToUsers1714389820000.html":{},"classes/CreateOrdersTables1714390000000.html":{}}}],["update",{"_index":198,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/ProductsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["update(@param('id",{"_index":351,"title":{},"body":{"controllers/AdminProductsController.html":{},"controllers/OrdersController.html":{},"controllers/UsersController.html":{}}}],["update(id",{"_index":333,"title":{},"body":{"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/ProductsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updatebulkstatus",{"_index":150,"title":{},"body":{"controllers/AdminOrdersController.html":{},"injectables/OrdersService.html":{}}}],["updatebulkstatus(orderids",{"_index":194,"title":{},"body":{"controllers/AdminOrdersController.html":{},"injectables/OrdersService.html":{}}}],["updated",{"_index":203,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"entities/Product.html":{},"controllers/UsersController.html":{}}}],["updated'})@updatedatecolumn",{"_index":1532,"title":{},"body":{"entities/Product.html":{}}}],["updatedat",{"_index":61,"title":{},"body":{"entities/Address.html":{},"classes/CreateOrdersTables1714390000000.html":{},"entities/Order.html":{},"controllers/OrdersController.html":{},"entities/Product.html":{},"entities/User.html":{},"entities/Users.html":{}}}],["updatedatecolumn",{"_index":87,"title":{},"body":{"entities/Address.html":{},"entities/Order.html":{},"entities/Product.html":{},"entities/User.html":{},"entities/Users.html":{}}}],["updatedorders",{"_index":1415,"title":{},"body":{"injectables/OrdersService.html":{}}}],["updatedto",{"_index":464,"title":{},"body":{"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{}}}],["updatedto.role",{"_index":671,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["updateorderdto",{"_index":1277,"title":{"classes/UpdateOrderDto.html":{}},"body":{"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"classes/UpdateOrderDto.html":{},"coverage.html":{}}}],["updateorderdto.notes",{"_index":1404,"title":{},"body":{"injectables/OrdersService.html":{}}}],["updateorderdto.refundamount",{"_index":1405,"title":{},"body":{"injectables/OrdersService.html":{}}}],["updateorderdto.status",{"_index":1403,"title":{},"body":{"injectables/OrdersService.html":{}}}],["updateorderdto})@apiresponse({status",{"_index":1279,"title":{},"body":{"controllers/OrdersController.html":{}}}],["updateproductdto",{"_index":334,"title":{"classes/UpdateProductDto.html":{}},"body":{"controllers/AdminProductsController.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["updateproductdto})@apiresponse({status",{"_index":337,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["updateprofileimage",{"_index":1877,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateprofileimage(id",{"_index":1889,"title":{},"body":{"injectables/UsersService.html":{}}}],["updaterole",{"_index":435,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["updaterole(id",{"_index":467,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["updates",{"_index":336,"title":{},"body":{"controllers/AdminProductsController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"controllers/OrdersController.html":{},"index.html":{}}}],["updatestatus",{"_index":151,"title":{},"body":{"controllers/AdminOrdersController.html":{},"injectables/OrdersService.html":{}}}],["updatestatus(id",{"_index":207,"title":{},"body":{"controllers/AdminOrdersController.html":{},"injectables/OrdersService.html":{}}}],["updateuserdto",{"_index":496,"title":{"classes/UpdateUserDto.html":{}},"body":{"controllers/AdminUserController.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updateuserrole",{"_index":587,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["updateuserrole(id",{"_index":602,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["updating",{"_index":377,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{}}}],["url",{"_index":977,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateProductDto.html":{}}}],["urls",{"_index":1507,"title":{},"body":{"entities/Product.html":{},"classes/UpdateProductDto.html":{}}}],["use",{"_index":1173,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"license.html":{}}}],["usefactory",{"_index":719,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["useguards",{"_index":218,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"controllers/OrdersController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthguard",{"_index":239,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"controllers/OrdersController.html":{},"controllers/UsersController.html":{}}}],["user",{"_index":62,"title":{"entities/User.html":{}},"body":{"entities/Address.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Order.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"entities/Users.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user's",{"_index":389,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDto.html":{},"controllers/OrdersController.html":{}}}],["user'})@apiresponse({status",{"_index":465,"title":{},"body":{"controllers/AdminUserController.html":{},"controllers/UsersController.html":{}}}],["user.addresses",{"_index":99,"title":{},"body":{"entities/Address.html":{}}}],["user.addresses)@joincolumn({name",{"_index":90,"title":{},"body":{"entities/Address.html":{}}}],["user.controller",{"_index":132,"title":{},"body":{"modules/AdminModule.html":{}}}],["user.controller.ts",{"_index":427,"title":{},"body":{"controllers/AdminUserController.html":{},"coverage.html":{}}}],["user.controller.ts:110",{"_index":463,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["user.controller.ts:137",{"_index":470,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["user.controller.ts:46",{"_index":443,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["user.controller.ts:53",{"_index":455,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["user.controller.ts:68",{"_index":451,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["user.controller.ts:84",{"_index":466,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["user.decorator",{"_index":1286,"title":{},"body":{"controllers/OrdersController.html":{}}}],["user.decorator.ts",{"_index":1985,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":475,"title":{},"body":{"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":374,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:18",{"_index":1046,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:21",{"_index":394,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["user.dto.ts:27",{"_index":1049,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:30",{"_index":405,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["user.dto.ts:35",{"_index":1042,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:40",{"_index":388,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["user.dto.ts:43",{"_index":1044,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:49",{"_index":392,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["user.dto.ts:55",{"_index":1056,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:58",{"_index":407,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["user.dto.ts:63",{"_index":1051,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:67",{"_index":409,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["user.dto.ts:72",{"_index":1059,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:76",{"_index":397,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["user.dto.ts:85",{"_index":399,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["user.dto.ts:94",{"_index":403,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["user.email",{"_index":633,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/AuthService.html":{},"injectables/OrdersService.html":{}}}],["user.firstname",{"_index":631,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["user.id",{"_index":831,"title":{},"body":{"injectables/AuthService.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["user.isactive",{"_index":676,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["user.isemailverified",{"_index":694,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["user.lastloginat",{"_index":827,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["user.lastname",{"_index":632,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["user.orders",{"_index":1210,"title":{},"body":{"entities/Order.html":{}}}],["user.orders)@joincolumn({name",{"_index":1202,"title":{},"body":{"entities/Order.html":{}}}],["user.password",{"_index":823,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.profileimage",{"_index":1911,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.roles",{"_index":674,"title":{},"body":{"injectables/AdminUserService.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{}}}],["user.roles.length",{"_index":1692,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user.roles.map(role",{"_index":1695,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user.roles[0]?.name",{"_index":832,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.service",{"_index":134,"title":{},"body":{"modules/AdminModule.html":{},"controllers/AdminUserController.html":{}}}],["user.service.ts",{"_index":581,"title":{},"body":{"injectables/AdminUserService.html":{},"coverage.html":{}}}],["user.service.ts:153",{"_index":595,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["user.service.ts:171",{"_index":601,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["user.service.ts:20",{"_index":592,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["user.service.ts:200",{"_index":600,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["user.service.ts:206",{"_index":597,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["user.service.ts:247",{"_index":596,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["user.service.ts:259",{"_index":598,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["user.service.ts:270",{"_index":603,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["user.service.ts:33",{"_index":594,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["user@example.com",{"_index":1181,"title":{},"body":{"classes/LoginDto.html":{}}}],["user@example.com'})@isemail",{"_index":1175,"title":{},"body":{"classes/LoginDto.html":{}}}],["user\\'s",{"_index":1299,"title":{},"body":{"controllers/OrdersController.html":{}}}],["userid",{"_index":63,"title":{},"body":{"entities/Address.html":{},"controllers/AdminOrdersController.html":{},"classes/CreateOrdersTables1714390000000.html":{},"entities/Order.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["username",{"_index":725,"title":{},"body":{"modules/AppModule.html":{}}}],["userquerydto",{"_index":1792,"title":{"classes/UserQueryDto.html":{}},"body":{"classes/UserQueryDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["userrepository",{"_index":593,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/OrdersService.html":{}}}],["userroles",{"_index":1694,"title":{},"body":{"guards/RolesGuard.html":{}}}],["userroles.includes(role",{"_index":1699,"title":{},"body":{"guards/RolesGuard.html":{}}}],["users",{"_index":40,"title":{"entities/Users.html":{}},"body":{"classes/AddDobToUsers1714389820000.html":{},"entities/Address.html":{},"modules/AdminModule.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"entities/Order.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"entities/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users\"(\"id",{"_index":909,"title":{},"body":{"classes/CreateOrdersTables1714390000000.html":{}}}],["users'})@apiquery({name",{"_index":1848,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":1870,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.entity",{"_index":97,"title":{},"body":{"entities/Address.html":{}}}],["users.service",{"_index":1857,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/entities/address.entity",{"_index":1336,"title":{},"body":{"modules/OrdersModule.html":{},"injectables/OrdersService.html":{}}}],["users/entities/user.entity",{"_index":1287,"title":{},"body":{"controllers/OrdersController.html":{}}}],["users/entities/users.entity",{"_index":1206,"title":{},"body":{"entities/Order.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{}}}],["users/enums/roles.enum",{"_index":228,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"classes/AdminUserQueryDto.html":{},"controllers/OrdersController.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"guards/RolesGuard.html":{}}}],["users/users.module",{"_index":714,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":1843,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":707,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":811,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["usersservice",{"_index":1856,"title":{"injectables/UsersService.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":1164,"title":{},"body":{"injectables/JwtStrategy.html":{},"index.html":{}}}],["uuid",{"_index":92,"title":{},"body":{"entities/Address.html":{},"controllers/AdminUserController.html":{},"classes/CreateOrdersTables1714390000000.html":{},"entities/Order.html":{},"entities/OrderItem.html":{}}}],["uuid'})@apibody({schema",{"_index":460,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["uuid_generate_v4",{"_index":892,"title":{},"body":{"classes/CreateOrdersTables1714390000000.html":{}}}],["valid",{"_index":1055,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{}}}],["validate",{"_index":616,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":1155,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validated",{"_index":1158,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validatenested",{"_index":862,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/OrderItemDto.html":{}}}],["validates",{"_index":1151,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validation",{"_index":424,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"injectables/JwtAuthGuard.html":{},"classes/LoginDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"classes/ProductQueryDto.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["validationerror",{"_index":1917,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["validationerroritem",{"_index":1915,"title":{"interfaces/ValidationErrorItem.html":{}},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"coverage.html":{}}}],["validationerrors",{"_index":1922,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["validationexceptionfilter",{"_index":1919,"title":{"classes/ValidationExceptionFilter.html":{}},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"coverage.html":{}}}],["validator",{"_index":416,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/OrderItemDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"classes/ProductQueryDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"dependencies.html":{}}}],["validsortfields",{"_index":641,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["validsortfields.includes(sortby",{"_index":644,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["validsortorder",{"_index":642,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["validsortorder.includes(sortorder.tolowercase",{"_index":646,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["value",{"_index":193,"title":{},"body":{"controllers/AdminOrdersController.html":{},"classes/AdminUserQueryDto.html":{},"classes/CreateProductDto.html":{},"classes/HttpExceptionFilter.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"classes/ProductQueryDto.html":{},"injectables/ProductsService.html":{},"classes/UserQueryDto.html":{},"injectables/UsersService.html":{},"classes/ValidationExceptionFilter.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["varchar",{"_index":67,"title":{},"body":{"entities/Address.html":{},"classes/CreateOrdersTables1714390000000.html":{},"entities/Users.html":{}}}],["variable",{"_index":1986,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1168,"title":{"miscellaneous/variables.html":{}},"body":{"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["verification",{"_index":398,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AdminUserService.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{}}}],["verifiedusers",{"_index":680,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["version",{"_index":2248,"title":{},"body":{"properties.html":{}}}],["video",{"_index":2137,"title":{},"body":{"index.html":{}}}],["view",{"_index":244,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["view)'})@apiquery({name",{"_index":162,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["viewcount",{"_index":1487,"title":{},"body":{"entities/Product.html":{}}}],["viewed",{"_index":1535,"title":{},"body":{"entities/Product.html":{}}}],["visit",{"_index":2127,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":2140,"title":{},"body":{"index.html":{}}}],["void",{"_index":1077,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/ValidationExceptionFilter.html":{}}}],["warranties",{"_index":2220,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":2216,"title":{},"body":{"license.html":{}}}],["wash",{"_index":883,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/OrderItemDto.html":{},"classes/UpdateProductDto.html":{}}}],["watch",{"_index":2081,"title":{},"body":{"index.html":{}}}],["wear",{"_index":1008,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["wear.'})@isstring()@isnotempty",{"_index":975,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["website",{"_index":2173,"title":{},"body":{"index.html":{}}}],["week",{"_index":186,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["weight",{"_index":1023,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["welcome",{"_index":750,"title":{},"body":{"injectables/AppService.html":{}}}],["where('order.createdat",{"_index":1440,"title":{},"body":{"injectables/OrdersService.html":{}}}],["where.createdat",{"_index":1394,"title":{},"body":{"injectables/OrdersService.html":{}}}],["where.status",{"_index":1392,"title":{},"body":{"injectables/OrdersService.html":{}}}],["where.userid",{"_index":1393,"title":{},"body":{"injectables/OrdersService.html":{}}}],["wherecondition",{"_index":1905,"title":{},"body":{"injectables/UsersService.html":{}}}],["whether",{"_index":312,"title":{},"body":{"controllers/AdminProductsController.html":{},"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/UpdateProductDto.html":{},"license.html":{}}}],["white",{"_index":1018,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["without",{"_index":2193,"title":{},"body":{"license.html":{}}}],["working",{"_index":2126,"title":{},"body":{"index.html":{}}}],["wrapping",{"_index":851,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{}}}],["x",{"_index":2152,"title":{},"body":{"index.html":{}}}],["xl",{"_index":1015,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["xs",{"_index":1012,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["xxl",{"_index":1016,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["yes",{"_index":171,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/UsersController.html":{}}}],["you'd",{"_index":2165,"title":{},"body":{"index.html":{}}}],["you're",{"_index":2092,"title":{},"body":{"index.html":{}}}],["yyyy",{"_index":1036,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z0",{"_index":1935,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["za",{"_index":1934,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["zip",{"_index":1772,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["zoom",{"_index":116,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/OrdersModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AddDobToUsers1714389820000.html":{"url":"classes/AddDobToUsers1714389820000.html","title":"class - AddDobToUsers1714389820000","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddDobToUsers1714389820000\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/migrations/1714389820000-AddDobToUsers.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                        \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/migrations/1714389820000-AddDobToUsers.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                        \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/migrations/1714389820000-AddDobToUsers.ts:4\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class AddDobToUsers1714389820000 implements MigrationInterface {\n  public async up(queryRunner: QueryRunner): Promise {\n    // First, add the column as nullable\n    await queryRunner.query(`\n      ALTER TABLE \"users\" \n      ADD COLUMN \"dob\" date NULL\n    `);\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(`\n      ALTER TABLE \"users\" \n      DROP COLUMN \"dob\"\n    `);\n  }\n} \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Address.html":{"url":"entities/Address.html","title":"entity - Address","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Address\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/address.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                city\n                            \n                            \n                                    \n                                country\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                isDefault\n                            \n                            \n                                    \n                                label\n                            \n                            \n                                    \n                                postalCode\n                            \n                            \n                                    \n                                state\n                            \n                            \n                                    \n                                street\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    \n                                user\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        city\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 100})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/address.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 100})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/address.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/address.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/address.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isDefault\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'boolean', default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/address.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        label\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/address.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        postalCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 20})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/address.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 100})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/address.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        street\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/address.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/address.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Users\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.addresses)@JoinColumn({name: 'userId'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/address.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'uuid'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/address.entity.ts:39\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  ManyToOne,\n  CreateDateColumn,\n  UpdateDateColumn,\n  JoinColumn,\n} from 'typeorm';\nimport { Users } from './users.entity';\n\n@Entity('addresses')\nexport class Address {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({ type: 'varchar', length: 255 })\n  street: string;\n\n  @Column({ type: 'varchar', length: 100 })\n  city: string;\n\n  @Column({ type: 'varchar', length: 100 })\n  state: string;\n\n  @Column({ type: 'varchar', length: 20 })\n  postalCode: string;\n\n  @Column({ type: 'varchar', length: 100 })\n  country: string;\n\n  @Column({ type: 'boolean', default: false })\n  isDefault: boolean;\n\n  @Column({ type: 'varchar', length: 255, nullable: true })\n  label: string;\n\n  @Column({ type: 'uuid' })\n  userId: string;\n\n  @ManyToOne(() => Users, user => user.addresses)\n  @JoinColumn({ name: 'userId' })\n  user: Users;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n} \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AdminModule.html":{"url":"modules/AdminModule.html","title":"module - AdminModule","body":"\n                   \n\n\n\n\n    Modules\n    AdminModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AdminModule\n\n\n\ncluster_AdminModule_imports\n\n\n\ncluster_AdminModule_exports\n\n\n\ncluster_AdminModule_providers\n\n\n\n\nOrdersModule\n\nOrdersModule\n\n\n\nAdminModule\n\nAdminModule\n\nAdminModule -->\n\nOrdersModule->AdminModule\n\n\n\n\n\nProductsModule\n\nProductsModule\n\nAdminModule -->\n\nProductsModule->AdminModule\n\n\n\n\n\nAdminUserService \n\nAdminUserService \n\nAdminUserService  -->\n\nAdminModule->AdminUserService \n\n\n\n\n\nAdminUserService\n\nAdminUserService\n\nAdminModule -->\n\nAdminUserService->AdminModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/admin/admin.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AdminUserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AdminUserController\n                        \n                        \n                            AdminProductsController\n                        \n                        \n                            AdminOrdersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            OrdersModule\n                        \n                        \n                            ProductsModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AdminUserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Users } from 'src/users/entities/users.entity';\nimport { Roles } from 'src/users/entities/roles.entity';\nimport { AdminUserController } from './controllers/admin-user.controller';\nimport { AdminUserService } from './services/admin-user.service';\nimport { ProductsModule } from '../products/products.module';\nimport { OrdersModule } from '../orders/orders.module';\nimport { AdminProductsController } from '../products/admin-products.controller';\nimport { AdminOrdersController } from './controllers/admin-orders.controller';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Users, Roles]),\n    ProductsModule,\n    OrdersModule,\n  ],\n  controllers: [AdminUserController, AdminProductsController, AdminOrdersController],\n  providers: [AdminUserService],\n  exports: [AdminUserService],\n})\nexport class AdminModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AdminOrdersController.html":{"url":"controllers/AdminOrdersController.html","title":"controller - AdminOrdersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AdminOrdersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/controllers/admin-orders.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                admin/orders\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                getCustomerAnalytics\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                getProductAnalytics\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                getRevenueAnalytics\n                            \n                            \n                                    \n                                    \n                                    \n                                updateBulkStatus\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                updateStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(page?: number, limit?: number, status?: OrderStatus, userId?: string, startDate?: Date, endDate?: Date)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Get all orders (admin view)'})@ApiQuery({name: 'page', required: false, type: Number})@ApiQuery({name: 'limit', required: false, type: Number})@ApiQuery({name: 'status', required: false, enum: OrderStatus})@ApiQuery({name: 'userId', required: false, type: String})@ApiQuery({name: 'startDate', required: false, type: Date})@ApiQuery({name: 'endDate', required: false, type: Date})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/controllers/admin-orders.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                status\n                                            \n                                                            OrderStatus\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                startDate\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                endDate\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        getCustomerAnalytics\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCustomerAnalytics(startDate?: Date, endDate?: Date)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('analytics/customer')@ApiOperation({summary: 'Get customer order analytics'})@ApiQuery({name: 'startDate', required: false, type: Date})@ApiQuery({name: 'endDate', required: false, type: Date})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/controllers/admin-orders.controller.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                startDate\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                endDate\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        getProductAnalytics\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProductAnalytics(startDate?: Date, endDate?: Date)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('analytics/product')@ApiOperation({summary: 'Get product performance analytics'})@ApiQuery({name: 'startDate', required: false, type: Date})@ApiQuery({name: 'endDate', required: false, type: Date})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/controllers/admin-orders.controller.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                startDate\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                endDate\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        getRevenueAnalytics\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRevenueAnalytics(startDate: Date, endDate: Date, interval: \"day\" | \"week\" | \"month\")\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('analytics/revenue')@ApiOperation({summary: 'Get detailed revenue analytics'})@ApiQuery({name: 'startDate', required: true, type: Date})@ApiQuery({name: 'endDate', required: true, type: Date})@ApiQuery({name: 'interval', required: false, enum: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/controllers/admin-orders.controller.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                startDate\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                endDate\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                interval\n                                            \n                                                        \"day\" | \"week\" | \"month\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'day'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        updateBulkStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateBulkStatus(orderIds: string[], status: OrderStatus, adminNotes?: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('bulk-status')@ApiOperation({summary: 'Update multiple orders status (admin only)'})@ApiResponse({status: 200, description: 'Orders status updated successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/controllers/admin-orders.controller.ts:87\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                orderIds\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                status\n                                            \n                                                            OrderStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                adminNotes\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(id: string, status: OrderStatus, adminNotes?: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/status')@ApiOperation({summary: 'Update order status (admin only)'})@ApiResponse({status: 200, description: 'Order status updated successfully'})@ApiResponse({status: 404, description: 'Order not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/controllers/admin-orders.controller.ts:76\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                status\n                                            \n                                                            OrderStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                adminNotes\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Query, UseGuards } from '@nestjs/common';\nimport { OrdersService } from '../../orders/orders.service';\nimport { JwtAuthGuard } from '../../auth/guards/jwt-auth.guard';\nimport { RolesGuard } from '../../auth/guards/roles.guard';\nimport { Roles } from '../../auth/decorators/roles.decorator';\nimport { Role } from '../../users/enums/roles.enum';\nimport { OrderStatus } from '../../orders/enums/order-status.enum';\nimport { ApiTags, ApiOperation, ApiResponse, ApiQuery, ApiBearerAuth } from '@nestjs/swagger';\n\n@ApiTags('G. Admin - Orders')\n@ApiBearerAuth()\n@Controller('admin/orders')\n@UseGuards(JwtAuthGuard, RolesGuard)\n@Roles(Role.ADMIN)\nexport class AdminOrdersController {\n  constructor(private readonly ordersService: OrdersService) {}\n\n  @Get()\n  @ApiOperation({ summary: 'Get all orders (admin view)' })\n  @ApiQuery({ name: 'page', required: false, type: Number })\n  @ApiQuery({ name: 'limit', required: false, type: Number })\n  @ApiQuery({ name: 'status', required: false, enum: OrderStatus })\n  @ApiQuery({ name: 'userId', required: false, type: String })\n  @ApiQuery({ name: 'startDate', required: false, type: Date })\n  @ApiQuery({ name: 'endDate', required: false, type: Date })\n  findAll(\n    @Query('page') page?: number,\n    @Query('limit') limit?: number,\n    @Query('status') status?: OrderStatus,\n    @Query('userId') userId?: string,\n    @Query('startDate') startDate?: Date,\n    @Query('endDate') endDate?: Date,\n  ) {\n    return this.ordersService.findAll(page, limit, status, startDate, endDate, userId);\n  }\n\n  @Get('analytics/revenue')\n  @ApiOperation({ summary: 'Get detailed revenue analytics' })\n  @ApiQuery({ name: 'startDate', required: true, type: Date })\n  @ApiQuery({ name: 'endDate', required: true, type: Date })\n  @ApiQuery({ name: 'interval', required: false, enum: ['day', 'week', 'month'] })\n  getRevenueAnalytics(\n    @Query('startDate') startDate: Date,\n    @Query('endDate') endDate: Date,\n    @Query('interval') interval: 'day' | 'week' | 'month' = 'day',\n  ) {\n    return this.ordersService.getRevenueAnalytics(startDate, endDate, interval);\n  }\n\n  @Get('analytics/customer')\n  @ApiOperation({ summary: 'Get customer order analytics' })\n  @ApiQuery({ name: 'startDate', required: false, type: Date })\n  @ApiQuery({ name: 'endDate', required: false, type: Date })\n  getCustomerAnalytics(\n    @Query('startDate') startDate?: Date,\n    @Query('endDate') endDate?: Date,\n  ) {\n    return this.ordersService.getCustomerAnalytics(startDate, endDate);\n  }\n\n  @Get('analytics/product')\n  @ApiOperation({ summary: 'Get product performance analytics' })\n  @ApiQuery({ name: 'startDate', required: false, type: Date })\n  @ApiQuery({ name: 'endDate', required: false, type: Date })\n  getProductAnalytics(\n    @Query('startDate') startDate?: Date,\n    @Query('endDate') endDate?: Date,\n  ) {\n    return this.ordersService.getProductAnalytics(startDate, endDate);\n  }\n\n  @Patch(':id/status')\n  @ApiOperation({ summary: 'Update order status (admin only)' })\n  @ApiResponse({ status: 200, description: 'Order status updated successfully' })\n  @ApiResponse({ status: 404, description: 'Order not found' })\n  updateStatus(\n    @Param('id') id: string,\n    @Body('status') status: OrderStatus,\n    @Body('adminNotes') adminNotes?: string,\n  ) {\n    return this.ordersService.updateStatus(id, status, adminNotes);\n  }\n\n  @Patch('bulk-status')\n  @ApiOperation({ summary: 'Update multiple orders status (admin only)' })\n  @ApiResponse({ status: 200, description: 'Orders status updated successfully' })\n  updateBulkStatus(\n    @Body('orderIds') orderIds: string[],\n    @Body('status') status: OrderStatus,\n    @Body('adminNotes') adminNotes?: string,\n  ) {\n    return this.ordersService.updateBulkStatus(orderIds, status, adminNotes);\n  }\n} \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AdminProductsController.html":{"url":"controllers/AdminProductsController.html","title":"controller - AdminProductsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AdminProductsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/admin-products.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                admin/products\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                getAnalytics\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                toggleBestSeller\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                toggleFeatured\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                toggleNewArrival\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                toggleOnSale\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createProductDto: CreateProductDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Create a new product', description: 'Creates a new product. (Admin only)'})@ApiBody({type: CreateProductDto})@ApiResponse({status: 201, description: 'Product created successfully'})@ApiResponse({status: 403, description: 'Forbidden - Admin access required'})\n                \n            \n\n                    \n                        \n                            Defined in src/products/admin-products.controller.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createProductDto\n                                            \n                                                            CreateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        getAnalytics\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAnalytics()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('analytics')@ApiOperation({summary: 'Get product analytics', description: 'Retrieves analytics data for all products'})@ApiResponse({status: 200, description: 'Analytics retrieved successfully'})@ApiResponse({status: 403, description: 'Forbidden - Admin access required'})\n                \n            \n\n                    \n                        \n                            Defined in src/products/admin-products.controller.ts:91\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOperation({summary: 'Delete a product', description: 'Deletes an existing product. (Admin only)'})@ApiResponse({status: 200, description: 'Product deleted successfully'})@ApiResponse({status: 403, description: 'Forbidden - Admin access required'})@ApiResponse({status: 404, description: 'Product not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/products/admin-products.controller.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        toggleBestSeller\n                        \n                    \n                \n            \n            \n                \n                        \n                    toggleBestSeller(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/toggle-best-seller')@ApiOperation({summary: 'Toggle best seller status', description: 'Toggles whether a product is marked as best seller'})@ApiResponse({status: 200, description: 'Best seller status toggled successfully'})@ApiResponse({status: 403, description: 'Forbidden - Admin access required'})@ApiResponse({status: 404, description: 'Product not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/products/admin-products.controller.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        toggleFeatured\n                        \n                    \n                \n            \n            \n                \n                        \n                    toggleFeatured(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/toggle-featured')@ApiOperation({summary: 'Toggle featured status', description: 'Toggles whether a product is featured or not'})@ApiResponse({status: 200, description: 'Featured status toggled successfully'})@ApiResponse({status: 403, description: 'Forbidden - Admin access required'})@ApiResponse({status: 404, description: 'Product not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/products/admin-products.controller.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        toggleNewArrival\n                        \n                    \n                \n            \n            \n                \n                        \n                    toggleNewArrival(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/toggle-new-arrival')@ApiOperation({summary: 'Toggle new arrival status', description: 'Toggles whether a product is marked as new arrival'})@ApiResponse({status: 200, description: 'New arrival status toggled successfully'})@ApiResponse({status: 403, description: 'Forbidden - Admin access required'})@ApiResponse({status: 404, description: 'Product not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/products/admin-products.controller.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        toggleOnSale\n                        \n                    \n                \n            \n            \n                \n                        \n                    toggleOnSale(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/toggle-on-sale')@ApiOperation({summary: 'Toggle on sale status', description: 'Toggles whether a product is on sale'})@ApiResponse({status: 200, description: 'On sale status toggled successfully'})@ApiResponse({status: 403, description: 'Forbidden - Admin access required'})@ApiResponse({status: 404, description: 'Product not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/products/admin-products.controller.ts:82\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateProductDto: UpdateProductDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@ApiOperation({summary: 'Update a product', description: 'Updates an existing product. (Admin only)'})@ApiBody({type: UpdateProductDto})@ApiResponse({status: 200, description: 'Product updated successfully'})@ApiResponse({status: 403, description: 'Forbidden - Admin access required'})@ApiResponse({status: 404, description: 'Product not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/products/admin-products.controller.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateProductDto\n                                            \n                                                            UpdateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Patch, Delete, Body, Param, UseGuards, Get } from '@nestjs/common';\nimport { ProductsService } from './products.service';\nimport { CreateProductDto } from './dto/create-product.dto';\nimport { UpdateProductDto } from './dto/update-product.dto';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport { RolesGuard } from '../auth/guards/roles.guard';\nimport { Roles } from '../auth/decorators/roles.decorator';\nimport { Role } from '../users/enums/roles.enum';\nimport { ApiTags, ApiBearerAuth, ApiOperation, ApiResponse, ApiBody } from '@nestjs/swagger';\n\n@ApiTags('F. Admin - Products')\n@ApiBearerAuth()\n@Controller('admin/products')\n@UseGuards(JwtAuthGuard, RolesGuard)\n@Roles(Role.ADMIN)\nexport class AdminProductsController {\n  constructor(private readonly productsService: ProductsService) {}\n\n  @Post()\n  @ApiOperation({ summary: 'Create a new product', description: 'Creates a new product. (Admin only)' })\n  @ApiBody({ type: CreateProductDto })\n  @ApiResponse({ status: 201, description: 'Product created successfully' })\n  @ApiResponse({ status: 403, description: 'Forbidden - Admin access required' })\n  create(@Body() createProductDto: CreateProductDto) {\n    return this.productsService.create(createProductDto);\n  }\n\n  @Patch(':id')\n  @ApiOperation({ summary: 'Update a product', description: 'Updates an existing product. (Admin only)' })\n  @ApiBody({ type: UpdateProductDto })\n  @ApiResponse({ status: 200, description: 'Product updated successfully' })\n  @ApiResponse({ status: 403, description: 'Forbidden - Admin access required' })\n  @ApiResponse({ status: 404, description: 'Product not found' })\n  update(@Param('id') id: string, @Body() updateProductDto: UpdateProductDto) {\n    return this.productsService.update(id, updateProductDto);\n  }\n\n  @Delete(':id')\n  @ApiOperation({ summary: 'Delete a product', description: 'Deletes an existing product. (Admin only)' })\n  @ApiResponse({ status: 200, description: 'Product deleted successfully' })\n  @ApiResponse({ status: 403, description: 'Forbidden - Admin access required' })\n  @ApiResponse({ status: 404, description: 'Product not found' })\n  remove(@Param('id') id: string) {\n    return this.productsService.remove(id);\n  }\n\n  @Patch(':id/toggle-featured')\n  @ApiOperation({ summary: 'Toggle featured status', description: 'Toggles whether a product is featured or not' })\n  @ApiResponse({ status: 200, description: 'Featured status toggled successfully' })\n  @ApiResponse({ status: 403, description: 'Forbidden - Admin access required' })\n  @ApiResponse({ status: 404, description: 'Product not found' })\n  async toggleFeatured(@Param('id') id: string) {\n    const product = await this.productsService.findOne(id);\n    return this.productsService.update(id, { isFeatured: !product.isFeatured });\n  }\n\n  @Patch(':id/toggle-new-arrival')\n  @ApiOperation({ summary: 'Toggle new arrival status', description: 'Toggles whether a product is marked as new arrival' })\n  @ApiResponse({ status: 200, description: 'New arrival status toggled successfully' })\n  @ApiResponse({ status: 403, description: 'Forbidden - Admin access required' })\n  @ApiResponse({ status: 404, description: 'Product not found' })\n  async toggleNewArrival(@Param('id') id: string) {\n    const product = await this.productsService.findOne(id);\n    return this.productsService.update(id, { isNewArrival: !product.isNewArrival });\n  }\n\n  @Patch(':id/toggle-best-seller')\n  @ApiOperation({ summary: 'Toggle best seller status', description: 'Toggles whether a product is marked as best seller' })\n  @ApiResponse({ status: 200, description: 'Best seller status toggled successfully' })\n  @ApiResponse({ status: 403, description: 'Forbidden - Admin access required' })\n  @ApiResponse({ status: 404, description: 'Product not found' })\n  async toggleBestSeller(@Param('id') id: string) {\n    const product = await this.productsService.findOne(id);\n    return this.productsService.update(id, { isBestSeller: !product.isBestSeller });\n  }\n\n  @Patch(':id/toggle-on-sale')\n  @ApiOperation({ summary: 'Toggle on sale status', description: 'Toggles whether a product is on sale' })\n  @ApiResponse({ status: 200, description: 'On sale status toggled successfully' })\n  @ApiResponse({ status: 403, description: 'Forbidden - Admin access required' })\n  @ApiResponse({ status: 404, description: 'Product not found' })\n  async toggleOnSale(@Param('id') id: string) {\n    const product = await this.productsService.findOne(id);\n    return this.productsService.update(id, { isOnSale: !product.isOnSale });\n  }\n\n  @Get('analytics')\n  @ApiOperation({ summary: 'Get product analytics', description: 'Retrieves analytics data for all products' })\n  @ApiResponse({ status: 200, description: 'Analytics retrieved successfully' })\n  @ApiResponse({ status: 403, description: 'Forbidden - Admin access required' })\n  getAnalytics() {\n    return this.productsService.getProductStats();\n  }\n} \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AdminUpdateUserDto.html":{"url":"classes/AdminUpdateUserDto.html","title":"class - AdminUpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AdminUpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/dto/admin-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object for updating user information by admin.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                dob\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                isActive\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                isEmailVerified\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                isPhoneVerified\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                phone\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        dob\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User date of birth'})@IsOptional()@Type(undefined)@IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/admin-user.dto.ts:40\n                        \n                    \n\n            \n                \n                    User's date of birth.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User email address'})@IsOptional()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/admin-user.dto.ts:49\n                        \n                    \n\n            \n                \n                    User's email address.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User first name'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/admin-user.dto.ts:21\n                        \n                    \n\n            \n                \n                    User's first name.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User active status'})@IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/admin-user.dto.ts:76\n                        \n                    \n\n            \n                \n                    User's active status.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        isEmailVerified\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User email verification status'})@IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/admin-user.dto.ts:85\n                        \n                    \n\n            \n                \n                    User's email verification status.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        isPhoneVerified\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User phone verification status', example: true, required: false})@IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/admin-user.dto.ts:94\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User last name'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/admin-user.dto.ts:30\n                        \n                    \n\n            \n                \n                    User's last name.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User phone number'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/admin-user.dto.ts:58\n                        \n                    \n\n            \n                \n                    User's phone number.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User role', enum: Role})@IsOptional()@IsEnum(Role)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/admin-user.dto.ts:67\n                        \n                    \n\n            \n                \n                    User's role.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsBoolean, IsEmail, IsEnum, IsOptional, IsString, IsUUID } from 'class-validator';\nimport { Role } from 'src/users/enums/roles.enum';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\nimport { IsDate } from 'class-validator';\n\n/**\n * Data Transfer Object for updating user information by admin.\n * @class AdminUpdateUserDto\n * @description Defines the structure and validation rules for admin user updates.\n */\nexport class AdminUpdateUserDto {\n  /**\n   * User's first name.\n   * @type {string}\n   */\n  @ApiPropertyOptional({ description: 'User first name' })\n  @IsOptional()\n  @IsString()\n  firstName?: string;\n\n  /**\n   * User's last name.\n   * @type {string}\n   */\n  @ApiPropertyOptional({ description: 'User last name' })\n  @IsOptional()\n  @IsString()\n  lastName?: string;\n\n  /**\n   * User's date of birth.\n   * @type {Date}\n   */\n  @ApiPropertyOptional({ description: 'User date of birth' })\n  @IsOptional()\n  @Type(() => Date)\n  @IsDate()\n  dob?: Date;\n\n  /**\n   * User's email address.\n   * @type {string}\n   */\n  @ApiPropertyOptional({ description: 'User email address' })\n  @IsOptional()\n  @IsEmail()\n  email?: string;\n\n  /**\n   * User's phone number.\n   * @type {string}\n   */\n  @ApiPropertyOptional({ description: 'User phone number' })\n  @IsOptional()\n  @IsString()\n  phone?: string;\n\n  /**\n   * User's role.\n   * @type {Role}\n   */\n  @ApiPropertyOptional({ description: 'User role', enum: Role })\n  @IsOptional()\n  @IsEnum(Role)\n  role?: Role;\n\n  /**\n   * User's active status.\n   * @type {boolean}\n   */\n  @ApiPropertyOptional({ description: 'User active status' })\n  @IsOptional()\n  @IsBoolean()\n  isActive?: boolean;\n\n  /**\n   * User's email verification status.\n   * @type {boolean}\n   */\n  @ApiPropertyOptional({ description: 'User email verification status' })\n  @IsOptional()\n  @IsBoolean()\n  isEmailVerified?: boolean;\n\n  @ApiProperty({\n    description: 'User phone verification status',\n    example: true,\n    required: false\n  })\n  @IsOptional()\n  @IsBoolean()\n  isPhoneVerified?: boolean;\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AdminUserController.html":{"url":"controllers/AdminUserController.html","title":"controller - AdminUserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AdminUserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/controllers/admin-user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                admin/users\n            \n\n\n            \n                Description\n            \n            \n                Controller handling admin user management operations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getStats\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                setStatus\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                update\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                updateRole\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(queryDto: AdminUserQueryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Get all users with filtering and pagination'})@ApiQuery({name: 'page', required: false, type: Number})@ApiQuery({name: 'limit', required: false, type: Number})@ApiResponse({status: undefined, description: 'List of users retrieved successfully'})@ApiResponse({status: undefined, description: 'Unauthorized'})@ApiResponse({status: undefined, description: 'Forbidden'})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/controllers/admin-user.controller.ts:46\n                        \n                    \n\n\n            \n                \n                        Retrieves all users with optional filtering and pagination.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryDto\n                                            \n                                                            AdminUserQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Promise> - Users and pagination metadata\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({summary: 'Get a user by ID'})@ApiResponse({status: undefined, description: 'User retrieved successfully'})@ApiResponse({status: undefined, description: 'Unauthorized'})@ApiResponse({status: undefined, description: 'Forbidden'})@ApiResponse({status: undefined, description: 'User not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/controllers/admin-user.controller.ts:68\n                        \n                    \n\n\n            \n                \n                        Retrieves a user by ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser ID\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Promise - The found user\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStats()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('stats')@ApiOperation({summary: 'Get user statistics'})@ApiResponse({status: undefined, description: 'User statistics retrieved successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/controllers/admin-user.controller.ts:53\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        setStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    setStatus(id: string, isActive: boolean)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/status')@ApiOperation({summary: 'Set user active status'})@ApiParam({name: 'id', description: 'User ID', type: 'string', format: 'uuid'})@ApiBody({schema: undefined})@ApiResponse({status: undefined, description: 'User status updated successfully'})@ApiResponse({status: undefined, description: 'User not found'})@HttpCode(HttpStatus.OK)\n                \n            \n\n                    \n                        \n                            Defined in src/admin/controllers/admin-user.controller.ts:110\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                isActive\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateDto: AdminUpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@ApiOperation({summary: 'Update a user'})@ApiResponse({status: undefined, description: 'User updated successfully'})@ApiResponse({status: undefined, description: 'Unauthorized'})@ApiResponse({status: undefined, description: 'Forbidden'})@ApiResponse({status: undefined, description: 'User not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/controllers/admin-user.controller.ts:84\n                        \n                    \n\n\n            \n                \n                        Updates a user's information.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser ID\n\n\n                                            \n                                        \n                                        \n                                                updateDto\n                                            \n                                                            AdminUpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Promise - The updated user\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        updateRole\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateRole(id: string, role: Role)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/role')@ApiOperation({summary: 'Update user role'})@ApiParam({name: 'id', description: 'User ID', type: 'string', format: 'uuid'})@ApiBody({schema: undefined})@ApiResponse({status: undefined, description: 'User role updated successfully'})@ApiResponse({status: undefined, description: 'User not found'})@HttpCode(HttpStatus.OK)\n                \n            \n\n                    \n                        \n                            Defined in src/admin/controllers/admin-user.controller.ts:137\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                role\n                                            \n                                                            Role\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        // admin-user.controller.ts\nimport {\n  Controller,\n  Get,\n  Patch,\n  Param,\n  Body,\n  Query,\n  UseGuards,\n  HttpStatus,\n  HttpCode,\n  ParseUUIDPipe,\n} from '@nestjs/common';\nimport { AdminUserService } from '../services/admin-user.service';\nimport { AdminUpdateUserDto } from '../dto/admin-user.dto';\nimport { AdminUserQueryDto } from '../dto/admin-user-query.dto';\nimport { JwtAuthGuard } from 'src/auth/guards/jwt-auth.guard';\nimport { RolesGuard } from 'src/auth/guards/roles.guard'; \nimport { Roles } from 'src/auth/decorators/roles.decorator'; \nimport { Role } from 'src/users/enums/roles.enum';\nimport { ApiTags, ApiOperation, ApiResponse, ApiSecurity, ApiParam, ApiBody, ApiQuery, ApiBearerAuth } from '@nestjs/swagger';\n\n/**\n * Controller handling admin user management operations.\n */\n@ApiTags('E. Admin - User Management')\n@ApiBearerAuth()\n@Controller('admin/users')\n@UseGuards(JwtAuthGuard, RolesGuard)\n@Roles(Role.ADMIN)\nexport class AdminUserController {\n  constructor(private readonly adminUserService: AdminUserService) {}\n\n  /**\n   * Retrieves all users with optional filtering and pagination.\n   * @param query - Query parameters for filtering and pagination\n   * @returns Promise> - Users and pagination metadata\n   */\n  @Get()\n  @ApiOperation({ summary: 'Get all users with filtering and pagination' })\n  @ApiQuery({ name: 'page', required: false, type: Number })\n  @ApiQuery({ name: 'limit', required: false, type: Number })\n  @ApiResponse({ status: HttpStatus.OK, description: 'List of users retrieved successfully' })\n  @ApiResponse({ status: HttpStatus.UNAUTHORIZED, description: 'Unauthorized' })\n  @ApiResponse({ status: HttpStatus.FORBIDDEN, description: 'Forbidden' })\n  async findAll(@Query() queryDto: AdminUserQueryDto) {\n    return this.adminUserService.findAll(queryDto);\n  }\n\n  @Get('stats')\n  @ApiOperation({ summary: 'Get user statistics' })\n  @ApiResponse({ status: HttpStatus.OK, description: 'User statistics retrieved successfully' })\n  async getStats() {\n    return this.adminUserService.getStats();\n  }\n\n  /**\n   * Retrieves a user by ID.\n   * @param id - User ID\n   * @returns Promise - The found user\n   */\n  @Get(':id')\n  @ApiOperation({ summary: 'Get a user by ID' })\n  @ApiResponse({ status: HttpStatus.OK, description: 'User retrieved successfully' })\n  @ApiResponse({ status: HttpStatus.UNAUTHORIZED, description: 'Unauthorized' })\n  @ApiResponse({ status: HttpStatus.FORBIDDEN, description: 'Forbidden' })\n  @ApiResponse({ status: HttpStatus.NOT_FOUND, description: 'User not found' })\n  async findOne(@Param('id', ParseUUIDPipe) id: string) {\n    return this.adminUserService.findOne(id);\n  }\n\n  /**\n   * Updates a user's information.\n   * @param id - User ID\n   * @param updateUserDto - Data for updating the user\n   * @returns Promise - The updated user\n   */\n  @Patch(':id')\n  @ApiOperation({ summary: 'Update a user' })\n  @ApiResponse({ status: HttpStatus.OK, description: 'User updated successfully' })\n  @ApiResponse({ status: HttpStatus.UNAUTHORIZED, description: 'Unauthorized' })\n  @ApiResponse({ status: HttpStatus.FORBIDDEN, description: 'Forbidden' })\n  @ApiResponse({ status: HttpStatus.NOT_FOUND, description: 'User not found' })\n  async update(\n    @Param('id', ParseUUIDPipe) id: string,\n    @Body() updateDto: AdminUpdateUserDto,\n  ) {\n    return this.adminUserService.update(id, updateDto);\n  }\n\n  @Patch(':id/status')\n  @ApiOperation({ summary: 'Set user active status' })\n  @ApiParam({ name: 'id', description: 'User ID', type: 'string', format: 'uuid' })\n  @ApiBody({\n    schema: {\n      type: 'object',\n      properties: {\n        isActive: {\n          type: 'boolean',\n          description: 'Set to true to activate the user, false to deactivate',\n          example: true\n        }\n      },\n      required: ['isActive']\n    }\n  })\n  @ApiResponse({ status: HttpStatus.OK, description: 'User status updated successfully' })\n  @ApiResponse({ status: HttpStatus.NOT_FOUND, description: 'User not found' })\n  @HttpCode(HttpStatus.OK)\n  async setStatus(\n    @Param('id', ParseUUIDPipe) id: string,\n    @Body('isActive') isActive: boolean,\n  ) {\n    return this.adminUserService.setStatus(id, isActive);\n  }\n\n  @Patch(':id/role')\n  @ApiOperation({ summary: 'Update user role' })\n  @ApiParam({ name: 'id', description: 'User ID', type: 'string', format: 'uuid' })\n  @ApiBody({\n    schema: {\n      type: 'object',\n      properties: {\n        role: {\n          type: 'string',\n          enum: Object.values(Role),\n          description: 'New role for the user',\n          example: 'ADMIN'\n        }\n      },\n      required: ['role']\n    }\n  })\n  @ApiResponse({ status: HttpStatus.OK, description: 'User role updated successfully' })\n  @ApiResponse({ status: HttpStatus.NOT_FOUND, description: 'User not found' })\n  @HttpCode(HttpStatus.OK)\n  async updateRole(\n    @Param('id', ParseUUIDPipe) id: string,\n    @Body('role') role: Role,\n  ) {\n    return this.adminUserService.updateUserRole(id, role);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AdminUserQueryDto.html":{"url":"classes/AdminUserQueryDto.html","title":"class - AdminUserQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AdminUserQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/dto/admin-user-query.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object for admin user queries.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                createdAfter\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                createdBefore\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                isActive\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                isEmailVerified\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                lastLoginAfter\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                lastLoginBefore\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                role\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                search\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                sortBy\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                sortOrder\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        createdAfter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filter by creation date (after)'})@IsOptional()@IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/admin-user-query.dto.ts:131\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        createdBefore\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filter by creation date (before)'})@IsOptional()@IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/admin-user-query.dto.ts:136\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filter by active status'})@IsOptional()@Type(undefined)@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/admin-user-query.dto.ts:120\n                        \n                    \n\n            \n                \n                    Active status filter.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        isEmailVerified\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filter by email verification status'})@IsOptional()@Type(undefined)@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/admin-user-query.dto.ts:126\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        lastLoginAfter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filter by last login date (after)'})@IsOptional()@IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/admin-user-query.dto.ts:141\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        lastLoginBefore\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filter by last login date (before)'})@IsOptional()@IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/admin-user-query.dto.ts:146\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of items per page', default: 10})@IsOptional()@Type(undefined)@IsInt()@Min(1)@Max(100)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/admin-user-query.dto.ts:92\n                        \n                    \n\n            \n                \n                    Number of items per page.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Page number', default: 1})@IsOptional()@Type(undefined)@IsInt()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/admin-user-query.dto.ts:79\n                        \n                    \n\n            \n                \n                    Page number for pagination.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: Role, description: 'Filter by user role'})@IsOptional()@IsEnum(Role)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/admin-user-query.dto.ts:110\n                        \n                    \n\n            \n                \n                    Role filter for users.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        search\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Search term for firstName, lastName, or email'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/admin-user-query.dto.ts:101\n                        \n                    \n\n            \n                \n                    Search term for filtering users.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        sortBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Sort by field', enum: undefined})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/admin-user-query.dto.ts:154\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        sortOrder\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"asc\" | \"desc\"\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Sort order', enum: undefined, default: 'desc'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/admin-user-query.dto.ts:163\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { IsOptional, IsString, IsBoolean, IsDateString, IsEnum, IsInt, Min, Max } from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { Role } from '../../users/enums/roles.enum';\n\n/**\n * Interface for pagination metadata.\n * @interface PaginationMeta\n * @description Contains information about the current page and total results.\n */\nexport interface PaginationMeta {\n  /**\n   * Total number of items\n   * @type {number}\n   */\n  total: number;\n\n  /**\n   * Current page number\n   * @type {number}\n   */\n  page: number;\n\n  /**\n   * Number of items per page\n   * @type {number}\n   */\n  limit: number;\n\n  /**\n   * Total number of pages\n   * @type {number}\n   */\n  totalPages: number;\n\n  /**\n   * Optional message associated with the pagination metadata\n   * @type {string}\n   */\n  message?: string;\n}\n\n/**\n * Interface for paginated response data.\n * @interface PaginatedResponse\n * @description Generic interface for paginated API responses.\n * @template T - The type of items in the response\n */\nexport interface PaginatedResponse {\n  /**\n   * Array of items for the current page\n   * @type {T[]}\n   */\n  items: T[];\n\n  /**\n   * Pagination metadata\n   * @type {PaginationMeta}\n   */\n  meta: PaginationMeta;\n}\n\n/**\n * Data Transfer Object for admin user queries.\n * @class AdminUserQueryDto\n * @description Defines the structure and validation rules for admin user queries.\n */\nexport class AdminUserQueryDto {\n  /**\n   * Page number for pagination.\n   * @type {number}\n   * @default 1\n   */\n  @ApiPropertyOptional({ description: 'Page number', default: 1 })\n  @IsOptional()\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  page?: number = 1;\n\n  /**\n   * Number of items per page.\n   * @type {number}\n   * @default 10\n   */\n  @ApiPropertyOptional({ description: 'Number of items per page', default: 10 })\n  @IsOptional()\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @Max(100)\n  limit?: number = 10;\n\n  /**\n   * Search term for filtering users.\n   * @type {string}\n   */\n  @ApiPropertyOptional({ description: 'Search term for firstName, lastName, or email' })\n  @IsOptional()\n  @IsString()\n  search?: string;\n\n  /**\n   * Role filter for users.\n   * @type {Role}\n   */\n  @ApiPropertyOptional({ enum: Role, description: 'Filter by user role' })\n  @IsOptional()\n  @IsEnum(Role)\n  role?: Role;\n\n  /**\n   * Active status filter.\n   * @type {boolean}\n   */\n  @ApiPropertyOptional({ description: 'Filter by active status' })\n  @IsOptional()\n  @Type(() => Boolean)\n  @IsBoolean()\n  isActive?: boolean;\n\n  @ApiPropertyOptional({ description: 'Filter by email verification status' })\n  @IsOptional()\n  @Type(() => Boolean)\n  @IsBoolean()\n  isEmailVerified?: boolean;\n\n  @ApiPropertyOptional({ description: 'Filter by creation date (after)' })\n  @IsOptional()\n  @IsDateString()\n  createdAfter?: string;\n\n  @ApiPropertyOptional({ description: 'Filter by creation date (before)' })\n  @IsOptional()\n  @IsDateString()\n  createdBefore?: string;\n\n  @ApiPropertyOptional({ description: 'Filter by last login date (after)' })\n  @IsOptional()\n  @IsDateString()\n  lastLoginAfter?: string;\n\n  @ApiPropertyOptional({ description: 'Filter by last login date (before)' })\n  @IsOptional()\n  @IsDateString()\n  lastLoginBefore?: string;\n\n  @ApiPropertyOptional({ \n    description: 'Sort by field',\n    enum: ['createdAt', 'lastLoginAt', 'firstName', 'lastName', 'email', 'role']\n  })\n  @IsOptional()\n  @IsString()\n  sortBy?: string;\n\n  @ApiPropertyOptional({ \n    description: 'Sort order',\n    enum: ['asc', 'desc'],\n    default: 'desc'\n  })\n  @IsOptional()\n  @IsString()\n  sortOrder?: 'asc' | 'desc';\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AdminUserService.html":{"url":"injectables/AdminUserService.html","title":"injectable - AdminUserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AdminUserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/services/admin-user.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing users from the admin perspective.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getStats\n                            \n                            \n                                    Async\n                                getUserStats\n                            \n                            \n                                    Async\n                                setStatus\n                            \n                            \n                                    Async\n                                toggleUserStatus\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateUserRole\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, rolesRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/admin/services/admin-user.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        rolesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(queryDto: AdminUserQueryDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/admin/services/admin-user.service.ts:33\n                        \n                    \n\n\n            \n                \n                        Retrieves all users with optional filtering and pagination.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryDto\n                                            \n                                                            AdminUserQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise>\n\n                        \n                            \n                                Promise> - Users and pagination metadata\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/admin/services/admin-user.service.ts:153\n                        \n                    \n\n\n            \n                \n                        Retrieves a user by ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser ID\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise - The found user\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStats()\n                \n            \n\n\n                    \n                        \n                            Defined in src/admin/services/admin-user.service.ts:247\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserStats()\n                \n            \n\n\n                    \n                        \n                            Defined in src/admin/services/admin-user.service.ts:206\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        setStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    setStatus(id: string, isActive: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/admin/services/admin-user.service.ts:259\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                isActive\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        toggleUserStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    toggleUserStatus(id: string, isActive: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/admin/services/admin-user.service.ts:200\n                        \n                    \n\n\n            \n                \n                        Toggles a user's active status.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser ID\n\n\n                                            \n                                        \n                                        \n                                                isActive\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise - The updated user\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateDto: AdminUpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/admin/services/admin-user.service.ts:171\n                        \n                    \n\n\n            \n                \n                        Updates a user's information.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser ID\n\n\n                                            \n                                        \n                                        \n                                                updateDto\n                                            \n                                                            AdminUpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nData for updating the user\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise - The updated user\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateUserRole\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUserRole(id: string, role: Role)\n                \n            \n\n\n                    \n                        \n                            Defined in src/admin/services/admin-user.service.ts:270\n                        \n                    \n\n\n            \n                \n                        Updates a user's role.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser ID\n\n\n                                            \n                                        \n                                        \n                                                role\n                                            \n                                                            Role\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nNew role\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise - The updated user\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  BadRequestException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, Between, ILike, FindOptionsWhere } from 'typeorm';\nimport { Users } from 'src/users/entities/users.entity';\nimport { Roles } from 'src/users/entities/roles.entity';\nimport { AdminUpdateUserDto } from '../dto/admin-user.dto';\nimport { AdminUserQueryDto, PaginatedResponse } from '../dto/admin-user-query.dto';\nimport { Role } from 'src/users/enums/roles.enum';\n\n/**\n * Service for managing users from the admin perspective.\n * @class AdminUserService\n * @description Handles administrative operations for user management.\n */\n@Injectable()\nexport class AdminUserService {\n  constructor(\n    @InjectRepository(Users)\n    private readonly userRepository: Repository,\n    @InjectRepository(Roles)\n    private readonly rolesRepository: Repository,\n  ) {}\n\n  /**\n   * Retrieves all users with optional filtering and pagination.\n   * @param query - Query parameters for filtering and pagination\n   * @returns Promise> - Users and pagination metadata\n   */\n  async findAll(queryDto: AdminUserQueryDto): Promise> {\n    try {\n      const {\n        page = 1,\n        limit = 10,\n        search,\n        role,\n        isActive,\n        isEmailVerified,\n        createdAfter,\n        createdBefore,\n        lastLoginAfter,\n        lastLoginBefore,\n        sortBy = 'createdAt',\n        sortOrder = 'desc',\n      } = queryDto;\n\n      // Validate pagination parameters\n      if (isNaN(page) || page  new Date(createdBefore)) {\n        throw new BadRequestException('Created after date cannot be later than created before date');\n      }\n      if (lastLoginAfter && lastLoginBefore && new Date(lastLoginAfter) > new Date(lastLoginBefore)) {\n        throw new BadRequestException('Last login after date cannot be later than last login before date');\n      }\n\n      const skip = (page - 1) * limit;\n      const queryBuilder = this.userRepository.createQueryBuilder('user');\n\n      // Apply filters\n      if (search) {\n        queryBuilder.andWhere(\n          '(user.firstName ILIKE :search OR user.lastName ILIKE :search OR user.email ILIKE :search)',\n          { search: `%${search}%` }\n        );\n      }\n\n      if (role) {\n        queryBuilder.andWhere('user.role = :role', { role });\n      }\n\n      if (isActive !== undefined) {\n        queryBuilder.andWhere('user.isActive = :isActive', { isActive });\n      }\n\n      if (isEmailVerified !== undefined) {\n        queryBuilder.andWhere('user.isEmailVerified = :isEmailVerified', { isEmailVerified });\n      }\n\n      if (createdAfter || createdBefore) {\n        queryBuilder.andWhere('user.createdAt BETWEEN :createdAfter AND :createdBefore', {\n          createdAfter: createdAfter || new Date(0),\n          createdBefore: createdBefore || new Date(),\n        });\n      }\n\n      if (lastLoginAfter || lastLoginBefore) {\n        queryBuilder.andWhere('user.lastLoginAt BETWEEN :lastLoginAfter AND :lastLoginBefore', {\n          lastLoginAfter: lastLoginAfter || new Date(0),\n          lastLoginBefore: lastLoginBefore || new Date(),\n        });\n      }\n\n      // Validate and apply sorting\n      const validSortFields = ['createdAt', 'lastLoginAt', 'firstName', 'lastName', 'email', 'role'];\n      const validSortOrder = ['asc', 'desc'];\n\n      const finalSortBy = validSortFields.includes(sortBy) ? sortBy : 'createdAt';\n      const finalSortOrder = validSortOrder.includes(sortOrder.toLowerCase()) \n        ? sortOrder.toLowerCase() \n        : 'desc';\n\n      queryBuilder.orderBy(`user.${finalSortBy}`, finalSortOrder.toUpperCase() as 'ASC' | 'DESC');\n      queryBuilder.skip(skip).take(limit);\n\n      const [items, total] = await queryBuilder.getManyAndCount();\n\n      if (total === 0) {\n        return {\n          items: [],\n          meta: {\n            total: 0,\n            page,\n            limit,\n            totalPages: 0,\n            message: 'No users found matching the criteria'\n          },\n        };\n      }\n\n      return {\n        items,\n        meta: {\n          total,\n          page,\n          limit,\n          totalPages: Math.ceil(total / limit),\n        },\n      };\n    } catch (error) {\n      if (error instanceof BadRequestException) {\n        throw error;\n      }\n      throw new BadRequestException(`Error processing user query: ${error.message}`);\n    }\n  }\n\n  /**\n   * Retrieves a user by ID.\n   * @param id - User ID\n   * @returns Promise - The found user\n   * @throws NotFoundException - If user is not found\n   */\n  async findOne(id: string): Promise {\n    const user = await this.userRepository.findOne({\n      where: { id },\n      relations: ['roles'],\n    });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n    return user;\n  }\n\n  /**\n   * Updates a user's information.\n   * @param id - User ID\n   * @param updateDto - Data for updating the user\n   * @returns Promise - The updated user\n   * @throws NotFoundException - If user is not found\n   */\n  async update(id: string, updateDto: AdminUpdateUserDto): Promise {\n    const user = await this.findOne(id);\n\n    // Update basic fields\n    Object.assign(user, updateDto);\n\n    // Handle role update if provided\n    if (updateDto.role) {\n      const role = await this.rolesRepository.findOne({\n        where: { name: updateDto.role },\n      });\n\n      if (!role) {\n        throw new BadRequestException(`Role ${updateDto.role} not found`);\n      }\n\n      // Set the new role\n      user.roles = [role];\n    }\n\n    return this.userRepository.save(user);\n  }\n\n  /**\n   * Toggles a user's active status.\n   * @param id - User ID\n   * @returns Promise - The updated user\n   * @throws NotFoundException - If user is not found\n   */\n  async toggleUserStatus(id: string, isActive: boolean): Promise {\n    const user = await this.findOne(id);\n    user.isActive = isActive;\n    return this.userRepository.save(user);\n  }\n\n  async getUserStats(): Promise {\n    const totalUsers = await this.userRepository.count();\n    const activeUsers = await this.userRepository.count({\n      where: { isActive: true },\n    });\n    const verifiedUsers = await this.userRepository.count({\n      where: { isEmailVerified: true },\n    });\n\n    // Count by role\n    const roleCounts = {};\n    const roles = Object.values(Role);\n\n    for (const role of roles) {\n      const roleEntity = await this.rolesRepository.findOne({\n        where: { name: role },\n        relations: ['users'],\n      });\n\n      roleCounts[role] = roleEntity?.users?.length || 0;\n    }\n\n    // Get new users in the last 30 days\n    const thirtyDaysAgo = new Date();\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n\n    const newUsers = await this.userRepository.count({\n      where: {\n        createdAt: Between(thirtyDaysAgo, new Date()),\n      },\n    });\n\n    return {\n      totalUsers,\n      activeUsers,\n      verifiedUsers,\n      newUsers,\n      roleCounts,\n    };\n  }\n\n  async getStats() {\n    const totalUsers = await this.userRepository.count();\n    const activeUsers = await this.userRepository.count({ where: { isActive: true } });\n    const inactiveUsers = await this.userRepository.count({ where: { isActive: false } });\n    \n    return {\n      totalUsers,\n      activeUsers,\n      inactiveUsers,\n    };\n  }\n\n  async setStatus(id: string, isActive: boolean) {\n    await this.userRepository.update(id, { isActive });\n    return this.findOne(id);\n  }\n\n  /**\n   * Updates a user's role.\n   * @param id - User ID\n   * @param role - New role\n   * @returns Promise - The updated user\n   */\n  async updateUserRole(id: string, role: Role): Promise {\n    const user = await this.findOne(id);\n    \n    const roleEntity = await this.rolesRepository.findOne({\n      where: { name: role },\n    });\n\n    if (!roleEntity) {\n      throw new BadRequestException(`Role ${role} not found`);\n    }\n\n    // Update the user's roles\n    user.roles = [roleEntity];\n    \n    // Update email verification status\n    user.isEmailVerified = true;\n\n    return this.userRepository.save(user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAdminModule\n\nAdminModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAdminModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nOrdersModule\n\nOrdersModule\n\nAppModule -->\n\nOrdersModule->AppModule\n\n\n\n\n\nProductsModule\n\nProductsModule\n\nAppModule -->\n\nProductsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AdminModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            OrdersModule\n                        \n                        \n                            ProductsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { AuthModule } from './auth/auth.module';\nimport { UsersModule } from './users/users.module';\nimport { ProductsModule } from './products/products.module';\nimport { OrdersModule } from './orders/orders.module';\nimport { AdminModule } from './admin/admin.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        host: configService.get('dbHost'),\n        port: +configService.get('dbPort'),\n        username: configService.get('dbUser'),\n        password: configService.get('dbPassword'),\n        database: configService.get('dbName'),\n        entities: [__dirname + '/**/*.entity{.ts,.js}'],\n        synchronize: false,\n        logging: false,\n        logger: 'advanced-console',\n        maxQueryExecutionTime: 1000,\n        extra: {\n          maxQueryExecutionTime: 1000,\n          logSchemaSync: false,\n          application_name: 'elevate_admin'\n        }\n      }),\n      inject: [ConfigService],\n    }),\n    AuthModule,\n    UsersModule,\n    ProductsModule,\n    OrdersModule,\n    AdminModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Main application service.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:14\n                        \n                    \n\n\n            \n                \n                        Returns a greeting message.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                A welcome message\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n/**\n * Main application service.\n * @class AppService\n * @description Handles core application functionality and health checks.\n */\n@Injectable()\nexport class AppService {\n  /**\n   * Returns a greeting message.\n   * @returns {string} A welcome message\n   */\n  getHello(): string {\n    return 'Welcome to Elvate REST API';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n            \n                Description\n            \n            \n                Controller handling authentication routes including login.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginDto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'User login'})@ApiBody({type: LoginDto})@ApiResponse({status: 200, description: 'Login successful, returns JWT token', schema: undefined})@ApiResponse({status: 401, description: 'Invalid credentials'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:35\n                        \n                    \n\n\n            \n                \n                        Authenticates a user and returns a JWT token.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser login credentials\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Promise - JWT token for authenticated user\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        // src/auth/auth.controller.ts\nimport { Controller, Post, Body, HttpCode, HttpStatus, UnauthorizedException } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { LoginDto } from './dto/login.dto';\nimport { ApiTags, ApiOperation, ApiResponse, ApiBody } from '@nestjs/swagger';\n\n/**\n * Controller handling authentication routes including login.\n */\n@ApiTags('A. Authentication')\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  /**\n   * Authenticates a user and returns a JWT token.\n   * @param loginDto - User login credentials\n   * @returns Promise - JWT token for authenticated user\n   */\n  @Post('login')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'User login' })\n  @ApiBody({ type: LoginDto })\n  @ApiResponse({ \n    status: 200, \n    description: 'Login successful, returns JWT token',\n    schema: {\n      type: 'object',\n      properties: {\n        access_token: { type: 'string' }\n      }\n    }\n  })\n  @ApiResponse({ status: 401, description: 'Invalid credentials' })\n  async login(@Body() loginDto: LoginDto) {\n    return this.authService.login(loginDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nJwtAuthGuard \n\nJwtAuthGuard \n\n\n\nRolesGuard \n\nRolesGuard \n\n\n\nAuthModule\n\nAuthModule\n\nJwtAuthGuard  -->\n\nAuthModule->JwtAuthGuard \n\n\n\nRolesGuard  -->\n\nAuthModule->RolesGuard \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtAuthGuard\n\nJwtAuthGuard\n\nAuthModule -->\n\nJwtAuthGuard->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtAuthGuard\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            JwtAuthGuard\n                        \n                        \n                            RolesGuard\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtStrategy } from './strategies/jwt.strategy';\nimport { JwtAuthGuard } from './guards/jwt-auth.guard';\nimport { RolesGuard } from './guards/roles.guard';\nimport { ConfigService } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Users } from 'src/users/entities/users.entity';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service'\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Users]),\n    PassportModule,\n    JwtModule.registerAsync({\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        secret: configService.get('JWT_SECRET'),\n        signOptions: {\n          expiresIn: configService.get('JWT_EXPIRES_IN', '1d'),\n        },\n      }),\n    }),\n  ],\n  controllers: [AuthController],\n  providers: [JwtStrategy, JwtAuthGuard, RolesGuard, AuthService],\n  exports: [JwtModule, JwtAuthGuard, RolesGuard],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service handling authentication operations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginDto: LoginDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:29\n                        \n                    \n\n\n            \n                \n                        Authenticates a user and generates a JWT token.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser login credentials\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Promise - JWT token for authenticated user\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException, InternalServerErrorException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Users } from 'src/users/entities/users.entity';\nimport * as bcrypt from 'bcrypt';\nimport { JwtService } from '@nestjs/jwt';\nimport { LoginDto } from './dto/login.dto';\n\n/**\n * Service handling authentication operations.\n * @class AuthService\n * @description Manages user authentication, including login and token generation.\n */\n@Injectable()\nexport class AuthService {\n  constructor(\n    @InjectRepository(Users)\n    private readonly usersRepository: Repository,\n    private readonly jwtService: JwtService,\n  ) {}\n\n  /**\n   * Authenticates a user and generates a JWT token.\n   * @param loginDto - User login credentials\n   * @returns Promise - JWT token for authenticated user\n   * @throws UnauthorizedException - If credentials are invalid\n   */\n  async login(loginDto: LoginDto) {\n    try {\n      const user = await this.usersRepository.findOne({\n        where: { email: loginDto.email },\n        relations: ['roles'],\n      });\n\n      if (!user) {\n        throw new UnauthorizedException('Invalid credentials');\n      }\n\n      const isPasswordValid = await bcrypt.compare(loginDto.password, user.password);\n      if (!isPasswordValid) {\n        throw new UnauthorizedException('Invalid credentials');\n      }\n\n      if (!user.isActive) {\n        throw new UnauthorizedException('User is inactive');\n      }\n\n      // Update last login time\n      user.lastLoginAt = new Date();\n      await this.usersRepository.save(user);\n\n      const payload = { \n        sub: user.id, \n        email: user.email, \n        role: user.roles[0]?.name || 'USER' \n      };\n\n      return {\n        access_token: this.jwtService.sign(payload),\n      };\n    } catch (error) {\n      if (error instanceof UnauthorizedException) {\n        throw error;\n      }\n      throw new InternalServerErrorException('Error during login');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateOrderDto.html":{"url":"classes/CreateOrderDto.html","title":"class - CreateOrderDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateOrderDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/orders/dto/create-order.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                items\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                notes\n                            \n                            \n                                    \n                                    \n                                    \n                                paymentMethod\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        items\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderItemDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'List of items in the order', type: undefined, example: undefined})@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/dto/create-order.dto.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        notes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Additional notes for the order', example: 'Please deliver after 5 PM. Gift wrapping required.', required: false})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/dto/create-order.dto.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        paymentMethod\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Payment method for the order', example: 'CREDIT_CARD', enum: undefined})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/dto/create-order.dto.ts:71\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsArray, IsUUID, IsNumber, IsString, ValidateNested, IsOptional } from 'class-validator';\nimport { Type } from 'class-transformer';\n\nexport class OrderItemDto {\n  @ApiProperty({\n    description: 'ID of the product to order',\n    example: '123e4567-e89b-12d3-a456-426614174000'\n  })\n  @IsUUID()\n  productId: string;\n\n  @ApiProperty({\n    description: 'Quantity of the product to order',\n    example: 2,\n    minimum: 1\n  })\n  @IsNumber()\n  quantity: number;\n\n  @ApiProperty({\n    description: 'Selected size of the clothing item',\n    example: 'M',\n    required: false\n  })\n  @IsString()\n  @IsOptional()\n  size?: string;\n\n  @ApiProperty({\n    description: 'Selected color of the clothing item',\n    example: 'Navy Blue',\n    required: false\n  })\n  @IsString()\n  @IsOptional()\n  color?: string;\n}\n\nexport class CreateOrderDto {\n  @ApiProperty({\n    description: 'List of items in the order',\n    type: [OrderItemDto],\n    example: [\n      {\n        productId: '123e4567-e89b-12d3-a456-426614174000',\n        quantity: 2,\n        size: 'M',\n        color: 'Navy Blue'\n      },\n      {\n        productId: '123e4567-e89b-12d3-a456-426614174001',\n        quantity: 1,\n        size: '32',\n        color: 'Dark Wash'\n      }\n    ]\n  })\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => OrderItemDto)\n  items: OrderItemDto[];\n\n  @ApiProperty({\n    description: 'Payment method for the order',\n    example: 'CREDIT_CARD',\n    enum: ['CREDIT_CARD', 'PAYPAL', 'CASH_ON_DELIVERY']\n  })\n  @IsString()\n  @IsNotEmpty()\n  paymentMethod: string;\n\n  @ApiProperty({\n    description: 'Additional notes for the order',\n    example: 'Please deliver after 5 PM. Gift wrapping required.',\n    required: false\n  })\n  @IsString()\n  @IsOptional()\n  notes?: string;\n} \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateOrdersTables1714390000000.html":{"url":"classes/CreateOrdersTables1714390000000.html","title":"class - CreateOrdersTables1714390000000","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateOrdersTables1714390000000\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/migrations/1714390000000-CreateOrdersTables.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                        \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/migrations/1714390000000-CreateOrdersTables.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                        \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/migrations/1714390000000-CreateOrdersTables.ts:4\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class CreateOrdersTables1714390000000 implements MigrationInterface {\n  public async up(queryRunner: QueryRunner): Promise {\n    // Create orders table\n    await queryRunner.query(`\n      CREATE TABLE \"orders\" (\n        \"id\" uuid DEFAULT uuid_generate_v4() PRIMARY KEY,\n        \"userId\" uuid NOT NULL,\n        \"status\" varchar NOT NULL DEFAULT 'PENDING',\n        \"totalAmount\" decimal(10,2) NOT NULL DEFAULT 0,\n        \"refundAmount\" decimal(10,2),\n        \"notes\" text,\n        \"adminNotes\" text,\n        \"paymentDetails\" jsonb,\n        \"history\" jsonb,\n        \"createdAt\" TIMESTAMP NOT NULL DEFAULT now(),\n        \"updatedAt\" TIMESTAMP NOT NULL DEFAULT now(),\n        CONSTRAINT \"fk_orders_user\" FOREIGN KEY (\"userId\") REFERENCES \"users\"(\"id\") ON DELETE CASCADE\n      )\n    `);\n\n    // Create order_items table\n    await queryRunner.query(`\n      CREATE TABLE \"order_items\" (\n        \"id\" uuid DEFAULT uuid_generate_v4() PRIMARY KEY,\n        \"orderId\" uuid NOT NULL,\n        \"productId\" uuid NOT NULL,\n        \"quantity\" integer NOT NULL,\n        \"price\" decimal(10,2) NOT NULL,\n        \"total\" decimal(10,2) NOT NULL,\n        \"createdAt\" TIMESTAMP NOT NULL DEFAULT now(),\n        \"updatedAt\" TIMESTAMP NOT NULL DEFAULT now(),\n        CONSTRAINT \"fk_order_items_order\" FOREIGN KEY (\"orderId\") REFERENCES \"orders\"(\"id\") ON DELETE CASCADE,\n        CONSTRAINT \"fk_order_items_product\" FOREIGN KEY (\"productId\") REFERENCES \"products\"(\"id\") ON DELETE CASCADE\n      )\n    `);\n\n    // Create indexes\n    await queryRunner.query(`\n      CREATE INDEX \"idx_orders_user\" ON \"orders\"(\"userId\");\n      CREATE INDEX \"idx_orders_status\" ON \"orders\"(\"status\");\n      CREATE INDEX \"idx_orders_created\" ON \"orders\"(\"createdAt\");\n      CREATE INDEX \"idx_order_items_order\" ON \"order_items\"(\"orderId\");\n      CREATE INDEX \"idx_order_items_product\" ON \"order_items\"(\"productId\");\n    `);\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(`DROP TABLE IF EXISTS \"order_items\" CASCADE`);\n    await queryRunner.query(`DROP TABLE IF EXISTS \"orders\" CASCADE`);\n  }\n} \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateProductDto.html":{"url":"classes/CreateProductDto.html","title":"class - CreateProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/dto/create-product.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                brand\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                careInstructions\n                            \n                            \n                                    \n                                    \n                                category\n                            \n                            \n                                    \n                                    \n                                    \n                                colors\n                            \n                            \n                                    \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                imageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                isBestSeller\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                isFeatured\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                isNewArrival\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                isOnSale\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                material\n                            \n                            \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                price\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                salePrice\n                            \n                            \n                                    \n                                    \n                                    \n                                sizes\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                specifications\n                            \n                            \n                                    \n                                    \n                                    \n                                stock\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        brand\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Product brand', example: 'Elevate Fashion'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/create-product.dto.ts:104\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        careInstructions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Care instructions', example: 'Machine wash cold, tumble dry low. Do not bleach. Iron on reverse side if needed.'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/create-product.dto.ts:120\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ProductCategory\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Category of the product', enum: ProductCategory, example: undefined})@IsEnum(ProductCategory)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/create-product.dto.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        colors\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Available colors', example: undefined})@IsArray()@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/create-product.dto.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description of the product', example: 'Premium quality cotton t-shirt with a comfortable classic fit. Perfect for everyday wear.'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/create-product.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        imageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'URL of the product image', example: 'https://example.com/images/classic-fit-tshirt.jpg', required: false})@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/create-product.dto.ts:82\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        isBestSeller\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Whether the product is a best seller', default: false})@IsBoolean()@IsOptional()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/create-product.dto.ts:147\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        isFeatured\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Whether the product is featured', example: false, required: false})@IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/create-product.dto.ts:129\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        isNewArrival\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Whether the product is a new arrival', default: false})@IsBoolean()@IsOptional()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/create-product.dto.ts:138\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        isOnSale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Whether the product is on sale', example: false, required: false})@IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/create-product.dto.ts:156\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        material\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Product material', example: '100% Premium Cotton'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/create-product.dto.ts:112\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Name of the product', example: 'Classic Fit Cotton T-Shirt'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/create-product.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Price of the product', example: 29.99, minimum: 0})@IsNumber()@Min(0)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/create-product.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        salePrice\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Sale price of the product (if on sale)', example: 24.99, required: false})@IsNumber()@Min(0)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/create-product.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        sizes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Available sizes', example: undefined})@IsArray()@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/create-product.dto.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        specifications\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Product specifications', example: undefined})@IsObject()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/create-product.dto.ts:96\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        stock\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Stock quantity of the product', example: 100, minimum: 0})@IsNumber()@Min(0)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/create-product.dto.ts:49\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, IsNumber, IsEnum, IsArray, IsOptional, IsBoolean, IsUrl, Min, Max, IsObject, ValidateNested } from 'class-validator';\nimport { Transform, Type } from 'class-transformer';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { ProductCategory } from '../entities/product.entity';\n\nexport class CreateProductDto {\n  @ApiProperty({\n    description: 'Name of the product',\n    example: 'Classic Fit Cotton T-Shirt'\n  })\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n\n  @ApiProperty({\n    description: 'Description of the product',\n    example: 'Premium quality cotton t-shirt with a comfortable classic fit. Perfect for everyday wear.'\n  })\n  @IsString()\n  @IsNotEmpty()\n  description: string;\n\n  @ApiProperty({\n    description: 'Price of the product',\n    example: 29.99,\n    minimum: 0\n  })\n  @IsNumber()\n  @Min(0)\n  price: number;\n\n  @ApiProperty({\n    description: 'Sale price of the product (if on sale)',\n    example: 24.99,\n    required: false\n  })\n  @IsNumber()\n  @Min(0)\n  @IsOptional()\n  salePrice?: number;\n\n  @ApiProperty({\n    description: 'Stock quantity of the product',\n    example: 100,\n    minimum: 0\n  })\n  @IsNumber()\n  @Min(0)\n  stock: number;\n\n  @ApiProperty({\n    description: 'Category of the product',\n    enum: ProductCategory,\n    example: ProductCategory.T_SHIRTS\n  })\n  @IsEnum(ProductCategory)\n  category: ProductCategory;\n\n  @ApiProperty({\n    description: 'Available sizes',\n    example: ['XS', 'S', 'M', 'L', 'XL', 'XXL']\n  })\n  @IsArray()\n  @IsString({ each: true })\n  sizes: string[];\n\n  @ApiProperty({\n    description: 'Available colors',\n    example: ['Black', 'White', 'Navy', 'Burgundy', 'Forest Green']\n  })\n  @IsArray()\n  @IsString({ each: true })\n  colors: string[];\n\n  @ApiProperty({\n    description: 'URL of the product image',\n    example: 'https://example.com/images/classic-fit-tshirt.jpg',\n    required: false\n  })\n  @IsUrl()\n  @IsOptional()\n  imageUrl?: string;\n\n  @ApiPropertyOptional({\n    description: 'Product specifications',\n    example: { \n      'Fabric': '100% Premium Cotton', \n      'Fit': 'Classic Fit',\n      'Weight': '180 GSM',\n      'Style': 'Casual',\n      'Neck': 'Crew Neck'\n    }\n  })\n  @IsObject()\n  @IsOptional()\n  specifications?: Record;\n\n  @ApiPropertyOptional({\n    description: 'Product brand',\n    example: 'Elevate Fashion'\n  })\n  @IsString()\n  @IsOptional()\n  brand?: string;\n\n  @ApiPropertyOptional({\n    description: 'Product material',\n    example: '100% Premium Cotton'\n  })\n  @IsString()\n  @IsOptional()\n  material?: string;\n\n  @ApiPropertyOptional({\n    description: 'Care instructions',\n    example: 'Machine wash cold, tumble dry low. Do not bleach. Iron on reverse side if needed.'\n  })\n  @IsString()\n  @IsOptional()\n  careInstructions?: string;\n\n  @ApiPropertyOptional({\n    description: 'Whether the product is featured',\n    example: false,\n    required: false\n  })\n  @IsBoolean()\n  @IsOptional()\n  isFeatured?: boolean;\n\n  @ApiPropertyOptional({\n    description: 'Whether the product is a new arrival',\n    default: false\n  })\n  @IsBoolean()\n  @IsOptional()\n  @Transform(({ value }) => value === 'true')\n  isNewArrival?: boolean;\n\n  @ApiPropertyOptional({\n    description: 'Whether the product is a best seller',\n    default: false\n  })\n  @IsBoolean()\n  @IsOptional()\n  @Transform(({ value }) => value === 'true')\n  isBestSeller?: boolean;\n\n  @ApiPropertyOptional({\n    description: 'Whether the product is on sale',\n    example: false,\n    required: false\n  })\n  @IsBoolean()\n  @IsOptional()\n  isOnSale?: boolean;\n} \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                dob\n                            \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                phone\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                profileImage\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        dob\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Date of birth in ISO format (YYYY-MM-DD)', example: '1990-01-01'})@IsNotEmpty()@IsDateString({strict: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User email address', example: 'john.doe@example.com'})@IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User first name', example: 'John'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User last name', example: 'Doe', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User password', example: 'password123'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User phone number (Bangladeshi format)', example: '+8801712345678', required: false})@IsOptional()@IsString()@IsPhoneNumber('BD', {message: 'Phone number must be a valid Bangladeshi phone number'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        profileImage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'URL to user profile image', example: 'https://example.com/profile.jpg', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:72\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsDateString,\n  IsPhoneNumber,\n} from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateUserDto {\n  @ApiProperty({\n    description: 'User first name',\n    example: 'John'\n  })\n  @IsNotEmpty()\n  @IsString()\n  firstName: string;\n\n  @ApiProperty({\n    description: 'User last name',\n    example: 'Doe',\n    required: false\n  })\n  @IsOptional()\n  @IsString()\n  lastName?: string;\n\n  @ApiProperty({\n    description: 'Date of birth in ISO format (YYYY-MM-DD)',\n    example: '1990-01-01'\n  })\n  @IsNotEmpty()\n  @IsDateString({ strict: true })\n  dob: string;\n\n  @ApiProperty({\n    description: 'User email address',\n    example: 'john.doe@example.com'\n  })\n  @IsNotEmpty()\n  @IsEmail()\n  email: string;\n\n  @ApiProperty({\n    description: 'User phone number (Bangladeshi format)',\n    example: '+8801712345678',\n    required: false\n  })\n  @IsOptional()\n  @IsString()\n  @IsPhoneNumber('BD', {\n    message: 'Phone number must be a valid Bangladeshi phone number',\n  })\n  phone?: string;\n\n  @ApiProperty({\n    description: 'User password',\n    example: 'password123'\n  })\n  @IsNotEmpty()\n  @IsString()\n  password: string;\n\n  @ApiProperty({\n    description: 'URL to user profile image',\n    example: 'https://example.com/profile.jpg',\n    required: false\n  })\n  @IsOptional()\n  @IsString()\n  profileImage?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/http-exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(HttpExceptionFilter.name)\n                    \n                \n                    \n                        \n                                Defined in src/common/exceptions/http-exception.filter.ts:13\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/exceptions/http-exception.filter.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                        HttpException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n  HttpStatus,\n  Logger,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  private readonly logger = new Logger(HttpExceptionFilter.name);\n\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = exception.getStatus();\n    const exceptionResponse = exception.getResponse();\n\n    // Log the exception\n    this.logger.error(\n      `${request.method} ${request.url} - Status: ${status} - ${JSON.stringify(exceptionResponse)}`,\n    );\n\n    // Format the response\n    const errorResponse = {\n      statusCode: status,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n      method: request.method,\n      message: typeof exceptionResponse === 'string' \n        ? exceptionResponse \n        : (exceptionResponse as any).message || exception.message,\n      error: (exceptionResponse as any).error || HttpStatus[status],\n    };\n\n    response.status(status).json(errorResponse);\n  }\n} \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt-auth.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                JWT Authentication Guard.\nProtects routes by requiring a valid JWT token in the request.\n\n            \n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/jwt-auth.guard.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/jwt-auth.guard.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(err: any, user: any, info: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/jwt-auth.guard.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                err\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                info\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  ExecutionContext,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { JwtService } from '@nestjs/jwt';\nimport { Reflector } from '@nestjs/core';\n\n/**\n * JWT Authentication Guard.\n * @class JwtAuthGuard\n * @description Extends Passport's AuthGuard to implement JWT-based authentication.\n * Protects routes by requiring a valid JWT token in the request.\n */\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly reflector: Reflector,\n  ) {\n    super();\n  }\n\n  canActivate(context: ExecutionContext) {\n    // Check for public route metadata\n    const isPublic = this.reflector.getAllAndOverride('isPublic', [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    if (isPublic) {\n      return true;\n    }\n\n    // Continue with JWT validation\n    return super.canActivate(context);\n  }\n\n  handleRequest(err: any, user: any, info: any) {\n    if (err || !user) {\n      throw new UnauthorizedException('Insufficient authority. Please log in with appropriate credentials.');\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayload.html":{"url":"interfaces/JwtPayload.html","title":"interface - JwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interfaces/jwt-payload.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface representing the JWT payload structure.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            exp\n                                        \n                                \n                                \n                                        \n                                            role\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    User's email address\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        exp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        exp:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Token expiration timestamp\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        role:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    User's role\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Subject - typically the user ID\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface JwtPayload {\n  /**\n   * Subject - typically the user ID\n   * @type {string}\n   */\n  sub: string;\n\n  /**\n   * User's email address\n   * @type {string}\n   */\n  email: string;\n\n  /**\n   * User's role\n   * @type {string}\n   */\n  role: string;\n\n  /**\n   * Token expiration timestamp\n   * @type {number}\n   */\n  exp?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                JWT Strategy for handling authentication.\nExtracts JWT from request headers and validates the token.\n\n            \n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt.strategy.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: JwtPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategies/jwt.strategy.ts:42\n                        \n                    \n\n\n            \n                \n                        Validates the JWT payload.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            JwtPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe JWT payload containing user information\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The validated payload\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Users } from 'src/users/entities/users.entity';\nimport { JwtPayload } from '../interfaces/jwt-payload.interface';  // Import JwtPayload interface\n\n/**\n * JWT Strategy for handling authentication.\n * @class JwtStrategy\n * @description Implements JWT-based authentication strategy using Passport.\n * Extracts JWT from request headers and validates the token.\n */\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    private readonly configService: ConfigService,\n    @InjectRepository(Users)\n    private readonly usersRepository: Repository,\n  ) {\n    const jwtSecret = configService.get('JWT_SECRET');\n    \n    if (!jwtSecret) {\n      throw new Error('JWT_SECRET is not defined in the environment variables');\n    }\n    \n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: jwtSecret,\n    });\n  }\n\n  /**\n   * Validates the JWT payload.\n   * @param payload - The JWT payload containing user information\n   * @returns The validated payload\n   */\n  async validate(payload: JwtPayload) {  // Use the JwtPayload type\n    const { sub: id } = payload;\n    \n    const user = await this.usersRepository.findOne({\n      where: { id },\n      relations: ['roles'],\n    });\n\n    if (!user) {\n      throw new UnauthorizedException('User not found');\n    }\n\n    if (!user.isActive) {\n      throw new UnauthorizedException('User is inactive');\n    }\n\n    // Update last login time\n    user.lastLoginAt = new Date();\n    await this.usersRepository.save(user);\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object for user login.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User email address', example: 'user@example.com'})@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:19\n                        \n                    \n\n            \n                \n                    User's email address.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User password', example: 'password123'})@IsString()@IsNotEmpty()@MinLength(6)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:32\n                        \n                    \n\n            \n                \n                    User's password.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsString, MinLength } from \"class-validator\"\nimport { ApiProperty } from '@nestjs/swagger';\n\n/**\n * Data Transfer Object for user login.\n * @class LoginDto\n * @description Defines the structure and validation rules for login requests.\n */\nexport class LoginDto {\n  /**\n   * User's email address.\n   * @type {string}\n   */\n  @ApiProperty({\n    description: 'User email address',\n    example: 'user@example.com'\n  })\n  @IsEmail()\n  email: string;\n\n  /**\n   * User's password.\n   * @type {string}\n   */\n  @ApiProperty({\n    description: 'User password',\n    example: 'password123'\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(6)\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Order.html":{"url":"entities/Order.html","title":"entity - Order","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Order\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/orders/entities/order.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                adminNotes\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                history\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                items\n                            \n                            \n                                    \n                                notes\n                            \n                            \n                                    \n                                paymentDetails\n                            \n                            \n                                    \n                                refundAmount\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                totalAmount\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    \n                                user\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        adminNotes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/entities/order.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/entities/order.entity.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        history\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'jsonb', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/entities/order.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/entities/order.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        items\n                        \n                    \n                \n            \n                \n                    \n                        Type :     OrderItem[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, orderItem => orderItem.order, {cascade: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/entities/order.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        notes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/entities/order.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        paymentDetails\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'jsonb', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/entities/order.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        refundAmount\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'decimal', precision: 10, scale: 2, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/entities/order.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: OrderStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/entities/order.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        totalAmount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'decimal', precision: 10, scale: 2, default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/entities/order.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/entities/order.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Users\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.orders)@JoinColumn({name: 'userId'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/entities/order.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'uuid'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/entities/order.entity.ts:12\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, PrimaryGeneratedColumn, Column, CreateDateColumn, UpdateDateColumn, ManyToOne, OneToMany, JoinColumn } from 'typeorm';\nimport { Users } from '../../users/entities/users.entity';\nimport { OrderItem } from './order-item.entity';\nimport { OrderStatus } from '../enums/order-status.enum';\n\n@Entity('orders')\nexport class Order {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({ type: 'uuid' })\n  userId: string;\n\n  @ManyToOne(() => Users, user => user.orders)\n  @JoinColumn({ name: 'userId' })\n  user: Users;\n\n  @Column({ type: 'enum', enum: OrderStatus, default: OrderStatus.PENDING })\n  status: OrderStatus;\n\n  @Column({ type: 'decimal', precision: 10, scale: 2, default: 0 })\n  totalAmount: number;\n\n  @Column({ type: 'decimal', precision: 10, scale: 2, nullable: true })\n  refundAmount: number | null;\n\n  @Column({ type: 'text', nullable: true })\n  notes: string | null;\n\n  @Column({ type: 'text', nullable: true })\n  adminNotes: string | null;\n\n  @Column({ type: 'jsonb', nullable: true })\n  paymentDetails: {\n    method: string;\n    transactionId: string;\n    status: string;\n    amount: number;\n  } | null;\n\n  @Column({ type: 'jsonb', nullable: true })\n  history: Array | null;\n\n  @OneToMany(() => OrderItem, orderItem => orderItem.order, {\n    cascade: true,\n  })\n  items: OrderItem[];\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n} \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/OrderItem.html":{"url":"entities/OrderItem.html","title":"entity - OrderItem","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  OrderItem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/orders/entities/order-item.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                order\n                            \n                            \n                                    \n                                orderId\n                            \n                            \n                                    \n                                price\n                            \n                            \n                                    \n                                    \n                                product\n                            \n                            \n                                    \n                                productId\n                            \n                            \n                                    \n                                quantity\n                            \n                            \n                                    \n                                total\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/entities/order-item.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        order\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Order\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, order => order.items)@JoinColumn({name: 'orderId'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/entities/order-item.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        orderId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'uuid'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/entities/order-item.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'decimal', precision: 10, scale: 2})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/entities/order-item.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        product\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Product\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined)@JoinColumn({name: 'productId'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/entities/order-item.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        productId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'uuid'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/entities/order-item.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        quantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'int'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/entities/order-item.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        total\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'decimal', precision: 10, scale: 2})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/entities/order-item.entity.ts:31\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, PrimaryGeneratedColumn, Column, ManyToOne, JoinColumn } from 'typeorm';\nimport { Order } from './order.entity';\nimport { Product } from '../../products/entities/product.entity';\n\n@Entity('order_items')\nexport class OrderItem {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({ type: 'uuid' })\n  orderId: string;\n\n  @Column({ type: 'uuid' })\n  productId: string;\n\n  @ManyToOne(() => Order, (order) => order.items)\n  @JoinColumn({ name: 'orderId' })\n  order: Order;\n\n  @ManyToOne(() => Product)\n  @JoinColumn({ name: 'productId' })\n  product: Product;\n\n  @Column({ type: 'int' })\n  quantity: number;\n\n  @Column({ type: 'decimal', precision: 10, scale: 2 })\n  price: number;\n\n  @Column({ type: 'decimal', precision: 10, scale: 2 })\n  total: number;\n} \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OrderItemDto.html":{"url":"classes/OrderItemDto.html","title":"class - OrderItemDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OrderItemDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/orders/dto/create-order.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                color\n                            \n                            \n                                    \n                                    \n                                productId\n                            \n                            \n                                    \n                                    \n                                quantity\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                size\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        color\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Selected color of the clothing item', example: 'Navy Blue', required: false})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/dto/create-order.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        productId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'ID of the product to order', example: '123e4567-e89b-12d3-a456-426614174000'})@IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/dto/create-order.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        quantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Quantity of the product to order', example: 2, minimum: 1})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/dto/create-order.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        size\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Selected size of the clothing item', example: 'M', required: false})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/dto/create-order.dto.ts:28\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsArray, IsUUID, IsNumber, IsString, ValidateNested, IsOptional } from 'class-validator';\nimport { Type } from 'class-transformer';\n\nexport class OrderItemDto {\n  @ApiProperty({\n    description: 'ID of the product to order',\n    example: '123e4567-e89b-12d3-a456-426614174000'\n  })\n  @IsUUID()\n  productId: string;\n\n  @ApiProperty({\n    description: 'Quantity of the product to order',\n    example: 2,\n    minimum: 1\n  })\n  @IsNumber()\n  quantity: number;\n\n  @ApiProperty({\n    description: 'Selected size of the clothing item',\n    example: 'M',\n    required: false\n  })\n  @IsString()\n  @IsOptional()\n  size?: string;\n\n  @ApiProperty({\n    description: 'Selected color of the clothing item',\n    example: 'Navy Blue',\n    required: false\n  })\n  @IsString()\n  @IsOptional()\n  color?: string;\n}\n\nexport class CreateOrderDto {\n  @ApiProperty({\n    description: 'List of items in the order',\n    type: [OrderItemDto],\n    example: [\n      {\n        productId: '123e4567-e89b-12d3-a456-426614174000',\n        quantity: 2,\n        size: 'M',\n        color: 'Navy Blue'\n      },\n      {\n        productId: '123e4567-e89b-12d3-a456-426614174001',\n        quantity: 1,\n        size: '32',\n        color: 'Dark Wash'\n      }\n    ]\n  })\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => OrderItemDto)\n  items: OrderItemDto[];\n\n  @ApiProperty({\n    description: 'Payment method for the order',\n    example: 'CREDIT_CARD',\n    enum: ['CREDIT_CARD', 'PAYPAL', 'CASH_ON_DELIVERY']\n  })\n  @IsString()\n  @IsNotEmpty()\n  paymentMethod: string;\n\n  @ApiProperty({\n    description: 'Additional notes for the order',\n    example: 'Please deliver after 5 PM. Gift wrapping required.',\n    required: false\n  })\n  @IsString()\n  @IsOptional()\n  notes?: string;\n} \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/OrdersController.html":{"url":"controllers/OrdersController.html","title":"controller - OrdersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  OrdersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/orders/orders.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                orders\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                getAnalytics\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                getSalesTrends\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createOrderDto: CreateOrderDto, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Create a new order', description: 'Creates a new order with the specified items and payment details.'})@ApiBody({type: CreateOrderDto})@ApiResponse({status: 201, description: 'Order created successfully', schema: undefined})@ApiResponse({status: 400, description: 'Invalid input data', schema: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/orders/orders.controller.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createOrderDto\n                                            \n                                                            CreateOrderDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(user: User, page?: number, limit?: number, status?: OrderStatus, startDate?: Date, endDate?: Date)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Get current user orders', description: 'Retrieves a paginated list of orders for the current user with optional filtering.'})@ApiQuery({name: 'page', required: false, type: Number, description: 'Page number for pagination (default: 1)'})@ApiQuery({name: 'limit', required: false, type: Number, description: 'Number of items per page (default: 10)'})@ApiQuery({name: 'status', required: false, enum: OrderStatus, description: 'Filter orders by status'})@ApiQuery({name: 'startDate', required: false, type: Date, description: 'Filter orders created after this date'})@ApiQuery({name: 'endDate', required: false, type: Date, description: 'Filter orders created before this date'})@ApiResponse({status: 200, description: 'List of orders retrieved successfully', schema: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/orders/orders.controller.ts:130\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                status\n                                            \n                                                            OrderStatus\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                startDate\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                endDate\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({summary: 'Get order by ID', description: 'Retrieves detailed information about a specific order. Users can only access their own orders.'})@ApiResponse({status: 200, description: 'Order found successfully', schema: undefined})@ApiResponse({status: 404, description: 'Order not found', schema: undefined})@ApiResponse({status: 403, description: 'Forbidden - Cannot access another user's order', schema: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/orders/orders.controller.ts:189\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        getAnalytics\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAnalytics(startDate?: Date, endDate?: Date)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('analytics/summary')@ApiOperation({summary: 'Get order analytics summary', description: 'Retrieves summary statistics about orders.'})@ApiQuery({name: 'startDate', required: false, type: Date, description: 'Start date for analytics period'})@ApiQuery({name: 'endDate', required: false, type: Date, description: 'End date for analytics period'})@ApiResponse({status: 200, description: 'Analytics summary retrieved successfully', schema: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/orders/orders.controller.ts:281\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                startDate\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                endDate\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        getSalesTrends\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSalesTrends(startDate: Date, endDate: Date, interval: \"day\" | \"week\" | \"month\")\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('analytics/trends')@ApiOperation({summary: 'Get sales trends', description: 'Retrieves sales trends over a specified time period.'})@ApiQuery({name: 'startDate', required: true, type: Date, description: 'Start date for trend analysis'})@ApiQuery({name: 'endDate', required: true, type: Date, description: 'End date for trend analysis'})@ApiQuery({name: 'interval', required: false, enum: undefined, description: 'Time interval for trend data (default: day)'})@ApiResponse({status: 200, description: 'Sales trends retrieved successfully', schema: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/orders/orders.controller.ts:333\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                startDate\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                endDate\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                interval\n                                            \n                                                        \"day\" | \"week\" | \"month\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'day'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateOrderDto: UpdateOrderDto, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@ApiOperation({summary: 'Update order', description: 'Updates the status or notes of an existing order. Users can only update their own orders.'})@ApiBody({type: UpdateOrderDto})@ApiResponse({status: 200, description: 'Order updated successfully', schema: undefined})@ApiResponse({status: 404, description: 'Order not found', schema: undefined})@ApiResponse({status: 403, description: 'Forbidden - Cannot update another user's order', schema: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/orders/orders.controller.ts:237\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateOrderDto\n                                            \n                                                            UpdateOrderDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Query, UseGuards, ForbiddenException } from '@nestjs/common';\nimport { OrdersService } from './orders.service';\nimport { CreateOrderDto } from './dto/create-order.dto';\nimport { UpdateOrderDto } from './dto/update-order.dto';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport { RolesGuard } from '../auth/guards/roles.guard';\nimport { Roles } from '../auth/decorators/roles.decorator';\nimport { Role } from '../users/enums/roles.enum';\nimport { Users } from '../users/entities/users.entity';\nimport { ApiTags, ApiOperation, ApiResponse, ApiQuery, ApiBearerAuth, ApiBody } from '@nestjs/swagger';\nimport { CurrentUser } from '../auth/decorators/current-user.decorator';\nimport { User } from '../users/entities/user.entity';\nimport { OrderStatus } from './enums/order-status.enum';\n\n@ApiTags('D. Public - Orders')\n@ApiBearerAuth()\n@Controller('orders')\n@UseGuards(JwtAuthGuard, RolesGuard)\nexport class OrdersController {\n  constructor(private readonly ordersService: OrdersService) {}\n\n  @Post()\n  @ApiOperation({ \n    summary: 'Create a new order',\n    description: 'Creates a new order with the specified items and payment details.'\n  })\n  @ApiBody({ type: CreateOrderDto })\n  @ApiResponse({ \n    status: 201, \n    description: 'Order created successfully',\n    schema: {\n      example: {\n        id: '123e4567-e89b-12d3-a456-426614174000',\n        userId: '123e4567-e89b-12d3-a456-426614174000',\n        status: 'PENDING',\n        totalAmount: 99.99,\n        items: [\n          {\n            productId: '123e4567-e89b-12d3-a456-426614174000',\n            quantity: 2,\n            price: 49.99,\n            total: 99.98\n          }\n        ],\n        createdAt: '2024-04-29T09:00:00.000Z'\n      }\n    }\n  })\n  @ApiResponse({ \n    status: 400, \n    description: 'Invalid input data',\n    schema: {\n      example: {\n        statusCode: 400,\n        message: 'Invalid input data',\n        error: 'Bad Request'\n      }\n    }\n  })\n  create(@Body() createOrderDto: CreateOrderDto, @CurrentUser() user: User) {\n    return this.ordersService.create(createOrderDto, user.id);\n  }\n\n  @Get()\n  @ApiOperation({ \n    summary: 'Get current user orders',\n    description: 'Retrieves a paginated list of orders for the current user with optional filtering.'\n  })\n  @ApiQuery({ \n    name: 'page', \n    required: false, \n    type: Number,\n    description: 'Page number for pagination (default: 1)'\n  })\n  @ApiQuery({ \n    name: 'limit', \n    required: false, \n    type: Number,\n    description: 'Number of items per page (default: 10)'\n  })\n  @ApiQuery({ \n    name: 'status', \n    required: false, \n    enum: OrderStatus,\n    description: 'Filter orders by status'\n  })\n  @ApiQuery({ \n    name: 'startDate', \n    required: false, \n    type: Date,\n    description: 'Filter orders created after this date'\n  })\n  @ApiQuery({ \n    name: 'endDate', \n    required: false, \n    type: Date,\n    description: 'Filter orders created before this date'\n  })\n  @ApiResponse({ \n    status: 200, \n    description: 'List of orders retrieved successfully',\n    schema: {\n      example: {\n        data: [\n          {\n            id: '123e4567-e89b-12d3-a456-426614174000',\n            userId: '123e4567-e89b-12d3-a456-426614174000',\n            status: 'PENDING',\n            totalAmount: 99.99,\n            items: [\n              {\n                productId: '123e4567-e89b-12d3-a456-426614174000',\n                quantity: 2,\n                price: 49.99,\n                total: 99.98\n              }\n            ],\n            createdAt: '2024-04-29T09:00:00.000Z'\n          }\n        ],\n        meta: {\n          total: 100,\n          page: 1,\n          limit: 10,\n          totalPages: 10\n        }\n      }\n    }\n  })\n  findAll(\n    @CurrentUser() user: User,\n    @Query('page') page?: number,\n    @Query('limit') limit?: number,\n    @Query('status') status?: OrderStatus,\n    @Query('startDate') startDate?: Date,\n    @Query('endDate') endDate?: Date,\n  ) {\n    return this.ordersService.findAll(page, limit, status, startDate, endDate, user.id);\n  }\n\n  @Get(':id')\n  @ApiOperation({ \n    summary: 'Get order by ID',\n    description: 'Retrieves detailed information about a specific order. Users can only access their own orders.'\n  })\n  @ApiResponse({ \n    status: 200, \n    description: 'Order found successfully',\n    schema: {\n      example: {\n        id: '123e4567-e89b-12d3-a456-426614174000',\n        userId: '123e4567-e89b-12d3-a456-426614174000',\n        status: 'PENDING',\n        totalAmount: 99.99,\n        items: [\n          {\n            productId: '123e4567-e89b-12d3-a456-426614174000',\n            quantity: 2,\n            price: 49.99,\n            total: 99.98\n          }\n        ],\n        createdAt: '2024-04-29T09:00:00.000Z'\n      }\n    }\n  })\n  @ApiResponse({ \n    status: 404, \n    description: 'Order not found',\n    schema: {\n      example: {\n        statusCode: 404,\n        message: 'Order not found',\n        error: 'Not Found'\n      }\n    }\n  })\n  @ApiResponse({ \n    status: 403, \n    description: 'Forbidden - Cannot access another user\\'s order',\n    schema: {\n      example: {\n        statusCode: 403,\n        message: 'You do not have permission to access this order',\n        error: 'Forbidden'\n      }\n    }\n  })\n  async findOne(@Param('id') id: string, @CurrentUser() user: User) {\n    const order = await this.ordersService.findOne(id);\n    if (order.userId !== user.id) {\n      throw new ForbiddenException('You do not have permission to access this order');\n    }\n    return order;\n  }\n\n  @Patch(':id')\n  @ApiOperation({ \n    summary: 'Update order',\n    description: 'Updates the status or notes of an existing order. Users can only update their own orders.'\n  })\n  @ApiBody({ type: UpdateOrderDto })\n  @ApiResponse({ \n    status: 200, \n    description: 'Order updated successfully',\n    schema: {\n      example: {\n        id: '123e4567-e89b-12d3-a456-426614174000',\n        status: 'PROCESSING',\n        notes: 'Order is being processed',\n        updatedAt: '2024-04-29T09:30:00.000Z'\n      }\n    }\n  })\n  @ApiResponse({ \n    status: 404, \n    description: 'Order not found',\n    schema: {\n      example: {\n        statusCode: 404,\n        message: 'Order not found',\n        error: 'Not Found'\n      }\n    }\n  })\n  @ApiResponse({ \n    status: 403, \n    description: 'Forbidden - Cannot update another user\\'s order',\n    schema: {\n      example: {\n        statusCode: 403,\n        message: 'You do not have permission to update this order',\n        error: 'Forbidden'\n      }\n    }\n  })\n  async update(@Param('id') id: string, @Body() updateOrderDto: UpdateOrderDto, @CurrentUser() user: User) {\n    const order = await this.ordersService.findOne(id);\n    if (order.userId !== user.id) {\n      throw new ForbiddenException('You do not have permission to update this order');\n    }\n    return this.ordersService.update(id, updateOrderDto);\n  }\n\n  @Get('analytics/summary')\n  @ApiOperation({ \n    summary: 'Get order analytics summary',\n    description: 'Retrieves summary statistics about orders.'\n  })\n  @ApiQuery({ \n    name: 'startDate', \n    required: false, \n    type: Date,\n    description: 'Start date for analytics period'\n  })\n  @ApiQuery({ \n    name: 'endDate', \n    required: false, \n    type: Date,\n    description: 'End date for analytics period'\n  })\n  @ApiResponse({ \n    status: 200, \n    description: 'Analytics summary retrieved successfully',\n    schema: {\n      example: {\n        totalOrders: 100,\n        totalRevenue: 9999.99,\n        averageOrderValue: 99.99,\n        ordersByStatus: {\n          PENDING: 20,\n          PROCESSING: 30,\n          SHIPPED: 25,\n          DELIVERED: 15,\n          CANCELLED: 5,\n          REFUNDED: 5\n        }\n      }\n    }\n  })\n  getAnalytics(\n    @Query('startDate') startDate?: Date,\n    @Query('endDate') endDate?: Date,\n  ) {\n    return this.ordersService.getOrderAnalytics(startDate, endDate);\n  }\n\n  @Get('analytics/trends')\n  @ApiOperation({ \n    summary: 'Get sales trends',\n    description: 'Retrieves sales trends over a specified time period.'\n  })\n  @ApiQuery({ \n    name: 'startDate', \n    required: true, \n    type: Date,\n    description: 'Start date for trend analysis'\n  })\n  @ApiQuery({ \n    name: 'endDate', \n    required: true, \n    type: Date,\n    description: 'End date for trend analysis'\n  })\n  @ApiQuery({ \n    name: 'interval', \n    required: false, \n    enum: ['day', 'week', 'month'],\n    description: 'Time interval for trend data (default: day)'\n  })\n  @ApiResponse({ \n    status: 200, \n    description: 'Sales trends retrieved successfully',\n    schema: {\n      example: {\n        trends: [\n          {\n            period: '2024-04-01',\n            revenue: 999.99,\n            orderCount: 10,\n            averageOrderValue: 99.99\n          },\n          {\n            period: '2024-04-02',\n            revenue: 1499.99,\n            orderCount: 15,\n            averageOrderValue: 99.99\n          }\n        ]\n      }\n    }\n  })\n  getSalesTrends(\n    @Query('startDate') startDate: Date,\n    @Query('endDate') endDate: Date,\n    @Query('interval') interval: 'day' | 'week' | 'month' = 'day',\n  ) {\n    return this.ordersService.getSalesTrends(startDate, endDate, interval);\n  }\n} \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/OrdersModule.html":{"url":"modules/OrdersModule.html","title":"module - OrdersModule","body":"\n                   \n\n\n\n\n    Modules\n    OrdersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_OrdersModule\n\n\n\ncluster_OrdersModule_providers\n\n\n\ncluster_OrdersModule_exports\n\n\n\ncluster_OrdersModule_imports\n\n\n\n\nProductsModule\n\nProductsModule\n\n\n\nOrdersModule\n\nOrdersModule\n\nOrdersModule -->\n\nProductsModule->OrdersModule\n\n\n\n\n\nOrdersService \n\nOrdersService \n\nOrdersService  -->\n\nOrdersModule->OrdersService \n\n\n\n\n\nOrdersService\n\nOrdersService\n\nOrdersModule -->\n\nOrdersService->OrdersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/orders/orders.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            OrdersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            OrdersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ProductsModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            OrdersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { OrdersService } from './orders.service';\nimport { OrdersController } from './orders.controller';\nimport { Order } from './entities/order.entity';\nimport { OrderItem } from './entities/order-item.entity';\nimport { ProductsModule } from '../products/products.module';\nimport { Users } from '../users/entities/users.entity';\nimport { Address } from '../users/entities/address.entity';\nimport { Product } from '../products/entities/product.entity';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Order, OrderItem, Users, Address, Product]),\n    ProductsModule,\n  ],\n  controllers: [OrdersController],\n  providers: [OrdersService],\n  exports: [OrdersService],\n})\nexport class OrdersModule {} \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OrdersService.html":{"url":"injectables/OrdersService.html","title":"injectable - OrdersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  OrdersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/orders/orders.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getCustomerAnalytics\n                            \n                            \n                                    Async\n                                getOrderAnalytics\n                            \n                            \n                                    Async\n                                getProductAnalytics\n                            \n                            \n                                    Async\n                                getRevenueAnalytics\n                            \n                            \n                                    Async\n                                getSalesTrends\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateBulkStatus\n                            \n                            \n                                    Async\n                                updateStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(orderRepository: Repository, orderItemRepository: Repository, productRepository: Repository, userRepository: Repository, addressRepository: Repository, productsService: ProductsService)\n                    \n                \n                        \n                            \n                                Defined in src/orders/orders.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        orderRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        orderItemRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        productRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        addressRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        productsService\n                                                  \n                                                        \n                                                                        ProductsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createOrderDto: CreateOrderDto, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/orders/orders.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createOrderDto\n                                            \n                                                            CreateOrderDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(page: number, limit: number, status?: OrderStatus, startDate?: Date, endDate?: Date, userId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/orders/orders.service.ts:90\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    1\n                                            \n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    10\n                                            \n\n                                        \n                                        \n                                                status\n                                            \n                                                            OrderStatus\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                startDate\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                endDate\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/orders/orders.service.ts:135\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCustomerAnalytics\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCustomerAnalytics(startDate?: Date, endDate?: Date)\n                \n            \n\n\n                    \n                        \n                            Defined in src/orders/orders.service.ts:279\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                startDate\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                endDate\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getOrderAnalytics\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOrderAnalytics(startDate?: Date, endDate?: Date)\n                \n            \n\n\n                    \n                        \n                            Defined in src/orders/orders.service.ts:206\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                startDate\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                endDate\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getProductAnalytics\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProductAnalytics(startDate?: Date, endDate?: Date)\n                \n            \n\n\n                    \n                        \n                            Defined in src/orders/orders.service.ts:300\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                startDate\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                endDate\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getRevenueAnalytics\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRevenueAnalytics(startDate: Date, endDate: Date, interval: \"day\" | \"week\" | \"month\")\n                \n            \n\n\n                    \n                        \n                            Defined in src/orders/orders.service.ts:262\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                startDate\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                endDate\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                interval\n                                            \n                                                        \"day\" | \"week\" | \"month\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'day'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getSalesTrends\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSalesTrends(startDate: Date, endDate: Date, interval: \"day\" | \"week\" | \"month\")\n                \n            \n\n\n                    \n                        \n                            Defined in src/orders/orders.service.ts:249\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                startDate\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                endDate\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                interval\n                                            \n                                                        \"day\" | \"week\" | \"month\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'day'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateOrderDto: UpdateOrderDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/orders/orders.service.ts:148\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateOrderDto\n                                            \n                                                            UpdateOrderDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateBulkStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateBulkStatus(orderIds: string[], status: OrderStatus, adminNotes?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/orders/orders.service.ts:183\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                orderIds\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                status\n                                            \n                                                            OrderStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                adminNotes\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(id: string, status: OrderStatus, adminNotes?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/orders/orders.service.ts:167\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                status\n                                            \n                                                            OrderStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                adminNotes\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, Between, LessThanOrEqual, MoreThanOrEqual, In } from 'typeorm';\nimport { Order } from './entities/order.entity';\nimport { OrderItem } from './entities/order-item.entity';\nimport { CreateOrderDto } from './dto/create-order.dto';\nimport { UpdateOrderDto } from './dto/update-order.dto';\nimport { OrderStatus } from './enums/order-status.enum';\nimport { Product } from '../products/entities/product.entity';\nimport { Users } from '../users/entities/users.entity';\nimport { Address } from '../users/entities/address.entity';\nimport { ProductsService } from '../products/products.service';\n\n@Injectable()\nexport class OrdersService {\n  constructor(\n    @InjectRepository(Order)\n    private readonly orderRepository: Repository,\n    @InjectRepository(OrderItem)\n    private readonly orderItemRepository: Repository,\n    @InjectRepository(Product)\n    private readonly productRepository: Repository,\n    @InjectRepository(Users)\n    private readonly userRepository: Repository,\n    @InjectRepository(Address)\n    private readonly addressRepository: Repository,\n    private readonly productsService: ProductsService,\n  ) {}\n\n  async create(createOrderDto: CreateOrderDto, userId: string) {\n    // Create initial order\n    const order = new Order();\n    order.userId = userId;\n    order.status = OrderStatus.PENDING;\n    order.notes = createOrderDto.notes ?? null;\n    order.paymentDetails = {\n      method: createOrderDto.paymentMethod,\n      status: 'PENDING',\n      amount: 0,\n      transactionId: ''\n    };\n    order.totalAmount = 0; // Initial amount, will be updated after calculating items\n\n    const savedOrder = await this.orderRepository.save(order);\n\n    let totalAmount = 0;\n    const orderItems: OrderItem[] = [];\n\n    for (const item of createOrderDto.items) {\n      const product = await this.productRepository.findOne({\n        where: { id: item.productId },\n      });\n\n      if (!product) {\n        throw new NotFoundException(`Product with ID ${item.productId} not found`);\n      }\n\n      const orderItem = this.orderItemRepository.create({\n        orderId: savedOrder.id,\n        productId: item.productId,\n        quantity: item.quantity,\n        price: product.price,\n        total: product.price * item.quantity,\n      });\n\n      totalAmount += orderItem.total;\n      orderItems.push(orderItem);\n    }\n\n    await this.orderItemRepository.save(orderItems);\n    \n    // Update order with final amount\n    savedOrder.totalAmount = totalAmount;\n    \n    // Update payment details with final amount\n    if (!savedOrder.paymentDetails) {\n      savedOrder.paymentDetails = {\n        method: createOrderDto.paymentMethod,\n        status: 'PENDING',\n        amount: totalAmount,\n        transactionId: ''\n      };\n    } else {\n      savedOrder.paymentDetails.amount = totalAmount;\n    }\n    \n    return this.orderRepository.save(savedOrder);\n  }\n\n  async findAll(\n    page = 1,\n    limit = 10,\n    status?: OrderStatus,\n    startDate?: Date,\n    endDate?: Date,\n    userId?: string,\n  ) {\n    const where: any = {};\n    \n    if (status) {\n      where.status = status;\n    }\n\n    if (userId) {\n      where.userId = userId;\n    }\n\n    if (startDate && endDate) {\n      where.createdAt = Between(startDate, endDate);\n    } else if (startDate) {\n      where.createdAt = MoreThanOrEqual(startDate);\n    } else if (endDate) {\n      where.createdAt = LessThanOrEqual(endDate);\n    }\n\n    const [orders, total] = await this.orderRepository.findAndCount({\n      where,\n      relations: ['items', 'items.product', 'user'],\n      skip: (page - 1) * limit,\n      take: limit,\n      order: { createdAt: 'DESC' },\n    });\n\n    return {\n      data: orders,\n      meta: {\n        total,\n        page,\n        limit,\n        totalPages: Math.ceil(total / limit),\n      },\n    };\n  }\n\n  async findOne(id: string) {\n    const order = await this.orderRepository.findOne({\n      where: { id },\n      relations: ['items', 'items.product', 'user'],\n    });\n\n    if (!order) {\n      throw new NotFoundException(`Order with ID ${id} not found`);\n    }\n\n    return order;\n  }\n\n  async update(id: string, updateOrderDto: UpdateOrderDto) {\n    const order = await this.findOne(id);\n\n    if (updateOrderDto.status) {\n      order.status = updateOrderDto.status;\n    }\n\n    if (updateOrderDto.notes) {\n      order.notes = updateOrderDto.notes;\n    }\n\n    if (updateOrderDto.refundAmount) {\n      order.refundAmount = updateOrderDto.refundAmount;\n      order.status = OrderStatus.REFUNDED;\n    }\n\n    return this.orderRepository.save(order);\n  }\n\n  async updateStatus(id: string, status: OrderStatus, adminNotes?: string) {\n    const order = await this.orderRepository.findOne({ where: { id } });\n    if (!order) {\n      throw new NotFoundException(`Order with ID ${id} not found`);\n    }\n\n    order.status = status;\n    if (adminNotes) {\n      order.notes = order.notes \n        ? `${order.notes}\\n[Admin Note]: ${adminNotes}`\n        : `[Admin Note]: ${adminNotes}`;\n    }\n\n    return this.orderRepository.save(order);\n  }\n\n  async updateBulkStatus(orderIds: string[], status: OrderStatus, adminNotes?: string) {\n    const orders = await this.orderRepository.find({\n      where: { id: In(orderIds) },\n    });\n\n    if (orders.length !== orderIds.length) {\n      throw new NotFoundException('Some orders not found');\n    }\n\n    const updatedOrders = orders.map(order => {\n      order.status = status;\n      if (adminNotes) {\n        order.notes = order.notes \n          ? `${order.notes}\\n[Admin Note]: ${adminNotes}`\n          : `[Admin Note]: ${adminNotes}`;\n      }\n      return order;\n    });\n\n    return this.orderRepository.save(updatedOrders);\n  }\n\n  // Analytics methods\n  async getOrderAnalytics(startDate?: Date, endDate?: Date) {\n    const where: any = {};\n    \n    if (startDate && endDate) {\n      where.createdAt = Between(startDate, endDate);\n    } else if (startDate) {\n      where.createdAt = MoreThanOrEqual(startDate);\n    } else if (endDate) {\n      where.createdAt = LessThanOrEqual(endDate);\n    }\n\n    const orders = await this.orderRepository.find({\n      where,\n      relations: ['items'],\n    });\n\n    const totalOrders = orders.length;\n    const totalRevenue = orders.reduce((sum, order) => sum + order.totalAmount, 0);\n    const averageOrderValue = totalOrders > 0 ? totalRevenue / totalOrders : 0;\n\n    const ordersByStatus = orders.reduce((acc, order) => {\n      acc[order.status] = (acc[order.status] || 0) + 1;\n      return acc;\n    }, {});\n\n    // Get popular products\n    const orderItems = await this.orderItemRepository\n      .createQueryBuilder('orderItem')\n      .select('orderItem.productId, SUM(orderItem.quantity) as totalQuantity')\n      .groupBy('orderItem.productId')\n      .orderBy('totalQuantity', 'DESC')\n      .limit(10)\n      .getRawMany();\n\n    return {\n      totalOrders,\n      totalRevenue,\n      averageOrderValue,\n      ordersByStatus,\n      popularProducts: orderItems,\n    };\n  }\n\n  async getSalesTrends(startDate: Date, endDate: Date, interval: 'day' | 'week' | 'month' = 'day') {\n    const query = this.orderRepository\n      .createQueryBuilder('order')\n      .select(`DATE_TRUNC('${interval}', order.createdAt) as date`)\n      .addSelect('COUNT(*) as orderCount')\n      .addSelect('SUM(order.totalAmount) as totalRevenue')\n      .where('order.createdAt BETWEEN :startDate AND :endDate', { startDate, endDate })\n      .groupBy('date')\n      .orderBy('date', 'ASC');\n\n    return query.getRawMany();\n  }\n\n  async getRevenueAnalytics(startDate: Date, endDate: Date, interval: 'day' | 'week' | 'month' = 'day') {\n    const query = this.orderRepository\n      .createQueryBuilder('order')\n      .select([\n        `DATE_TRUNC('${interval}', order.createdAt) as period`,\n        'SUM(order.totalAmount) as revenue',\n        'COUNT(order.id) as orderCount',\n        'AVG(order.totalAmount) as averageOrderValue'\n      ])\n      .where('order.createdAt BETWEEN :startDate AND :endDate', { startDate, endDate })\n      .andWhere('order.status != :cancelled', { cancelled: OrderStatus.CANCELLED })\n      .groupBy('period')\n      .orderBy('period', 'ASC');\n\n    return query.getRawMany();\n  }\n\n  async getCustomerAnalytics(startDate?: Date, endDate?: Date) {\n    const query = this.userRepository\n      .createQueryBuilder('user')\n      .select([\n        'user.id',\n        'user.email',\n        'COUNT(order.id) as orderCount',\n        'SUM(order.totalAmount) as totalSpent',\n        'MAX(order.createdAt) as lastOrderDate'\n      ])\n      .leftJoin('user.orders', 'order')\n      .groupBy('user.id')\n      .orderBy('totalSpent', 'DESC');\n\n    if (startDate && endDate) {\n      query.where('order.createdAt BETWEEN :startDate AND :endDate', { startDate, endDate });\n    }\n\n    return query.getRawMany();\n  }\n\n  async getProductAnalytics(startDate?: Date, endDate?: Date) {\n    const query = this.productRepository\n      .createQueryBuilder('product')\n      .select([\n        'product.id',\n        'product.name',\n        'SUM(orderItem.quantity) as totalQuantity',\n        'SUM(orderItem.total) as totalRevenue',\n        'COUNT(DISTINCT order.id) as orderCount'\n      ])\n      .leftJoin('product.orderItems', 'orderItem')\n      .leftJoin('orderItem.order', 'order')\n      .groupBy('product.id')\n      .orderBy('totalRevenue', 'DESC');\n\n    if (startDate && endDate) {\n      query.where('order.createdAt BETWEEN :startDate AND :endDate', { startDate, endDate });\n    }\n\n    return query.getRawMany();\n  }\n} \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PaginatedResponse.html":{"url":"interfaces/PaginatedResponse.html","title":"interface - PaginatedResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PaginatedResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/dto/admin-user-query.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface for paginated response data.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            items\n                                        \n                                \n                                \n                                        \n                                            meta\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        items\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        items:     T[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Array of items for the current page\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        meta\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        meta:         PaginationMeta\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PaginationMeta\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Pagination metadata\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { IsOptional, IsString, IsBoolean, IsDateString, IsEnum, IsInt, Min, Max } from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { Role } from '../../users/enums/roles.enum';\n\n/**\n * Interface for pagination metadata.\n * @interface PaginationMeta\n * @description Contains information about the current page and total results.\n */\nexport interface PaginationMeta {\n  /**\n   * Total number of items\n   * @type {number}\n   */\n  total: number;\n\n  /**\n   * Current page number\n   * @type {number}\n   */\n  page: number;\n\n  /**\n   * Number of items per page\n   * @type {number}\n   */\n  limit: number;\n\n  /**\n   * Total number of pages\n   * @type {number}\n   */\n  totalPages: number;\n\n  /**\n   * Optional message associated with the pagination metadata\n   * @type {string}\n   */\n  message?: string;\n}\n\n/**\n * Interface for paginated response data.\n * @interface PaginatedResponse\n * @description Generic interface for paginated API responses.\n * @template T - The type of items in the response\n */\nexport interface PaginatedResponse {\n  /**\n   * Array of items for the current page\n   * @type {T[]}\n   */\n  items: T[];\n\n  /**\n   * Pagination metadata\n   * @type {PaginationMeta}\n   */\n  meta: PaginationMeta;\n}\n\n/**\n * Data Transfer Object for admin user queries.\n * @class AdminUserQueryDto\n * @description Defines the structure and validation rules for admin user queries.\n */\nexport class AdminUserQueryDto {\n  /**\n   * Page number for pagination.\n   * @type {number}\n   * @default 1\n   */\n  @ApiPropertyOptional({ description: 'Page number', default: 1 })\n  @IsOptional()\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  page?: number = 1;\n\n  /**\n   * Number of items per page.\n   * @type {number}\n   * @default 10\n   */\n  @ApiPropertyOptional({ description: 'Number of items per page', default: 10 })\n  @IsOptional()\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @Max(100)\n  limit?: number = 10;\n\n  /**\n   * Search term for filtering users.\n   * @type {string}\n   */\n  @ApiPropertyOptional({ description: 'Search term for firstName, lastName, or email' })\n  @IsOptional()\n  @IsString()\n  search?: string;\n\n  /**\n   * Role filter for users.\n   * @type {Role}\n   */\n  @ApiPropertyOptional({ enum: Role, description: 'Filter by user role' })\n  @IsOptional()\n  @IsEnum(Role)\n  role?: Role;\n\n  /**\n   * Active status filter.\n   * @type {boolean}\n   */\n  @ApiPropertyOptional({ description: 'Filter by active status' })\n  @IsOptional()\n  @Type(() => Boolean)\n  @IsBoolean()\n  isActive?: boolean;\n\n  @ApiPropertyOptional({ description: 'Filter by email verification status' })\n  @IsOptional()\n  @Type(() => Boolean)\n  @IsBoolean()\n  isEmailVerified?: boolean;\n\n  @ApiPropertyOptional({ description: 'Filter by creation date (after)' })\n  @IsOptional()\n  @IsDateString()\n  createdAfter?: string;\n\n  @ApiPropertyOptional({ description: 'Filter by creation date (before)' })\n  @IsOptional()\n  @IsDateString()\n  createdBefore?: string;\n\n  @ApiPropertyOptional({ description: 'Filter by last login date (after)' })\n  @IsOptional()\n  @IsDateString()\n  lastLoginAfter?: string;\n\n  @ApiPropertyOptional({ description: 'Filter by last login date (before)' })\n  @IsOptional()\n  @IsDateString()\n  lastLoginBefore?: string;\n\n  @ApiPropertyOptional({ \n    description: 'Sort by field',\n    enum: ['createdAt', 'lastLoginAt', 'firstName', 'lastName', 'email', 'role']\n  })\n  @IsOptional()\n  @IsString()\n  sortBy?: string;\n\n  @ApiPropertyOptional({ \n    description: 'Sort order',\n    enum: ['asc', 'desc'],\n    default: 'desc'\n  })\n  @IsOptional()\n  @IsString()\n  sortOrder?: 'asc' | 'desc';\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PaginatedResponse-1.html":{"url":"interfaces/PaginatedResponse-1.html","title":"interface - PaginatedResponse-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PaginatedResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/interfaces/paginated-response.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface for paginated response data.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            meta\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Array of items for the current page\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        meta\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        meta:         PaginationMeta\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PaginationMeta\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Pagination metadata\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface PaginationMeta {\n  /**\n   * Total number of items\n   * @type {number}\n   */\n  total: number;\n\n  /**\n   * Current page number\n   * @type {number}\n   */\n  page: number;\n\n  /**\n   * Number of items per page\n   * @type {number}\n   */\n  limit: number;\n\n  /**\n   * Total number of pages\n   * @type {number}\n   */\n  totalPages: number;\n}\n\n/**\n * Interface for paginated response data.\n * @interface PaginatedResponse\n * @description Generic interface for paginated API responses.\n * @template T - The type of items in the response\n */\nexport interface PaginatedResponse {\n  /**\n   * Array of items for the current page\n   * @type {T[]}\n   */\n  data: T[];\n\n  /**\n   * Pagination metadata\n   * @type {PaginationMeta}\n   */\n  meta: PaginationMeta;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PaginationMeta.html":{"url":"interfaces/PaginationMeta.html","title":"interface - PaginationMeta","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PaginationMeta\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/dto/admin-user-query.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface for pagination metadata.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            limit\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            page\n                                        \n                                \n                                \n                                        \n                                            total\n                                        \n                                \n                                \n                                        \n                                            totalPages\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        limit\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        limit:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Number of items per page\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional message associated with the pagination metadata\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        page\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        page:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Current page number\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        total\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        total:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Total number of items\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        totalPages\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        totalPages:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Total number of pages\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { IsOptional, IsString, IsBoolean, IsDateString, IsEnum, IsInt, Min, Max } from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { Role } from '../../users/enums/roles.enum';\n\n/**\n * Interface for pagination metadata.\n * @interface PaginationMeta\n * @description Contains information about the current page and total results.\n */\nexport interface PaginationMeta {\n  /**\n   * Total number of items\n   * @type {number}\n   */\n  total: number;\n\n  /**\n   * Current page number\n   * @type {number}\n   */\n  page: number;\n\n  /**\n   * Number of items per page\n   * @type {number}\n   */\n  limit: number;\n\n  /**\n   * Total number of pages\n   * @type {number}\n   */\n  totalPages: number;\n\n  /**\n   * Optional message associated with the pagination metadata\n   * @type {string}\n   */\n  message?: string;\n}\n\n/**\n * Interface for paginated response data.\n * @interface PaginatedResponse\n * @description Generic interface for paginated API responses.\n * @template T - The type of items in the response\n */\nexport interface PaginatedResponse {\n  /**\n   * Array of items for the current page\n   * @type {T[]}\n   */\n  items: T[];\n\n  /**\n   * Pagination metadata\n   * @type {PaginationMeta}\n   */\n  meta: PaginationMeta;\n}\n\n/**\n * Data Transfer Object for admin user queries.\n * @class AdminUserQueryDto\n * @description Defines the structure and validation rules for admin user queries.\n */\nexport class AdminUserQueryDto {\n  /**\n   * Page number for pagination.\n   * @type {number}\n   * @default 1\n   */\n  @ApiPropertyOptional({ description: 'Page number', default: 1 })\n  @IsOptional()\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  page?: number = 1;\n\n  /**\n   * Number of items per page.\n   * @type {number}\n   * @default 10\n   */\n  @ApiPropertyOptional({ description: 'Number of items per page', default: 10 })\n  @IsOptional()\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @Max(100)\n  limit?: number = 10;\n\n  /**\n   * Search term for filtering users.\n   * @type {string}\n   */\n  @ApiPropertyOptional({ description: 'Search term for firstName, lastName, or email' })\n  @IsOptional()\n  @IsString()\n  search?: string;\n\n  /**\n   * Role filter for users.\n   * @type {Role}\n   */\n  @ApiPropertyOptional({ enum: Role, description: 'Filter by user role' })\n  @IsOptional()\n  @IsEnum(Role)\n  role?: Role;\n\n  /**\n   * Active status filter.\n   * @type {boolean}\n   */\n  @ApiPropertyOptional({ description: 'Filter by active status' })\n  @IsOptional()\n  @Type(() => Boolean)\n  @IsBoolean()\n  isActive?: boolean;\n\n  @ApiPropertyOptional({ description: 'Filter by email verification status' })\n  @IsOptional()\n  @Type(() => Boolean)\n  @IsBoolean()\n  isEmailVerified?: boolean;\n\n  @ApiPropertyOptional({ description: 'Filter by creation date (after)' })\n  @IsOptional()\n  @IsDateString()\n  createdAfter?: string;\n\n  @ApiPropertyOptional({ description: 'Filter by creation date (before)' })\n  @IsOptional()\n  @IsDateString()\n  createdBefore?: string;\n\n  @ApiPropertyOptional({ description: 'Filter by last login date (after)' })\n  @IsOptional()\n  @IsDateString()\n  lastLoginAfter?: string;\n\n  @ApiPropertyOptional({ description: 'Filter by last login date (before)' })\n  @IsOptional()\n  @IsDateString()\n  lastLoginBefore?: string;\n\n  @ApiPropertyOptional({ \n    description: 'Sort by field',\n    enum: ['createdAt', 'lastLoginAt', 'firstName', 'lastName', 'email', 'role']\n  })\n  @IsOptional()\n  @IsString()\n  sortBy?: string;\n\n  @ApiPropertyOptional({ \n    description: 'Sort order',\n    enum: ['asc', 'desc'],\n    default: 'desc'\n  })\n  @IsOptional()\n  @IsString()\n  sortOrder?: 'asc' | 'desc';\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PaginationMeta-1.html":{"url":"interfaces/PaginationMeta-1.html","title":"interface - PaginationMeta-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PaginationMeta\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/interfaces/paginated-response.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface for pagination metadata.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            limit\n                                        \n                                \n                                \n                                        \n                                            page\n                                        \n                                \n                                \n                                        \n                                            total\n                                        \n                                \n                                \n                                        \n                                            totalPages\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        limit\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        limit:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Number of items per page\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        page\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        page:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Current page number\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        total\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        total:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Total number of items\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        totalPages\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        totalPages:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Total number of pages\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface PaginationMeta {\n  /**\n   * Total number of items\n   * @type {number}\n   */\n  total: number;\n\n  /**\n   * Current page number\n   * @type {number}\n   */\n  page: number;\n\n  /**\n   * Number of items per page\n   * @type {number}\n   */\n  limit: number;\n\n  /**\n   * Total number of pages\n   * @type {number}\n   */\n  totalPages: number;\n}\n\n/**\n * Interface for paginated response data.\n * @interface PaginatedResponse\n * @description Generic interface for paginated API responses.\n * @template T - The type of items in the response\n */\nexport interface PaginatedResponse {\n  /**\n   * Array of items for the current page\n   * @type {T[]}\n   */\n  data: T[];\n\n  /**\n   * Pagination metadata\n   * @type {PaginationMeta}\n   */\n  meta: PaginationMeta;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Product.html":{"url":"entities/Product.html","title":"entity - Product","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Product\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/entities/product.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Product entity representing a product in the e-commerce system.\npricing, inventory, and categorization.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                brand\n                            \n                            \n                                    \n                                    \n                                careInstructions\n                            \n                            \n                                    \n                                    \n                                category\n                            \n                            \n                                    \n                                    \n                                colors\n                            \n                            \n                                    \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                discountedPrice\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                images\n                            \n                            \n                                    \n                                    \n                                isActive\n                            \n                            \n                                    \n                                    \n                                isBestSeller\n                            \n                            \n                                    \n                                    \n                                isFeatured\n                            \n                            \n                                    \n                                    \n                                isNewArrival\n                            \n                            \n                                    \n                                    \n                                isOnSale\n                            \n                            \n                                    \n                                    \n                                material\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                price\n                            \n                            \n                                    \n                                    \n                                rating\n                            \n                            \n                                    \n                                    \n                                reviewCount\n                            \n                            \n                                    \n                                    \n                                sizes\n                            \n                            \n                                    \n                                    \n                                specifications\n                            \n                            \n                                    \n                                    \n                                stockQuantity\n                            \n                            \n                                    \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    \n                                viewCount\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        brand\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Product brand name', maxLength: 255, nullable: true})@Column({length: 255, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:103\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        careInstructions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Product care instructions', maxLength: 255, nullable: true})@Column({length: 255, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:111\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ProductCategory\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The category of the product', enum: ProductCategory})@Column({type: 'enum', enum: ProductCategory, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        colors\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Available colors for the product', type: undefined, default: undefined})@Column('varchar', {array: true, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The date when the product was created'})@CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:127\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The detailed description of the product'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        discountedPrice\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The discounted price of the product (if available)', type: 'number', format: 'decimal', nullable: true})@Column({type: 'decimal', precision: 10, scale: 2, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The unique identifier of the product'})@PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        images\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Product images URLs', type: undefined, default: undefined})@Column('varchar', {array: true, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Whether the product is currently active', type: 'boolean', default: true})@Column({type: 'boolean', default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        isBestSeller\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Whether the product is a best seller', type: 'boolean', default: false})@Column({type: 'boolean', default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:119\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        isFeatured\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Whether the product is featured', type: 'boolean', default: false})@Column({type: 'boolean', default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        isNewArrival\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Whether the product is a new arrival', type: 'boolean', default: false})@Column({type: 'boolean', default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:115\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        isOnSale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Whether the product is on sale', type: 'boolean', default: false})@Column({type: 'boolean', default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:123\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        material\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Product material', maxLength: 255, nullable: true})@Column({length: 255, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:107\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The name of the product', maxLength: 100})@Column({length: 100})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The price of the product', type: 'number', format: 'decimal'})@Column({type: 'decimal', precision: 10, scale: 2})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        rating\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Average product rating', type: 'number', format: 'decimal', default: 0})@Column({type: 'decimal', precision: 3, scale: 2, default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        reviewCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Number of product reviews', type: 'integer', default: 0})@Column({type: 'int', default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        sizes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Available sizes for the product', type: undefined, default: undefined})@Column('varchar', {array: true, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        specifications\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Product specifications in JSON format', type: 'object', additionalProperties: true, nullable: true})@Column({type: 'jsonb', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:99\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        stockQuantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The current stock quantity of the product', type: 'integer', default: 0})@Column({type: 'int', default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The date when the product was last updated'})@UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:131\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        viewCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Number of times the product has been viewed', type: 'integer', default: 0})@Column({type: 'int', default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:82\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, PrimaryGeneratedColumn, CreateDateColumn, UpdateDateColumn, ManyToOne, OneToMany, JoinColumn } from 'typeorm';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport enum ProductCategory {\n  ELECTRONICS = 'ELECTRONICS',\n  CLOTHING = 'CLOTHING',\n  T_SHIRTS = 'T_SHIRTS',\n  SHIRTS = 'SHIRTS',\n  PANTS = 'PANTS',\n  SHOES = 'SHOES',\n  ACCESSORIES = 'ACCESSORIES',\n  BOOKS = 'BOOKS',\n  HOME = 'HOME',\n  SPORTS = 'SPORTS',\n  BEAUTY = 'BEAUTY',\n  FOOD = 'FOOD',\n  OTHER = 'OTHER'\n}\n\n/**\n * Product entity representing a product in the e-commerce system.\n * @class Product\n * @description This entity stores all product-related information including basic details,\n * pricing, inventory, and categorization.\n */\n@Entity('products')\nexport class Product {\n  @ApiProperty({ description: 'The unique identifier of the product' })\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @ApiProperty({ description: 'The name of the product', maxLength: 100 })\n  @Column({ length: 100 })\n  name: string;\n\n  @ApiProperty({ description: 'The detailed description of the product' })\n  @Column({ type: 'text' })\n  description: string;\n\n  @ApiProperty({ description: 'The price of the product', type: 'number', format: 'decimal' })\n  @Column({ type: 'decimal', precision: 10, scale: 2 })\n  price: number;\n\n  @ApiProperty({ description: 'The discounted price of the product (if available)', type: 'number', format: 'decimal', nullable: true })\n  @Column({ type: 'decimal', precision: 10, scale: 2, nullable: true })\n  discountedPrice: number;\n\n  @ApiProperty({ description: 'The current stock quantity of the product', type: 'integer', default: 0 })\n  @Column({ type: 'int', default: 0 })\n  stockQuantity: number;\n\n  @ApiProperty({ description: 'The category of the product', enum: ProductCategory })\n  @Column({\n    type: 'enum',\n    enum: ProductCategory,\n    nullable: true\n  })\n  category: ProductCategory;\n\n  @ApiProperty({ description: 'Available sizes for the product', type: [String], default: [] })\n  @Column('varchar', { array: true, default: [] })\n  sizes: string[];\n\n  @ApiProperty({ description: 'Available colors for the product', type: [String], default: [] })\n  @Column('varchar', { array: true, default: [] })\n  colors: string[];\n\n  @ApiProperty({ description: 'Product images URLs', type: [String], default: [] })\n  @Column('varchar', { array: true, default: [] })\n  images: string[];\n\n  @ApiProperty({ description: 'Whether the product is currently active', type: 'boolean', default: true })\n  @Column({ type: 'boolean', default: true })\n  isActive: boolean;\n\n  @ApiProperty({ description: 'Whether the product is featured', type: 'boolean', default: false })\n  @Column({ type: 'boolean', default: false })\n  isFeatured: boolean;\n\n  @ApiProperty({ description: 'Number of times the product has been viewed', type: 'integer', default: 0 })\n  @Column({ type: 'int', default: 0 })\n  viewCount: number;\n\n  @ApiProperty({ description: 'Average product rating', type: 'number', format: 'decimal', default: 0 })\n  @Column({ type: 'decimal', precision: 3, scale: 2, default: 0 })\n  rating: number;\n\n  @ApiProperty({ description: 'Number of product reviews', type: 'integer', default: 0 })\n  @Column({ type: 'int', default: 0 })\n  reviewCount: number;\n\n  @ApiProperty({ \n    description: 'Product specifications in JSON format', \n    type: 'object',\n    additionalProperties: true,\n    nullable: true \n  })\n  @Column({ type: 'jsonb', nullable: true })\n  specifications: Record;\n\n  @ApiProperty({ description: 'Product brand name', maxLength: 255, nullable: true })\n  @Column({ length: 255, nullable: true })\n  brand: string;\n\n  @ApiProperty({ description: 'Product material', maxLength: 255, nullable: true })\n  @Column({ length: 255, nullable: true })\n  material: string;\n\n  @ApiProperty({ description: 'Product care instructions', maxLength: 255, nullable: true })\n  @Column({ length: 255, nullable: true })\n  careInstructions: string;\n\n  @ApiProperty({ description: 'Whether the product is a new arrival', type: 'boolean', default: false })\n  @Column({ type: 'boolean', default: false })\n  isNewArrival: boolean;\n\n  @ApiProperty({ description: 'Whether the product is a best seller', type: 'boolean', default: false })\n  @Column({ type: 'boolean', default: false })\n  isBestSeller: boolean;\n\n  @ApiProperty({ description: 'Whether the product is on sale', type: 'boolean', default: false })\n  @Column({ type: 'boolean', default: false })\n  isOnSale: boolean;\n\n  @ApiProperty({ description: 'The date when the product was created' })\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @ApiProperty({ description: 'The date when the product was last updated' })\n  @UpdateDateColumn()\n  updatedAt: Date;\n} \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProductQueryDto.html":{"url":"classes/ProductQueryDto.html","title":"class - ProductQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProductQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/dto/product-query.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object for product query parameters.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                brand\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                category\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                color\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                isBestSeller\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                isFeatured\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                isNewArrival\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                isOnSale\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                material\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                maxPrice\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                minPrice\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                search\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                size\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                sortBy\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                sortOrder\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        brand\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filter by brand', example: 'Elevate Fashion'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/product-query.dto.ts:132\n                        \n                    \n\n            \n                \n                    Brand filter for products.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ProductCategory\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filter by product category', enum: ProductCategory})@IsEnum(ProductCategory)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/product-query.dto.ts:68\n                        \n                    \n\n            \n                \n                    Category filter for products.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        color\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filter by color', example: 'Black'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/product-query.dto.ts:120\n                        \n                    \n\n            \n                \n                    Color filter for products.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        isBestSeller\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filter best sellers', default: undefined, type: Boolean})@Transform( => )@IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/product-query.dto.ts:195\n                        \n                    \n\n            \n                \n                    Filter for best seller products.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        isFeatured\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filter featured products', default: undefined, type: Boolean})@Transform( => )@IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/product-query.dto.ts:161\n                        \n                    \n\n            \n                \n                    Filter for featured products.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        isNewArrival\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filter new arrivals', default: undefined, type: Boolean})@Transform( => )@IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/product-query.dto.ts:178\n                        \n                    \n\n            \n                \n                    Filter for new arrival products.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        isOnSale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filter products on sale', default: undefined, type: Boolean})@Transform( => )@IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/product-query.dto.ts:212\n                        \n                    \n\n            \n                \n                    Filter for products on sale.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of items per page', default: 10, minimum: 1, maximum: 100})@Type(undefined)@IsNumber()@Min(1)@Max(100)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/product-query.dto.ts:44\n                        \n                    \n\n            \n                \n                    Number of items per page.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        material\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filter by material', example: 'Cotton'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/product-query.dto.ts:144\n                        \n                    \n\n            \n                \n                    Material filter for products.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        maxPrice\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filter by maximum price', example: 50})@Type(undefined)@IsNumber()@Min(0)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/product-query.dto.ts:96\n                        \n                    \n\n            \n                \n                    Maximum price filter.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        minPrice\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filter by minimum price', example: 10})@Type(undefined)@IsNumber()@Min(0)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/product-query.dto.ts:82\n                        \n                    \n\n            \n                \n                    Minimum price filter.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Page number for pagination', default: 1, minimum: 1})@Type(undefined)@IsNumber()@Min(1)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/product-query.dto.ts:26\n                        \n                    \n\n            \n                \n                    Page number for pagination.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        search\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Search term for product name or description', example: 'cotton'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/product-query.dto.ts:56\n                        \n                    \n\n            \n                \n                    Search term for filtering products by name or description.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        size\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filter by size', example: 'M'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/product-query.dto.ts:108\n                        \n                    \n\n            \n                \n                    Size filter for products.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        sortBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Sort field', example: 'price'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/product-query.dto.ts:225\n                        \n                    \n\n            \n                \n                    Field to sort products by.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        sortOrder\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"asc\" | \"desc\"\n\n                    \n                \n                \n                    \n                        Default value : 'asc'\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Sort order (asc or desc)', example: 'asc', enum: undefined})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/product-query.dto.ts:239\n                        \n                    \n\n            \n                \n                    Sort order (ASC or DESC).\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsEnum, IsNumber, IsBoolean, IsString, Min, Max } from 'class-validator';\nimport { Type, Transform } from 'class-transformer';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\nimport { ProductCategory } from '../enums/product-category.enum';\n\n/**\n * Data Transfer Object for product query parameters.\n * @class ProductQueryDto\n * @description Defines the structure and validation rules for product filtering, pagination, and sorting.\n */\nexport class ProductQueryDto {\n  /**\n   * Page number for pagination.\n   * @type {number}\n   * @default 1\n   */\n  @ApiPropertyOptional({\n    description: 'Page number for pagination',\n    default: 1,\n    minimum: 1\n  })\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  @IsOptional()\n  page?: number = 1;\n\n  /**\n   * Number of items per page.\n   * @type {number}\n   * @default 10\n   */\n  @ApiPropertyOptional({\n    description: 'Number of items per page',\n    default: 10,\n    minimum: 1,\n    maximum: 100\n  })\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  @Max(100)\n  @IsOptional()\n  limit?: number = 10;\n\n  /**\n   * Search term for filtering products by name or description.\n   * @type {string}\n   */\n  @ApiPropertyOptional({\n    description: 'Search term for product name or description',\n    example: 'cotton'\n  })\n  @IsString()\n  @IsOptional()\n  search?: string;\n\n  /**\n   * Category filter for products.\n   * @type {string}\n   */\n  @ApiPropertyOptional({\n    description: 'Filter by product category',\n    enum: ProductCategory\n  })\n  @IsEnum(ProductCategory)\n  @IsOptional()\n  category?: ProductCategory;\n\n  /**\n   * Minimum price filter.\n   * @type {number}\n   */\n  @ApiPropertyOptional({\n    description: 'Filter by minimum price',\n    example: 10.00\n  })\n  @Type(() => Number)\n  @IsNumber()\n  @Min(0)\n  @IsOptional()\n  minPrice?: number;\n\n  /**\n   * Maximum price filter.\n   * @type {number}\n   */\n  @ApiPropertyOptional({\n    description: 'Filter by maximum price',\n    example: 50.00\n  })\n  @Type(() => Number)\n  @IsNumber()\n  @Min(0)\n  @IsOptional()\n  maxPrice?: number;\n\n  /**\n   * Size filter for products.\n   * @type {string}\n   */\n  @ApiPropertyOptional({\n    description: 'Filter by size',\n    example: 'M'\n  })\n  @IsString()\n  @IsOptional()\n  size?: string;\n\n  /**\n   * Color filter for products.\n   * @type {string}\n   */\n  @ApiPropertyOptional({\n    description: 'Filter by color',\n    example: 'Black'\n  })\n  @IsString()\n  @IsOptional()\n  color?: string;\n\n  /**\n   * Brand filter for products.\n   * @type {string}\n   */\n  @ApiPropertyOptional({\n    description: 'Filter by brand',\n    example: 'Elevate Fashion'\n  })\n  @IsString()\n  @IsOptional()\n  brand?: string;\n\n  /**\n   * Material filter for products.\n   * @type {string}\n   */\n  @ApiPropertyOptional({\n    description: 'Filter by material',\n    example: 'Cotton'\n  })\n  @IsString()\n  @IsOptional()\n  material?: string;\n\n  /**\n   * Filter for featured products.\n   * @type {boolean}\n   */\n  @ApiPropertyOptional({\n    description: 'Filter featured products',\n    default: undefined,\n    type: Boolean\n  })\n  @Transform(({ value }) => {\n    if (value === undefined || value === '') return undefined;\n    return value === 'true';\n  })\n  @IsBoolean()\n  @IsOptional()\n  isFeatured?: boolean;\n\n  /**\n   * Filter for new arrival products.\n   * @type {boolean}\n   */\n  @ApiPropertyOptional({\n    description: 'Filter new arrivals',\n    default: undefined,\n    type: Boolean\n  })\n  @Transform(({ value }) => {\n    if (value === undefined || value === '') return undefined;\n    return value === 'true';\n  })\n  @IsBoolean()\n  @IsOptional()\n  isNewArrival?: boolean;\n\n  /**\n   * Filter for best seller products.\n   * @type {boolean}\n   */\n  @ApiPropertyOptional({\n    description: 'Filter best sellers',\n    default: undefined,\n    type: Boolean\n  })\n  @Transform(({ value }) => {\n    if (value === undefined || value === '') return undefined;\n    return value === 'true';\n  })\n  @IsBoolean()\n  @IsOptional()\n  isBestSeller?: boolean;\n\n  /**\n   * Filter for products on sale.\n   * @type {boolean}\n   */\n  @ApiPropertyOptional({\n    description: 'Filter products on sale',\n    default: undefined,\n    type: Boolean\n  })\n  @Transform(({ value }) => {\n    if (value === undefined || value === '') return undefined;\n    return value === 'true';\n  })\n  @IsBoolean()\n  @IsOptional()\n  isOnSale?: boolean;\n\n  /**\n   * Field to sort products by.\n   * @type {string}\n   * @default 'createdAt'\n   */\n  @ApiPropertyOptional({\n    description: 'Sort field',\n    example: 'price'\n  })\n  @IsString()\n  @IsOptional()\n  sortBy?: string;\n\n  /**\n   * Sort order (ASC or DESC).\n   * @type {'ASC' | 'DESC'}\n   * @default 'DESC'\n   */\n  @ApiPropertyOptional({\n    description: 'Sort order (asc or desc)',\n    example: 'asc',\n    enum: ['asc', 'desc']\n  })\n  @IsString()\n  @IsOptional()\n  sortOrder?: 'asc' | 'desc' = 'asc';\n} \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProductsController.html":{"url":"controllers/ProductsController.html","title":"controller - ProductsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProductsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/products.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                products\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                getBestSellers\n                            \n                            \n                                    \n                                    \n                                    \n                                getByCategory\n                            \n                            \n                                    \n                                    \n                                    \n                                getFeatured\n                            \n                            \n                                    \n                                    \n                                    \n                                getNewArrivals\n                            \n                            \n                                    \n                                    \n                                    \n                                getOnSale\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(page?: number, limit?: number, category?: ProductCategory)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Get all products', description: 'Retrieves a paginated list of products with optional filtering.'})@ApiQuery({name: 'page', required: false, type: Number, description: 'Page number for pagination (default: 1)'})@ApiQuery({name: 'limit', required: false, type: Number, description: 'Number of items per page (default: 10)'})@ApiQuery({name: 'category', required: false, enum: ProductCategory, description: 'Filter products by category'})@ApiResponse({status: 200, description: 'List of products retrieved successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/products/products.controller.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                category\n                                            \n                                                            ProductCategory\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({summary: 'Get product by ID', description: 'Retrieves detailed information about a specific product.'})@ApiResponse({status: 200, description: 'Product found successfully'})@ApiResponse({status: 404, description: 'Product not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/products/products.controller.ts:124\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        getBestSellers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getBestSellers()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('best-sellers')@ApiOperation({summary: 'Get best seller products', description: 'Retrieves a list of best selling products.'})@ApiResponse({status: 200, description: 'Best seller products retrieved successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/products/products.controller.ts:81\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        getByCategory\n                        \n                    \n                \n            \n            \n                \n                        \n                    getByCategory(category: ProductCategory)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('category/:category')@ApiOperation({summary: 'Get products by category', description: 'Retrieves a list of products in a specific category.'})@ApiResponse({status: 200, description: 'Products in category retrieved successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/products/products.controller.ts:107\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                category\n                                            \n                                                            ProductCategory\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        getFeatured\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFeatured()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('featured')@ApiOperation({summary: 'Get featured products', description: 'Retrieves a list of featured products.'})@ApiResponse({status: 200, description: 'Featured products retrieved successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/products/products.controller.ts:55\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        getNewArrivals\n                        \n                    \n                \n            \n            \n                \n                        \n                    getNewArrivals()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('new-arrivals')@ApiOperation({summary: 'Get new arrival products', description: 'Retrieves a list of recently added products.'})@ApiResponse({status: 200, description: 'New arrival products retrieved successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/products/products.controller.ts:68\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        getOnSale\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOnSale()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('on-sale')@ApiOperation({summary: 'Get products on sale', description: 'Retrieves a list of products currently on sale.'})@ApiResponse({status: 200, description: 'Products on sale retrieved successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/products/products.controller.ts:94\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Query, Param } from '@nestjs/common';\nimport { ProductsService } from './products.service';\nimport { ApiTags, ApiOperation, ApiResponse, ApiQuery } from '@nestjs/swagger';\nimport { ProductCategory } from './entities/product.entity';\n\n@ApiTags('C. Public - Product Catalog')\n@Controller('products')\nexport class ProductsController {\n  constructor(private readonly productsService: ProductsService) {}\n\n  @Get()\n  @ApiOperation({ \n    summary: 'Get all products',\n    description: 'Retrieves a paginated list of products with optional filtering.'\n  })\n  @ApiQuery({ \n    name: 'page', \n    required: false, \n    type: Number,\n    description: 'Page number for pagination (default: 1)'\n  })\n  @ApiQuery({ \n    name: 'limit', \n    required: false, \n    type: Number,\n    description: 'Number of items per page (default: 10)'\n  })\n  @ApiQuery({ \n    name: 'category', \n    required: false, \n    enum: ProductCategory,\n    description: 'Filter products by category'\n  })\n  @ApiResponse({ \n    status: 200, \n    description: 'List of products retrieved successfully'\n  })\n  findAll(\n    @Query('page') page?: number,\n    @Query('limit') limit?: number,\n    @Query('category') category?: ProductCategory,\n  ) {\n    return this.productsService.findAll(page, limit, category);\n  }\n\n  @Get('featured')\n  @ApiOperation({ \n    summary: 'Get featured products',\n    description: 'Retrieves a list of featured products.'\n  })\n  @ApiResponse({ \n    status: 200, \n    description: 'Featured products retrieved successfully'\n  })\n  getFeatured() {\n    return this.productsService.getFeatured();\n  }\n\n  @Get('new-arrivals')\n  @ApiOperation({ \n    summary: 'Get new arrival products',\n    description: 'Retrieves a list of recently added products.'\n  })\n  @ApiResponse({ \n    status: 200, \n    description: 'New arrival products retrieved successfully'\n  })\n  getNewArrivals() {\n    return this.productsService.getNewArrivals();\n  }\n\n  @Get('best-sellers')\n  @ApiOperation({ \n    summary: 'Get best seller products',\n    description: 'Retrieves a list of best selling products.'\n  })\n  @ApiResponse({ \n    status: 200, \n    description: 'Best seller products retrieved successfully'\n  })\n  getBestSellers() {\n    return this.productsService.getBestSellers();\n  }\n\n  @Get('on-sale')\n  @ApiOperation({ \n    summary: 'Get products on sale',\n    description: 'Retrieves a list of products currently on sale.'\n  })\n  @ApiResponse({ \n    status: 200, \n    description: 'Products on sale retrieved successfully'\n  })\n  getOnSale() {\n    return this.productsService.getOnSale();\n  }\n\n  @Get('category/:category')\n  @ApiOperation({ \n    summary: 'Get products by category',\n    description: 'Retrieves a list of products in a specific category.'\n  })\n  @ApiResponse({ \n    status: 200, \n    description: 'Products in category retrieved successfully'\n  })\n  getByCategory(@Param('category') category: ProductCategory) {\n    return this.productsService.getByCategory(category);\n  }\n\n  @Get(':id')\n  @ApiOperation({ \n    summary: 'Get product by ID',\n    description: 'Retrieves detailed information about a specific product.'\n  })\n  @ApiResponse({ \n    status: 200, \n    description: 'Product found successfully'\n  })\n  @ApiResponse({ \n    status: 404, \n    description: 'Product not found'\n  })\n  findOne(@Param('id') id: string) {\n    return this.productsService.findOne(id);\n  }\n} \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProductsModule.html":{"url":"modules/ProductsModule.html","title":"module - ProductsModule","body":"\n                   \n\n\n\n\n    Modules\n    ProductsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ProductsModule\n\n\n\ncluster_ProductsModule_exports\n\n\n\ncluster_ProductsModule_providers\n\n\n\n\nProductsService \n\nProductsService \n\n\n\nProductsModule\n\nProductsModule\n\nProductsService  -->\n\nProductsModule->ProductsService \n\n\n\n\n\nProductsService\n\nProductsService\n\nProductsModule -->\n\nProductsService->ProductsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/products/products.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ProductsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProductsController\n                        \n                        \n                            AdminProductsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ProductsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Product } from './entities/product.entity';\nimport { ProductsService } from './products.service';\nimport { ProductsController } from './products.controller';\nimport { AdminProductsController } from './admin-products.controller';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Product])],\n  controllers: [ProductsController, AdminProductsController],\n  providers: [ProductsService],\n  exports: [ProductsService, TypeOrmModule],\n})\nexport class ProductsModule {} \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProductsService.html":{"url":"injectables/ProductsService.html","title":"injectable - ProductsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProductsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/products.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getBestSellers\n                            \n                            \n                                    Async\n                                getByCategory\n                            \n                            \n                                    Async\n                                getFeatured\n                            \n                            \n                                    Async\n                                getNewArrivals\n                            \n                            \n                                    Async\n                                getOnSale\n                            \n                            \n                                    Async\n                                getProductStats\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/products/products.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createProductDto: CreateProductDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/products.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createProductDto\n                                            \n                                                            CreateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(page: number, limit: number, category?: ProductCategory)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/products.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    1\n                                            \n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    10\n                                            \n\n                                        \n                                        \n                                                category\n                                            \n                                                            ProductCategory\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/products.service.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getBestSellers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getBestSellers()\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/products.service.ts:72\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getByCategory\n                        \n                    \n                \n            \n            \n                \n                        \n                    getByCategory(category: ProductCategory)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/products.service.ts:86\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                category\n                                            \n                                                            ProductCategory\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getFeatured\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFeatured()\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/products.service.ts:58\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getNewArrivals\n                        \n                    \n                \n            \n            \n                \n                        \n                    getNewArrivals()\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/products.service.ts:65\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getOnSale\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOnSale()\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/products.service.ts:79\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getProductStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProductStats()\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/products.service.ts:93\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/products.service.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateProductDto: UpdateProductDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/products.service.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateProductDto\n                                            \n                                                            UpdateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, FindOptionsWhere } from 'typeorm';\nimport { Product, ProductCategory } from './entities/product.entity';\nimport { CreateProductDto } from './dto/create-product.dto';\nimport { UpdateProductDto } from './dto/update-product.dto';\n\n@Injectable()\nexport class ProductsService {\n  constructor(\n    @InjectRepository(Product)\n    private readonly productRepository: Repository,\n  ) {}\n\n  async create(createProductDto: CreateProductDto): Promise {\n    const product = this.productRepository.create(createProductDto);\n    return await this.productRepository.save(product);\n  }\n\n  async findAll(\n    page: number = 1,\n    limit: number = 10,\n    category?: ProductCategory,\n  ): Promise {\n    const query = this.productRepository.createQueryBuilder('product');\n\n    if (category) {\n      query.where('product.category = :category', { category });\n    }\n\n    const [data, total] = await query\n      .skip((page - 1) * limit)\n      .take(limit)\n      .getManyAndCount();\n\n    return { data, total };\n  }\n\n  async findOne(id: string): Promise {\n    const product = await this.productRepository.findOne({ where: { id } });\n    if (!product) {\n      throw new NotFoundException(`Product with ID ${id} not found`);\n    }\n    return product;\n  }\n\n  async update(id: string, updateProductDto: UpdateProductDto): Promise {\n    const product = await this.findOne(id);\n    Object.assign(product, updateProductDto);\n    return await this.productRepository.save(product);\n  }\n\n  async remove(id: string): Promise {\n    const product = await this.findOne(id);\n    await this.productRepository.remove(product);\n  }\n\n  async getFeatured(): Promise {\n    return await this.productRepository.find({\n      where: { isFeatured: true },\n      take: 10,\n    });\n  }\n\n  async getNewArrivals(): Promise {\n    return await this.productRepository.find({\n      order: { createdAt: 'DESC' },\n      take: 10,\n    });\n  }\n\n  async getBestSellers(): Promise {\n    return await this.productRepository.find({\n      where: { isBestSeller: true },\n      take: 10,\n    });\n  }\n\n  async getOnSale(): Promise {\n    return await this.productRepository.find({\n      where: { isOnSale: true },\n      take: 10,\n    });\n  }\n\n  async getByCategory(category: ProductCategory): Promise {\n    const where: FindOptionsWhere = {\n      category: category\n    };\n    return await this.productRepository.find({ where });\n  }\n\n  async getProductStats() {\n    const totalProducts = await this.productRepository.count();\n    const featuredCount = await this.productRepository.count({ where: { isFeatured: true } });\n    const newArrivalsCount = await this.productRepository.count({ where: { isNewArrival: true } });\n    const bestSellersCount = await this.productRepository.count({ where: { isBestSeller: true } });\n    const onSaleCount = await this.productRepository.count({ where: { isOnSale: true } });\n\n    const categoryCounts = await this.productRepository\n      .createQueryBuilder('product')\n      .select('product.category', 'category')\n      .addSelect('COUNT(*)', 'count')\n      .groupBy('product.category')\n      .getRawMany();\n\n    return {\n      totalProducts,\n      featuredCount,\n      newArrivalsCount,\n      bestSellersCount,\n      onSaleCount,\n      categoryCounts,\n    };\n  }\n} \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Roles.html":{"url":"entities/Roles.html","title":"entity - Roles","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Roles\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/roles.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/roles.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: Role, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/roles.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Users[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, user => user.roles)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/roles.entity.ts:18\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, PrimaryGeneratedColumn, Column, ManyToMany } from 'typeorm';\nimport { Users } from 'src/users/entities/users.entity';\nimport { Role } from '../enums/roles.enum';\n\n@Entity()\nexport class Roles {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'enum',\n    enum: Role,\n    unique: true,\n  })\n  name: Role;\n\n  @ManyToMany(() => Users, (user) => user.roles)\n  users: Users[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/roles.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/roles.guard.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/roles.guard.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext, ForbiddenException } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Role } from '../../users/enums/roles.enum';\n\nexport const ROLES_KEY = 'roles';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride(ROLES_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    \n    // No roles required means open to all authenticated users\n    if (!requiredRoles || requiredRoles.length === 0) {\n      return true;\n    }\n    \n    const { user } = context.switchToHttp().getRequest();\n    \n    // Make sure user exists and has roles\n    if (!user || !user.roles || user.roles.length === 0) {\n      throw new ForbiddenException('User has no roles');\n    }\n    \n    // Check if user has any of the required roles\n    const userRoles = user.roles.map(role => role.name);\n    const hasRole = requiredRoles.some(role => userRoles.includes(role));\n    \n    if (!hasRole) {\n      throw new ForbiddenException(\n        `User doesn't have sufficient permissions. Required roles: ${requiredRoles.join(', ')}`\n      );\n    }\n    \n    return true;\n  }\n}\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateOrderDto.html":{"url":"classes/UpdateOrderDto.html","title":"class - UpdateOrderDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateOrderDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/orders/dto/update-order.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                notes\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                refundAmount\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        notes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Additional notes or comments about the order', example: 'Order is being processed', required: false})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/dto/update-order.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        refundAmount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Amount to be refunded for the order', example: 49.99, minimum: 0, required: false})@IsNumber()@Min(0)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/dto/update-order.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'New status of the order', enum: OrderStatus, example: undefined, required: false})@IsEnum(OrderStatus)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/dto/update-order.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEnum, IsOptional, IsString, IsNumber, Min } from 'class-validator';\nimport { OrderStatus } from '../enums/order-status.enum';\n\nexport class UpdateOrderDto {\n  @ApiProperty({\n    description: 'New status of the order',\n    enum: OrderStatus,\n    example: OrderStatus.PROCESSING,\n    required: false\n  })\n  @IsEnum(OrderStatus)\n  @IsOptional()\n  status?: OrderStatus;\n\n  @ApiProperty({\n    description: 'Additional notes or comments about the order',\n    example: 'Order is being processed',\n    required: false\n  })\n  @IsString()\n  @IsOptional()\n  notes?: string;\n\n  @ApiProperty({\n    description: 'Amount to be refunded for the order',\n    example: 49.99,\n    minimum: 0,\n    required: false\n  })\n  @IsNumber()\n  @Min(0)\n  @IsOptional()\n  refundAmount?: number;\n} \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateProductDto.html":{"url":"classes/UpdateProductDto.html","title":"class - UpdateProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/dto/update-product.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                brand\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                careInstructions\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                category\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                colors\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                discountedPrice\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                images\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                imageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                isActive\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                isBestSeller\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                isFeatured\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                isNewArrival\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                isOnSale\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                material\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                price\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                salePrice\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                sizes\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                specifications\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                stock\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                stockQuantity\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        brand\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Product brand', example: 'Elevate Fashion'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/update-product.dto.ts:162\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        careInstructions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Care instructions', example: 'Machine wash cold, inside out. Tumble dry low. Do not bleach. Iron on reverse side if needed.'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/update-product.dto.ts:178\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ProductCategory\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Category of the product', enum: ProductCategory, example: undefined, required: false})@IsEnum(ProductCategory)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/update-product.dto.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        colors\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Available colors', example: undefined})@IsArray()@IsString({each: true})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/update-product.dto.ts:127\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description of the product', example: 'High-quality denim jeans with a modern slim fit. Features stretch comfort and classic five-pocket styling.', required: false})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/update-product.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        discountedPrice\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Discounted price (if on sale)', example: 59.99})@IsNumber()@Min(0)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/update-product.dto.ts:100\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        images\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Product image URLs', example: undefined})@IsArray()@IsUrl({}, {each: true})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/update-product.dto.ts:140\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        imageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'URL of the product image', example: 'https://example.com/images/premium-denim-jeans.jpg', required: false})@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/update-product.dto.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Whether the product is active', default: true})@IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/update-product.dto.ts:202\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        isBestSeller\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Whether the product is a best seller', default: false})@IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/update-product.dto.ts:194\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        isFeatured\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Whether the product is featured', example: true, required: false})@IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/update-product.dto.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        isNewArrival\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Whether the product is a new arrival', default: false})@IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/update-product.dto.ts:186\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        isOnSale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Whether the product is on sale', example: true, required: false})@IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/update-product.dto.ts:82\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        material\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Product material', example: '98% Cotton, 2% Elastane'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/update-product.dto.ts:170\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Name of the product', example: 'Premium Slim Fit Denim Jeans', required: false})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/update-product.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Price of the product', example: 79.99, minimum: 0, required: false})@IsNumber()@Min(0)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/update-product.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        salePrice\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Sale price of the product (if on sale)', example: 59.99, required: false})@IsNumber()@Min(0)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/update-product.dto.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        sizes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Available sizes', example: undefined})@IsArray()@IsString({each: true})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/update-product.dto.ts:118\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        specifications\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Product specifications', example: undefined})@IsObject()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/update-product.dto.ts:154\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        stock\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Stock quantity of the product', example: 150, minimum: 0, required: false})@IsNumber()@Min(0)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/update-product.dto.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        stockQuantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Stock quantity', example: 100})@IsNumber()@Min(0)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/update-product.dto.ts:109\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNumber, IsEnum, IsArray, IsOptional, IsBoolean, IsUrl, Min, IsObject } from 'class-validator';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { ProductCategory } from '../entities/product.entity';\n\nexport class UpdateProductDto {\n  @ApiProperty({\n    description: 'Name of the product',\n    example: 'Premium Slim Fit Denim Jeans',\n    required: false\n  })\n  @IsString()\n  @IsOptional()\n  name?: string;\n\n  @ApiProperty({\n    description: 'Description of the product',\n    example: 'High-quality denim jeans with a modern slim fit. Features stretch comfort and classic five-pocket styling.',\n    required: false\n  })\n  @IsString()\n  @IsOptional()\n  description?: string;\n\n  @ApiProperty({\n    description: 'Price of the product',\n    example: 79.99,\n    minimum: 0,\n    required: false\n  })\n  @IsNumber()\n  @Min(0)\n  @IsOptional()\n  price?: number;\n\n  @ApiProperty({\n    description: 'Sale price of the product (if on sale)',\n    example: 59.99,\n    required: false\n  })\n  @IsNumber()\n  @Min(0)\n  @IsOptional()\n  salePrice?: number;\n\n  @ApiProperty({\n    description: 'Stock quantity of the product',\n    example: 150,\n    minimum: 0,\n    required: false\n  })\n  @IsNumber()\n  @Min(0)\n  @IsOptional()\n  stock?: number;\n\n  @ApiProperty({\n    description: 'Category of the product',\n    enum: ProductCategory,\n    example: ProductCategory.PANTS,\n    required: false\n  })\n  @IsEnum(ProductCategory)\n  @IsOptional()\n  category?: ProductCategory;\n\n  @ApiProperty({\n    description: 'Whether the product is featured',\n    example: true,\n    required: false\n  })\n  @IsBoolean()\n  @IsOptional()\n  isFeatured?: boolean;\n\n  @ApiProperty({\n    description: 'Whether the product is on sale',\n    example: true,\n    required: false\n  })\n  @IsBoolean()\n  @IsOptional()\n  isOnSale?: boolean;\n\n  @ApiProperty({\n    description: 'URL of the product image',\n    example: 'https://example.com/images/premium-denim-jeans.jpg',\n    required: false\n  })\n  @IsUrl()\n  @IsOptional()\n  imageUrl?: string;\n\n  @ApiPropertyOptional({\n    description: 'Discounted price (if on sale)',\n    example: 59.99\n  })\n  @IsNumber()\n  @Min(0)\n  @IsOptional()\n  discountedPrice?: number;\n\n  @ApiPropertyOptional({\n    description: 'Stock quantity',\n    example: 100\n  })\n  @IsNumber()\n  @Min(0)\n  @IsOptional()\n  stockQuantity?: number;\n\n  @ApiPropertyOptional({\n    description: 'Available sizes',\n    example: ['28', '30', '32', '34', '36', '38']\n  })\n  @IsArray()\n  @IsString({ each: true })\n  @IsOptional()\n  sizes?: string[];\n\n  @ApiPropertyOptional({\n    description: 'Available colors',\n    example: ['Dark Blue', 'Black', 'Light Wash', 'Medium Wash']\n  })\n  @IsArray()\n  @IsString({ each: true })\n  @IsOptional()\n  colors?: string[];\n\n  @ApiPropertyOptional({\n    description: 'Product image URLs',\n    example: [\n      'https://example.com/images/jeans-front.jpg',\n      'https://example.com/images/jeans-back.jpg',\n      'https://example.com/images/jeans-detail.jpg'\n    ]\n  })\n  @IsArray()\n  @IsUrl({}, { each: true })\n  @IsOptional()\n  images?: string[];\n\n  @ApiPropertyOptional({\n    description: 'Product specifications',\n    example: { \n      'Fabric': '98% Cotton, 2% Elastane',\n      'Fit': 'Slim Fit',\n      'Rise': 'Mid Rise',\n      'Closure': 'Button and Zip',\n      'Pockets': '5 Pockets'\n    }\n  })\n  @IsObject()\n  @IsOptional()\n  specifications?: Record;\n\n  @ApiPropertyOptional({\n    description: 'Product brand',\n    example: 'Elevate Fashion'\n  })\n  @IsString()\n  @IsOptional()\n  brand?: string;\n\n  @ApiPropertyOptional({\n    description: 'Product material',\n    example: '98% Cotton, 2% Elastane'\n  })\n  @IsString()\n  @IsOptional()\n  material?: string;\n\n  @ApiPropertyOptional({\n    description: 'Care instructions',\n    example: 'Machine wash cold, inside out. Tumble dry low. Do not bleach. Iron on reverse side if needed.'\n  })\n  @IsString()\n  @IsOptional()\n  careInstructions?: string;\n\n  @ApiPropertyOptional({\n    description: 'Whether the product is a new arrival',\n    default: false\n  })\n  @IsBoolean()\n  @IsOptional()\n  isNewArrival?: boolean;\n\n  @ApiPropertyOptional({\n    description: 'Whether the product is a best seller',\n    default: false\n  })\n  @IsBoolean()\n  @IsOptional()\n  isBestSeller?: boolean;\n\n  @ApiPropertyOptional({\n    description: 'Whether the product is active',\n    default: true\n  })\n  @IsBoolean()\n  @IsOptional()\n  isActive?: boolean;\n} \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsOptional,\n  IsString,\n  IsDateString,\n  IsEnum,\n  IsPhoneNumber,\n} from 'class-validator';\nimport { CreateUserDto } from './create-user.dto';\nimport { PartialType } from '@nestjs/swagger';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                isActive\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                role\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: Role, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:31\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, PrimaryGeneratedColumn, Column, CreateDateColumn, UpdateDateColumn } from 'typeorm';\nimport { Role } from '../enums/roles.enum';\n\n@Entity('users')\nexport class User {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({ unique: true })\n  email: string;\n\n  @Column()\n  password: string;\n\n  @Column({ nullable: true })\n  firstName: string;\n\n  @Column({ nullable: true })\n  lastName: string;\n\n  @Column({ type: 'enum', enum: Role, default: Role.CUSTOMER })\n  role: Role;\n\n  @Column({ default: true })\n  isActive: boolean;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n} \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserQueryDto.html":{"url":"classes/UserQueryDto.html","title":"class - UserQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/user-query.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                limit\n                            \n                            \n                                    \n                                    \n                                order_by\n                            \n                            \n                                    \n                                    \n                                order_direction\n                            \n                            \n                                    \n                                    \n                                    \n                                page\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                search\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsInt()@Min(1, {message: 'Limit must be greater than or equal to 1'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-query.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        order_by\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'created_at'\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-query.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        order_direction\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirection\n\n                    \n                \n                \n                    \n                        Default value : OrderDirection.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsEnum(OrderDirection)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-query.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsInt()@Min(1, {message: 'Page number must be greater than or equal to 1'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-query.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        search\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-query.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsEnum, IsInt, Min, IsString } from 'class-validator';\nimport { OrderDirection } from 'src/users/enums/order-direction.enum';\n\nexport class UserQueryDto {\n  @IsOptional()\n  @IsString()\n  search?: string;\n\n  @IsOptional()\n  @IsInt()\n  @Min(1, { message: 'Page number must be greater than or equal to 1' })\n  page: number = 1;\n\n  @IsOptional()\n  @IsInt()\n  @Min(1, { message: 'Limit must be greater than or equal to 1' })\n  limit: number = 10;\n\n  @IsOptional()\n  @IsString()\n  order_by: string = 'created_at';\n\n  @IsOptional()\n  @IsEnum(OrderDirection) \n  order_direction: OrderDirection = OrderDirection.DESC; \n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Users.html":{"url":"entities/Users.html","title":"entity - Users","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Users\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/users.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                addresses\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                dob\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                isActive\n                            \n                            \n                                    \n                                isEmailVerified\n                            \n                            \n                                    \n                                isPhoneVerified\n                            \n                            \n                                    \n                                lastLoginAt\n                            \n                            \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                orders\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                    Optional\n                                phone\n                            \n                            \n                                    \n                                profileImage\n                            \n                            \n                                    \n                                refreshToken\n                            \n                            \n                                    \n                                    \n                                roles\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        addresses\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Address[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, address => address.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/users.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/users.entity.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        dob\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/users.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255, unique: true, comment: 'User email address'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/users.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/users.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/users.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'boolean', default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/users.entity.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isEmailVerified\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'boolean', default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/users.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isPhoneVerified\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'boolean', default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/users.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastLoginAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/users.entity.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/users.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        orders\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Order[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, order => order.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/users.entity.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/users.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255, unique: true, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/users.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        profileImage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255, nullable: true, default: 'profile.jpg'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/users.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/users.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Roles[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, role => role.users)@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/users.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/users.entity.ts:77\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  ManyToMany,\n  JoinTable,\n  CreateDateColumn,\n  UpdateDateColumn,\n  OneToMany,\n} from 'typeorm';\nimport { Roles } from './roles.entity';\nimport { Order } from '../../orders/entities/order.entity';\nimport { Address } from './address.entity';\n\n@Entity()\nexport class Users {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({ type: 'varchar', length: 255 })\n  firstName: string;\n\n  @Column({ type: 'varchar', length: 255, nullable: true })\n  lastName?: string;\n\n  @Column({ nullable: true })\n  dob: Date;\n\n  @Column({ \n    type: 'varchar', \n    length: 255, \n    unique: true,\n    comment: 'User email address'\n  })\n  email: string;\n\n  @Column({ type: 'varchar', length: 255, unique: true, nullable: true })\n  phone?: string;\n\n  @Column({ type: 'varchar', length: 255 })\n  password: string;\n\n  @ManyToMany(() => Roles, (role) => role.users)\n  @JoinTable()\n  roles: Roles[];\n\n  @OneToMany(() => Order, (order) => order.user)\n  orders: Order[];\n\n  @OneToMany(() => Address, (address) => address.user)\n  addresses: Address[];\n\n  @Column({ type: 'boolean', default: false })\n  isActive: boolean;\n\n  @Column({ type: 'boolean', default: false })\n  isEmailVerified: boolean;\n\n  @Column({ type: 'boolean', default: false })\n  isPhoneVerified: boolean;\n\n  @Column({ type: 'varchar', length: 255, nullable: true })\n  refreshToken: string;\n\n  @Column({\n    type: 'varchar',\n    length: 255,\n    nullable: true,\n    default: 'profile.jpg',\n  })\n  profileImage: string;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n\n  @Column({ type: 'timestamp', nullable: true })\n  lastLoginAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n            \n                Description\n            \n            \n                Controller handling public user management operations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Create a new user'})@ApiResponse({status: 201, description: 'User created successfully'})@ApiResponse({status: 400, description: 'Bad request'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(page?: number, limit?: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(JwtAuthGuard)@ApiOperation({summary: 'Get all users'})@ApiQuery({name: 'page', required: false, type: Number})@ApiQuery({name: 'limit', required: false, type: Number})@ApiResponse({status: 200, description: 'List of users retrieved successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@UseGuards(JwtAuthGuard)@ApiOperation({summary: 'Get user by ID'})@ApiResponse({status: 200, description: 'User retrieved successfully'})@ApiResponse({status: 404, description: 'User not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@UseGuards(JwtAuthGuard)@ApiOperation({summary: 'Update user information'})@ApiResponse({status: 200, description: 'User updated successfully'})@ApiResponse({status: 404, description: 'User not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:64\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  Get,\n  Param,\n  Put,\n  Delete,\n  Query,\n  UseGuards,\n  Patch,\n} from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { UserQueryDto } from './dto/user-query.dto';\nimport { ApiTags, ApiOperation, ApiResponse, ApiParam, ApiQuery } from '@nestjs/swagger';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\n\n/**\n * Controller handling public user management operations.\n */\n@ApiTags('B. Public - User Profile')\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  // Route to create a new user\n  @Post()\n  @ApiOperation({ summary: 'Create a new user' })\n  @ApiResponse({ status: 201, description: 'User created successfully' })\n  @ApiResponse({ status: 400, description: 'Bad request' })\n  async create(@Body() createUserDto: CreateUserDto) {\n    return this.usersService.create(createUserDto);\n  }\n\n  // Route to get a list of all users\n  @Get()\n  @UseGuards(JwtAuthGuard)\n  @ApiOperation({ summary: 'Get all users' })\n  @ApiQuery({ name: 'page', required: false, type: Number })\n  @ApiQuery({ name: 'limit', required: false, type: Number })\n  @ApiResponse({ status: 200, description: 'List of users retrieved successfully' })\n  async findAll(@Query('page') page?: number, @Query('limit') limit?: number) {\n    return this.usersService.findAll(page, limit);\n  }\n\n  // Route to get a single user by ID\n  @Get(':id')\n  @UseGuards(JwtAuthGuard)\n  @ApiOperation({ summary: 'Get user by ID' })\n  @ApiResponse({ status: 200, description: 'User retrieved successfully' })\n  @ApiResponse({ status: 404, description: 'User not found' })\n  async findOne(@Param('id') id: string) {\n    return this.usersService.findOne(+id);\n  }\n\n  // Route to update user information\n  @Patch(':id')\n  @UseGuards(JwtAuthGuard)\n  @ApiOperation({ summary: 'Update user information' })\n  @ApiResponse({ status: 200, description: 'User updated successfully' })\n  @ApiResponse({ status: 404, description: 'User not found' })\n  async update(@Param('id') id: string, @Body() updateUserDto: UpdateUserDto) {\n    return this.usersService.update(+id, updateUserDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService\n\nUsersService\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Users } from './entities/users.entity';\nimport { Roles } from './entities/roles.entity'\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Users, Roles])],\n  controllers: [UsersController],\n  providers: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                changePassword\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getAllUsers\n                            \n                            \n                                    Async\n                                getUserById\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateProfileImage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, rolesRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        rolesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        changePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    changePassword(id: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:139\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(page: number, limit: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:157\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    1\n                                            \n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    10\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:176\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAllUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllUsers(userQueryDto: UserQueryDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:64\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userQueryDto\n                                            \n                                                            UserQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:99\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updateUserDto: UpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:113\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateProfileImage\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateProfileImage(id: string, profileImage: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:120\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                profileImage\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  BadRequestException,\n  InternalServerErrorException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, Like } from 'typeorm';\nimport { Users } from './entities/users.entity';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport * as bcrypt from 'bcrypt';\nimport { UserQueryDto } from './dto/user-query.dto';\nimport { Roles } from './entities/roles.entity';\nimport { Role } from './enums/roles.enum';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectRepository(Users)\n    private readonly usersRepository: Repository,\n\n    @InjectRepository(Roles)\n    private rolesRepository: Repository,\n  ) {}\n\n  // Create a new user\n  async create(createUserDto: CreateUserDto): Promise {\n    const { email, phone } = createUserDto;\n\n    const existingUser = await this.usersRepository.findOne({\n      where: [{ email }, { phone }],\n    });\n\n    if (existingUser) {\n      throw new BadRequestException('Email or Phone number already in use.');\n    }\n\n    const hashedPassword = await bcrypt.hash(createUserDto.password, 10);\n\n    // Fetch the 'CUSTOMER' role by default\n    const customerRole = await this.rolesRepository.findOne({\n      where: { name: Role.CUSTOMER },\n    });\n    if (!customerRole) {\n      throw new InternalServerErrorException('Customer role not found.');\n    }\n\n    const newUser = this.usersRepository.create({\n      ...createUserDto,\n      password: hashedPassword,\n      profileImage: createUserDto.profileImage || 'profile.jpg',\n      roles: [customerRole], // Assign the default 'CUSTOMER' role\n    });\n\n    try {\n      return await this.usersRepository.save(newUser);\n    } catch (error) {\n      throw new InternalServerErrorException('Failed to create user.');\n    }\n  }\n\n  // Get a list of users\n  async getAllUsers(userQueryDto: UserQueryDto): Promise {\n    const {\n      search,\n      page = 1,\n      limit = 10,\n      order_by = 'id',\n      order_direction = 'ASC',\n    } = userQueryDto;\n\n    const whereCondition = search\n      ? [\n          { email: Like(`%${search}%`) },\n          { phone: Like(`%${search}%`) },\n          { firstName: Like(`%${search}%`) },\n          { lastName: Like(`%${search}%`) },\n        ]\n      : undefined;\n\n    const [users, total] = await this.usersRepository.findAndCount({\n      where: whereCondition,\n      order: {\n        [order_by]: order_direction.toUpperCase() === 'DESC' ? 'DESC' : 'ASC',\n      },\n      skip: (page - 1) * limit,\n      take: limit,\n    });\n\n    if (total === 0) {\n      throw new NotFoundException('No users found.');\n    }\n\n    return users;\n  }\n\n  // Get user by ID\n  async getUserById(id: string): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { id },\n      relations: ['roles'],\n    });\n\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found.`);\n    }\n\n    return user;\n  }\n\n  // Update user\n  async update(id: number, updateUserDto: UpdateUserDto): Promise {\n    const user = await this.findOne(id);\n    await this.usersRepository.update(id.toString(), updateUserDto);\n    return this.findOne(id);\n  }\n\n  // Update profile image\n  async updateProfileImage(id: string, profileImage: string): Promise {\n    const user = await this.usersRepository.findOne({ where: { id } });\n\n    if (!user) {\n      throw new NotFoundException(\n        `Cannot update image: User with ID ${id} not found.`,\n      );\n    }\n\n    user.profileImage = profileImage;\n\n    try {\n      return await this.usersRepository.save(user);\n    } catch (error) {\n      throw new InternalServerErrorException('Failed to update profile image.');\n    }\n  }\n\n  // Change user password\n  async changePassword(id: string, password: string): Promise {\n    const user = await this.usersRepository.findOne({ where: { id } });\n\n    if (!user) {\n      throw new NotFoundException(\n        `Cannot change password: User with ID ${id} not found.`,\n      );\n    }\n\n    user.password = await bcrypt.hash(password, 10);\n\n    try {\n      return await this.usersRepository.save(user);\n    } catch (error) {\n      throw new InternalServerErrorException('Failed to change password.');\n    }\n  }\n\n  async findAll(page = 1, limit = 10) {\n    const skip = (page - 1) * limit;\n\n    const [users, total] = await this.usersRepository.findAndCount({\n      skip,\n      take: limit,\n      relations: ['roles'],\n    });\n\n    return {\n      data: users,\n      meta: {\n        total,\n        page,\n        limit,\n      },\n    };\n  }\n\n  async findOne(id: number): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { id: id.toString() },\n      relations: ['roles'],\n    });\n\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ValidationErrorItem.html":{"url":"interfaces/ValidationErrorItem.html","title":"interface - ValidationErrorItem","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ValidationErrorItem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/validation-exception.filter.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            field\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        field\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        field:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  BadRequestException,\n  Logger,\n} from '@nestjs/common';\nimport { ValidationError } from 'class-validator';\nimport { Request, Response } from 'express';\n\ninterface ValidationErrorItem {\n  field?: string;\n  message: string;\n}\n\n@Catch(BadRequestException)\nexport class ValidationExceptionFilter implements ExceptionFilter {\n  private readonly logger = new Logger(ValidationExceptionFilter.name);\n\n  catch(exception: BadRequestException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = exception.getStatus();\n    const exceptionResponse = exception.getResponse();\n\n    // Log the exception\n    this.logger.error(\n      `${request.method} ${request.url} - Status: ${status} - ${JSON.stringify(exceptionResponse)}`,\n    );\n\n    // Format validation errors\n    let validationErrors: ValidationErrorItem[] = [];\n    \n    if (typeof exceptionResponse === 'object' && 'message' in exceptionResponse) {\n      const messages = (exceptionResponse as any).message;\n      \n      if (Array.isArray(messages)) {\n        // Handle array of validation messages\n        validationErrors = this.formatValidationErrors(messages);\n      } else if (typeof messages === 'string') {\n        // Handle single validation message\n        validationErrors = [{ message: messages }];\n      } else if (typeof messages === 'object') {\n        // Handle nested validation errors (from class-validator)\n        validationErrors = this.formatNestedValidationErrors(messages as ValidationError[]);\n      }\n    }\n\n    // Format the response\n    const errorResponse = {\n      statusCode: status,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n      method: request.method,\n      message: 'Validation failed',\n      errors: validationErrors,\n    };\n\n    response.status(status).json(errorResponse);\n  }\n\n  private formatValidationErrors(errors: string[]): ValidationErrorItem[] {\n    return errors.map(error => {\n      // Try to parse constraint error messages\n      const constraintMatch = error.match(/^([a-zA-Z0-9_]+):\\s*(.+)$/);\n      if (constraintMatch) {\n        return {\n          field: constraintMatch[1],\n          message: constraintMatch[2],\n        };\n      }\n      return { message: error };\n    });\n  }\n\n  private formatNestedValidationErrors(errors: ValidationError[]): ValidationErrorItem[] {\n    const formattedErrors: ValidationErrorItem[] = [];\n    \n    const extractErrors = (error: ValidationError, parentField = '') => {\n      const field = parentField ? `${parentField}.${error.property}` : error.property;\n      \n      // Use type assertion to handle the constraints property\n      const constraints = error.constraints as Record | undefined;\n      if (constraints && Object.keys(constraints).length > 0) {\n        Object.keys(constraints).forEach(key => {\n          formattedErrors.push({\n            field,\n            message: constraints[key],\n          });\n        });\n      }\n      \n      if (error.children && error.children.length > 0) {\n        error.children.forEach(child => extractErrors(child, field));\n      }\n    };\n    \n    errors.forEach(error => extractErrors(error));\n    return formattedErrors;\n  }\n} \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ValidationExceptionFilter.html":{"url":"classes/ValidationExceptionFilter.html","title":"class - ValidationExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ValidationExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/validation-exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                            \n                                    Private\n                                formatNestedValidationErrors\n                            \n                            \n                                    Private\n                                formatValidationErrors\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(ValidationExceptionFilter.name)\n                    \n                \n                    \n                        \n                                Defined in src/common/exceptions/validation-exception.filter.ts:18\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: BadRequestException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/exceptions/validation-exception.filter.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                        BadRequestException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        formatNestedValidationErrors\n                        \n                    \n                \n            \n            \n                \n                        \n                    formatNestedValidationErrors(errors: ValidationError[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/exceptions/validation-exception.filter.ts:77\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                errors\n                                            \n                                                        ValidationError[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ValidationErrorItem[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        formatValidationErrors\n                        \n                    \n                \n            \n            \n                \n                        \n                    formatValidationErrors(errors: string[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/exceptions/validation-exception.filter.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                errors\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ValidationErrorItem[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  BadRequestException,\n  Logger,\n} from '@nestjs/common';\nimport { ValidationError } from 'class-validator';\nimport { Request, Response } from 'express';\n\ninterface ValidationErrorItem {\n  field?: string;\n  message: string;\n}\n\n@Catch(BadRequestException)\nexport class ValidationExceptionFilter implements ExceptionFilter {\n  private readonly logger = new Logger(ValidationExceptionFilter.name);\n\n  catch(exception: BadRequestException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = exception.getStatus();\n    const exceptionResponse = exception.getResponse();\n\n    // Log the exception\n    this.logger.error(\n      `${request.method} ${request.url} - Status: ${status} - ${JSON.stringify(exceptionResponse)}`,\n    );\n\n    // Format validation errors\n    let validationErrors: ValidationErrorItem[] = [];\n    \n    if (typeof exceptionResponse === 'object' && 'message' in exceptionResponse) {\n      const messages = (exceptionResponse as any).message;\n      \n      if (Array.isArray(messages)) {\n        // Handle array of validation messages\n        validationErrors = this.formatValidationErrors(messages);\n      } else if (typeof messages === 'string') {\n        // Handle single validation message\n        validationErrors = [{ message: messages }];\n      } else if (typeof messages === 'object') {\n        // Handle nested validation errors (from class-validator)\n        validationErrors = this.formatNestedValidationErrors(messages as ValidationError[]);\n      }\n    }\n\n    // Format the response\n    const errorResponse = {\n      statusCode: status,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n      method: request.method,\n      message: 'Validation failed',\n      errors: validationErrors,\n    };\n\n    response.status(status).json(errorResponse);\n  }\n\n  private formatValidationErrors(errors: string[]): ValidationErrorItem[] {\n    return errors.map(error => {\n      // Try to parse constraint error messages\n      const constraintMatch = error.match(/^([a-zA-Z0-9_]+):\\s*(.+)$/);\n      if (constraintMatch) {\n        return {\n          field: constraintMatch[1],\n          message: constraintMatch[2],\n        };\n      }\n      return { message: error };\n    });\n  }\n\n  private formatNestedValidationErrors(errors: ValidationError[]): ValidationErrorItem[] {\n    const formattedErrors: ValidationErrorItem[] = [];\n    \n    const extractErrors = (error: ValidationError, parentField = '') => {\n      const field = parentField ? `${parentField}.${error.property}` : error.property;\n      \n      // Use type assertion to handle the constraints property\n      const constraints = error.constraints as Record | undefined;\n      if (constraints && Object.keys(constraints).length > 0) {\n        Object.keys(constraints).forEach(key => {\n          formattedErrors.push({\n            field,\n            message: constraints[key],\n          });\n        });\n      }\n      \n      if (error.children && error.children.length > 0) {\n        error.children.forEach(child => extractErrors(child, field));\n      }\n    };\n    \n    errors.forEach(error => extractErrors(error));\n    return formattedErrors;\n  }\n} \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/admin/controllers/admin-orders.controller.ts\n            \n            controller\n            AdminOrdersController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/admin/controllers/admin-user.controller.ts\n            \n            controller\n            AdminUserController\n            \n                57 %\n                (4/7)\n            \n        \n        \n            \n                \n                src/admin/dto/admin-user-query.dto.ts\n            \n            class\n            AdminUserQueryDto\n            \n                46 %\n                (6/13)\n            \n        \n        \n            \n                \n                src/admin/dto/admin-user-query.dto.ts\n            \n            interface\n            PaginatedResponse\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/admin/dto/admin-user-query.dto.ts\n            \n            interface\n            PaginationMeta\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/admin/dto/admin-user.dto.ts\n            \n            class\n            AdminUpdateUserDto\n            \n                90 %\n                (9/10)\n            \n        \n        \n            \n                \n                src/admin/interfaces/paginated-response.interface.ts\n            \n            interface\n            PaginatedResponse\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/admin/interfaces/paginated-response.interface.ts\n            \n            interface\n            PaginationMeta\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/admin/services/admin-user.service.ts\n            \n            injectable\n            AdminUserService\n            \n                60 %\n                (6/10)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                        src/auth/decorators/current-user.decorator.ts\n            \n            variable\n            CurrentUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/decorators/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/auth/decorators/roles.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/auth/guards/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/auth/guards/roles.guard.ts\n            \n            variable\n            ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/interfaces/jwt-payload.interface.ts\n            \n            interface\n            JwtPayload\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/common/exceptions/http-exception.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/exceptions/validation-exception.filter.ts\n            \n            class\n            ValidationExceptionFilter\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/exceptions/validation-exception.filter.ts\n            \n            interface\n            ValidationErrorItem\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/migrations/1714389820000-AddDobToUsers.ts\n            \n            class\n            AddDobToUsers1714389820000\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/migrations/1714390000000-CreateOrdersTables.ts\n            \n            class\n            CreateOrdersTables1714390000000\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/orders/dto/create-order.dto.ts\n            \n            class\n            CreateOrderDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/orders/dto/create-order.dto.ts\n            \n            class\n            OrderItemDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/orders/dto/update-order.dto.ts\n            \n            class\n            UpdateOrderDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/orders/entities/order-item.entity.ts\n            \n            entity\n            OrderItem\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/orders/entities/order.entity.ts\n            \n            entity\n            Order\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/orders/orders.controller.ts\n            \n            controller\n            OrdersController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/orders/orders.service.ts\n            \n            injectable\n            OrdersService\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/products/admin-products.controller.ts\n            \n            controller\n            AdminProductsController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/products/dto/create-product.dto.ts\n            \n            class\n            CreateProductDto\n            \n                0 %\n                (0/18)\n            \n        \n        \n            \n                \n                src/products/dto/product-query.dto.ts\n            \n            class\n            ProductQueryDto\n            \n                100 %\n                (17/17)\n            \n        \n        \n            \n                \n                src/products/dto/update-product.dto.ts\n            \n            class\n            UpdateProductDto\n            \n                0 %\n                (0/22)\n            \n        \n        \n            \n                \n                src/products/entities/product.entity.ts\n            \n            entity\n            Product\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/products/products.controller.ts\n            \n            controller\n            ProductsController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/products/products.service.ts\n            \n            injectable\n            ProductsService\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dto/user-query.dto.ts\n            \n            class\n            UserQueryDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/entities/address.entity.ts\n            \n            entity\n            Address\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/entities/roles.entity.ts\n            \n            entity\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/entities/users.entity.ts\n            \n            entity\n            Users\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/10)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^11.0.1\n        \n            @nestjs/config : ^4.0.2\n        \n            @nestjs/core : ^11.0.1\n        \n            @nestjs/jwt : ^11.0.0\n        \n            @nestjs/passport : ^11.0.5\n        \n            @nestjs/platform-express : ^11.0.1\n        \n            @nestjs/swagger : ^11.1.5\n        \n            @nestjs/typeorm : ^11.0.0\n        \n            @types/bcrypt : ^5.0.2\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            D : ^1.0.0\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            pg : ^8.15.6\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.1\n        \n            swagger-ui-express : ^5.0.1\n        \n            typeorm : ^0.3.22\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            OrderDirection   (src/.../order-direction.enum.ts)\n                        \n                        \n                            OrderStatus   (src/.../order-status.enum.ts)\n                        \n                        \n                            ProductCategory   (src/.../product.entity.ts)\n                        \n                        \n                            ProductCategory   (src/.../product-category.enum.ts)\n                        \n                        \n                            Role   (src/.../roles.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/users/enums/order-direction.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        OrderDirection\n                    \n                \n                        \n                            \n                                 ASC\n                            \n                        \n                        \n                            \n                                Value : asc\n                            \n                        \n                        \n                            \n                                 DESC\n                            \n                        \n                        \n                            \n                                Value : dsc\n                            \n                        \n            \n        \n\n    src/orders/enums/order-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        OrderStatus\n                    \n                \n                        \n                            \n                                 PENDING\n                            \n                        \n                        \n                            \n                                Value : PENDING\n                            \n                        \n                        \n                            \n                                 PROCESSING\n                            \n                        \n                        \n                            \n                                Value : PROCESSING\n                            \n                        \n                        \n                            \n                                 SHIPPED\n                            \n                        \n                        \n                            \n                                Value : SHIPPED\n                            \n                        \n                        \n                            \n                                 DELIVERED\n                            \n                        \n                        \n                            \n                                Value : DELIVERED\n                            \n                        \n                        \n                            \n                                 CANCELLED\n                            \n                        \n                        \n                            \n                                Value : CANCELLED\n                            \n                        \n                        \n                            \n                                 REFUNDED\n                            \n                        \n                        \n                            \n                                Value : REFUNDED\n                            \n                        \n            \n        \n\n    src/products/entities/product.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        ProductCategory\n                    \n                \n                        \n                            \n                                 ELECTRONICS\n                            \n                        \n                        \n                            \n                                Value : ELECTRONICS\n                            \n                        \n                        \n                            \n                                 CLOTHING\n                            \n                        \n                        \n                            \n                                Value : CLOTHING\n                            \n                        \n                        \n                            \n                                 T_SHIRTS\n                            \n                        \n                        \n                            \n                                Value : T_SHIRTS\n                            \n                        \n                        \n                            \n                                 SHIRTS\n                            \n                        \n                        \n                            \n                                Value : SHIRTS\n                            \n                        \n                        \n                            \n                                 PANTS\n                            \n                        \n                        \n                            \n                                Value : PANTS\n                            \n                        \n                        \n                            \n                                 SHOES\n                            \n                        \n                        \n                            \n                                Value : SHOES\n                            \n                        \n                        \n                            \n                                 ACCESSORIES\n                            \n                        \n                        \n                            \n                                Value : ACCESSORIES\n                            \n                        \n                        \n                            \n                                 BOOKS\n                            \n                        \n                        \n                            \n                                Value : BOOKS\n                            \n                        \n                        \n                            \n                                 HOME\n                            \n                        \n                        \n                            \n                                Value : HOME\n                            \n                        \n                        \n                            \n                                 SPORTS\n                            \n                        \n                        \n                            \n                                Value : SPORTS\n                            \n                        \n                        \n                            \n                                 BEAUTY\n                            \n                        \n                        \n                            \n                                Value : BEAUTY\n                            \n                        \n                        \n                            \n                                 FOOD\n                            \n                        \n                        \n                            \n                                Value : FOOD\n                            \n                        \n                        \n                            \n                                 OTHER\n                            \n                        \n                        \n                            \n                                Value : OTHER\n                            \n                        \n            \n        \n\n    src/products/enums/product-category.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ProductCategory\n                    \n                \n                        \n                            \n                                 T_SHIRTS\n                            \n                        \n                        \n                            \n                                Value : T_SHIRTS\n                            \n                        \n                        \n                            \n                                 SHIRTS\n                            \n                        \n                        \n                            \n                                Value : SHIRTS\n                            \n                        \n                        \n                            \n                                 JEANS\n                            \n                        \n                        \n                            \n                                Value : JEANS\n                            \n                        \n                        \n                            \n                                 PANTS\n                            \n                        \n                        \n                            \n                                Value : PANTS\n                            \n                        \n                        \n                            \n                                 DRESSES\n                            \n                        \n                        \n                            \n                                Value : DRESSES\n                            \n                        \n                        \n                            \n                                 SKIRTS\n                            \n                        \n                        \n                            \n                                Value : SKIRTS\n                            \n                        \n                        \n                            \n                                 SWEATERS\n                            \n                        \n                        \n                            \n                                Value : SWEATERS\n                            \n                        \n                        \n                            \n                                 JACKETS\n                            \n                        \n                        \n                            \n                                Value : JACKETS\n                            \n                        \n                        \n                            \n                                 HOODIES\n                            \n                        \n                        \n                            \n                                Value : HOODIES\n                            \n                        \n                        \n                            \n                                 SHOES\n                            \n                        \n                        \n                            \n                                Value : SHOES\n                            \n                        \n                        \n                            \n                                 ACCESSORIES\n                            \n                        \n                        \n                            \n                                Value : ACCESSORIES\n                            \n                        \n                        \n                            \n                                 UNDERWEAR\n                            \n                        \n                        \n                            \n                                Value : UNDERWEAR\n                            \n                        \n                        \n                            \n                                 SPORTWEAR\n                            \n                        \n                        \n                            \n                                Value : SPORTWEAR\n                            \n                        \n                        \n                            \n                                 SUITS\n                            \n                        \n                        \n                            \n                                Value : SUITS\n                            \n                        \n                        \n                            \n                                 FORMAL_WEAR\n                            \n                        \n                        \n                            \n                                Value : FORMAL_WEAR\n                            \n                        \n                        \n                            \n                                 CASUAL_WEAR\n                            \n                        \n                        \n                            \n                                Value : CASUAL_WEAR\n                            \n                        \n                        \n                            \n                                 ETHNIC_WEAR\n                            \n                        \n                        \n                            \n                                Value : ETHNIC_WEAR\n                            \n                        \n                        \n                            \n                                 KIDS_WEAR\n                            \n                        \n                        \n                            \n                                Value : KIDS_WEAR\n                            \n                        \n                        \n                            \n                                 MATERNITY_WEAR\n                            \n                        \n                        \n                            \n                                Value : MATERNITY_WEAR\n                            \n                        \n                        \n                            \n                                 PLUS_SIZE\n                            \n                        \n                        \n                            \n                                Value : PLUS_SIZE\n                            \n                        \n            \n        \n\n    src/users/enums/roles.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Role\n                    \n                \n                        \n                            \n                                 CUSTOMER\n                            \n                        \n                        \n                            \n                                Value : CUSTOMER\n                            \n                        \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : ADMIN\n                            \n                        \n                        \n                            \n                                 DELIVERY_MAN\n                            \n                        \n                        \n                            \n                                Value : DELIVERY_MAN\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g @nestjs/mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2025 AZMINUR RAHMAN\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AdminModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        OrdersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProductsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AdminModule\n\n\n\ncluster_AdminModule_imports\n\n\n\ncluster_AdminModule_exports\n\n\n\ncluster_AdminModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_OrdersModule\n\n\n\ncluster_OrdersModule_exports\n\n\n\ncluster_OrdersModule_providers\n\n\n\ncluster_ProductsModule\n\n\n\ncluster_ProductsModule_exports\n\n\n\ncluster_ProductsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nOrdersModule\n\nOrdersModule\n\n\n\nAdminModule\n\nAdminModule\n\nAdminModule -->\n\nOrdersModule->AdminModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nOrdersModule->AppModule\n\n\n\n\n\nOrdersService \n\nOrdersService \n\nOrdersService  -->\n\nOrdersModule->OrdersService \n\n\n\n\n\nProductsModule\n\nProductsModule\n\nOrdersModule -->\n\nProductsModule->OrdersModule\n\n\n\nAdminModule -->\n\nProductsModule->AdminModule\n\n\n\nAppModule -->\n\nProductsModule->AppModule\n\n\n\n\n\nProductsService \n\nProductsService \n\nProductsService  -->\n\nProductsModule->ProductsService \n\n\n\n\n\nAdminUserService \n\nAdminUserService \n\nAdminUserService  -->\n\nAdminModule->AdminUserService \n\n\n\nAppModule -->\n\nAdminModule->AppModule\n\n\n\n\n\nAdminUserService\n\nAdminUserService\n\nAdminModule -->\n\nAdminUserService->AdminModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nJwtAuthGuard \n\nJwtAuthGuard \n\nJwtAuthGuard  -->\n\nAuthModule->JwtAuthGuard \n\n\n\n\n\nRolesGuard \n\nRolesGuard \n\nRolesGuard  -->\n\nAuthModule->RolesGuard \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtAuthGuard\n\nJwtAuthGuard\n\nAuthModule -->\n\nJwtAuthGuard->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nOrdersService\n\nOrdersService\n\nOrdersModule -->\n\nOrdersService->OrdersModule\n\n\n\n\n\nProductsService\n\nProductsService\n\nProductsModule -->\n\nProductsService->ProductsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    8 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    7 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    8 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    16 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    6 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CurrentUser   (src/.../current-user.decorator.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../roles.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../roles.guard.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/decorators/current-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CurrentUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: unknown, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n    return request.user;\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: Role[]) => SetMetadata(ROLES_KEY, roles)\n                    \n                \n\n            \n                \n                    Decorator for specifying required roles for route handlers.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'roles'\n                    \n                \n\n            \n                \n                    Metadata key for storing roles in route handlers.\n\n                \n            \n\n        \n    \n\n    src/auth/guards/roles.guard.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'roles'\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
