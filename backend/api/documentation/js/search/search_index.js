var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/entities/Address.html",[0,1.503,1,1.668]],["body/entities/Address.html",[0,1.633,1,2.402,2,2.151,3,0.224,4,0.2,5,0.2,6,3.522,7,0.322,8,0.86,9,6.085,10,6.085,11,2.308,12,1.815,13,6.085,14,6.085,15,6.085,16,6.085,17,6.085,18,3.644,19,1.83,20,3.773,21,0.653,22,0.019,23,1.202,24,1.928,25,4.625,26,6.403,27,5.718,28,3.239,29,1.309,30,4.094,31,4.094,32,2.026,33,4.256,34,4.094,35,3.497,36,4.094,37,2.458,38,1.959,39,1.959,40,4.094,41,4.977,42,3.795,43,1.473,44,4.094,45,4.168,46,4.094,47,4.094,48,4.094,49,4.256,50,4.094,51,1.844,52,3.145,53,4.094,54,4.094,55,3.795,56,4.094,57,0.393,58,2.452,59,4.349,60,4.168,61,4.168,62,1.553,63,4.094,64,4.094,65,0.224,66,0.045,67,4.094,68,0.877,69,0.013,70,0.013]],["title/modules/AdminModule.html",[71,1.503,72,2.428]],["body/modules/AdminModule.html",[3,0.274,4,0.245,5,0.245,22,0.019,51,1.426,57,0.55,65,0.274,66,0.056,69,0.015,70,0.015,71,2.669,72,4.887,73,2.48,74,2.48,75,2.804,76,2.804,77,2.48,78,2.804,79,2.804,80,4.31,81,4.31,82,4.374,83,4.088,84,4.088,85,3.455,86,2.804,87,2.218,88,5.01,89,3.455,90,4.68,91,4.68,92,4.68,93,3.697,94,1.181,95,3,96,1.9,97,3.229,98,2.229,99,5.01,100,6.692,101,5.01,102,3.849,103,4.31,104,5.01,105,5.01,106,5.01,107,3.849]],["title/controllers/AdminOrdersController.html",[92,2.635,108,1.865]],["body/controllers/AdminOrdersController.html",[3,0.117,4,0.105,5,0.105,7,0.169,12,1.644,20,3.084,21,0.635,22,0.019,23,1.138,24,1.595,28,1.001,29,1.083,32,2.352,38,1.514,39,2.643,43,1.293,45,2.598,57,0.457,65,0.117,66,0.024,68,1.552,69,0.008,70,0.008,89,1.199,92,2.366,94,0.505,98,0.773,108,1.06,109,4.409,110,1.842,111,1.498,112,2.142,113,1.349,114,2.314,115,3.383,116,2.51,117,2.366,118,4.192,119,4.192,120,4.192,121,3.383,122,4.192,123,4.192,124,2.142,125,2.357,126,2.142,127,3.383,128,4.192,129,2.932,130,3.383,131,2.142,132,2.585,133,1.197,134,3.606,135,2.585,136,2.142,137,1.321,138,2.198,139,2.768,140,4.145,141,3.93,142,4.054,143,2.728,144,3.3,145,2.357,146,2.108,147,1.645,148,3.968,149,3.237,150,2.142,151,1.899,152,3.109,153,2.598,154,1.99,155,2.142,156,3.383,157,4.46,158,1.59,159,2.142,160,5.219,161,1.283,162,1.842,163,2.598,164,1.776,165,2.142,166,2.142,167,2.142,168,4.843,169,4.379,170,1.47,171,2.91,172,3.383,173,2.142,174,2.598,175,2.142,176,2.91,177,2.142,178,4.233,179,2.91,180,3.626,181,2.598,182,2.142,183,2.142,184,2.142,185,2.18,186,2.91,187,2.142,188,2.142,189,5.511,190,5.511,191,4.762,192,4.762,193,2.142,194,2.91,195,3.331,196,2.142,197,1.06,198,1.842,199,4.192,200,2.142,201,3.606,202,1.777,203,3.383,204,2.142,205,3.552,206,3.383,207,3.383,208,2.366,209,2.142,210,1.06,211,2.142,212,4.595,213,3.383,214,2.142,215,2.665,216,3.383,217,2.91,218,3.331,219,2.142,220,3.383,221,2.142,222,1.842,223,1.645,224,2.91,225,1.674,226,2.142,227,1.645,228,1.498,229,1.645,230,1.283,231,1.38,232,1.498,233,2.702,234,2.142,235,1.125,236,1.842,237,1.498,238,1.777,239,1.842,240,1.842,241,0.773,242,1.283,243,2.142,244,1.498,245,1.498,246,4.409,247,3.626,248,5.316,249,2.598,250,0.609,251,1.38,252,1.38,253,1.38,254,1.283,255,1.199,256,2.142,257,2.142,258,1.645,259,1.645,260,1.498,261,0.773,262,2.142,263,2.142,264,2.142,265,2.142,266,2.142,267,4.096,268,4.096,269,2.142,270,2.142,271,1.961,272,2.142,273,2.142,274,2.142,275,2.142,276,2.142,277,2.142,278,3.383,279,0.899,280,1.498,281,1.498,282,2.142,283,2.142,284,2.142,285,2.142,286,2.598,287,2.142,288,2.142,289,1.842,290,1.842,291,2.142,292,1.283,293,1.645,294,2.142,295,3.383,296,3.383,297,2.142,298,2.142,299,2.142,300,1.645,301,2.142,302,2.142,303,1.842,304,1.842,305,3.383,306,3.383,307,2.142,308,2.142,309,2.142,310,1.842,311,1.842,312,2.142,313,2.142,314,2.142,315,1.163,316,1.842,317,1.001,318,2.142,319,2.142,320,0.555,321,2.142,322,2.142,323,3.383,324,2.142,325,2.142,326,2.142,327,2.142,328,2.142,329,2.142]],["title/classes/AdminProductQueryDto.html",[66,0.042,330,2.256]],["body/classes/AdminProductQueryDto.html",[3,0.138,4,0.123,5,0.123,7,0.198,8,0.608,11,0.955,18,1.508,21,0.61,22,0.019,23,0.823,24,1.857,29,1.26,37,2.501,38,2.454,43,1.79,57,0.376,65,0.254,66,0.051,68,1.312,69,0.009,70,0.009,133,1.473,137,1.409,138,1.852,139,2.12,143,2.299,145,1.898,146,1.698,151,2.442,154,2.278,164,1.041,170,1.536,197,3.681,202,2.937,250,0.716,320,0.994,330,2.296,331,0.909,332,5.042,333,2.407,334,1.409,335,3.11,336,1.852,337,2.599,338,2.599,339,2.599,340,2.599,341,3.568,342,3.568,343,3.568,344,3.568,345,3.568,346,3.568,347,4.067,348,4.62,349,5.114,350,2.518,351,2.518,352,2.906,353,2.518,354,2.518,355,2.015,356,5.589,357,2.518,358,2.146,359,2.472,360,2.518,361,2.472,362,2.518,363,2.472,364,2.518,365,2.472,366,2.518,367,2.322,368,2.181,369,2.146,370,2.946,371,1.319,372,3.299,373,2.518,374,2.518,375,5.888,376,2.915,377,5.888,378,2.518,379,4.523,380,2.518,381,2.57,382,2.181,383,2.518,384,3.295,385,2.518,386,2.518,387,2.166,388,3.835,389,2.518,390,2.518,391,3.996,392,3.632,393,2.518,394,2.518,395,1.597,396,2.015,397,2.518,398,2.166,399,4.808,400,4.645,401,2.296,402,2.518,403,2.518,404,2.875,405,1.762,406,3.871,407,3.295,408,1.246,409,1.177,410,0.787,411,5.98,412,1.246,413,1.508,414,4.034,415,2.166,416,1.409,417,1.934,418,2.166,419,2.518,420,1.934,421,3.946,422,5.193,423,5.193,424,1.623,425,2.518,426,2.166]],["title/controllers/AdminProductsController.html",[91,2.635,108,1.865]],["body/controllers/AdminProductsController.html",[3,0.111,4,0.1,5,0.1,7,0.16,12,1.981,21,0.592,22,0.019,23,1.117,24,1.609,29,1.092,32,1.983,39,1.947,57,0.468,65,0.111,66,0.023,68,1.405,69,0.008,70,0.008,89,1.14,91,2.274,94,0.48,98,0.736,108,1.009,109,4.436,111,1.425,113,1.297,114,2.822,116,1.947,132,2.608,133,1.207,135,2.608,137,0.9,139,2.841,141,3.018,142,3.167,147,1.565,149,3.528,152,2.822,153,1.565,157,1.753,160,3.116,168,1.565,169,4.003,170,1.647,178,5.103,180,4.11,186,1.753,205,3.476,210,2.504,215,3.018,217,1.753,218,3.239,223,4.514,224,5.715,225,3.288,227,2.498,228,2.837,229,1.565,230,1.22,231,1.313,232,1.425,235,1.071,236,1.753,237,1.425,238,1.708,239,1.753,240,1.753,241,0.736,242,1.22,245,1.425,246,4.436,247,5.031,248,3.557,249,2.498,250,0.58,251,1.313,252,1.313,253,1.313,254,1.22,258,1.565,259,1.565,261,0.736,267,1.753,268,1.753,271,2.036,315,1.74,317,2.165,320,1.698,330,2.773,332,1.425,333,2.492,337,1.14,338,1.14,339,1.14,340,1.14,358,3.289,359,3.476,361,3.647,363,3.476,365,3.476,381,3.139,382,1.703,395,0.701,396,1.708,427,1.753,428,2.038,429,2.773,430,3.49,431,2.797,432,3.251,433,3.251,434,3.251,435,3.251,436,2.797,437,1.565,438,3.389,439,2.038,440,3.251,441,3.251,442,2.038,443,3.251,444,2.797,445,6.791,446,5.842,447,6.791,448,2.038,449,1.313,450,2.837,451,2.096,452,2.038,453,1.947,454,2.038,455,2.038,456,2.797,457,2.038,458,1.565,459,2.038,460,4.057,461,3.251,462,4.63,463,3.251,464,5.659,465,2.038,466,2.038,467,5.877,468,2.038,469,5.877,470,5.877,471,3.788,472,4.63,473,2.038,474,5.877,475,2.038,476,2.038,477,2.038,478,2.038,479,2.038,480,2.038,481,2.038,482,2.038,483,2.038,484,2.038,485,2.038,486,2.038,487,2.038,488,1.22,489,3.628,490,1.753,491,3.239,492,2.038,493,2.038,494,1.753,495,4.11,496,3.251,497,2.038,498,2.038,499,2.038,500,3.251,501,2.498,502,2.038,503,2.038,504,2.132,505,1.753,506,2.038,507,2.498,508,3.251,509,2.038,510,3.557,511,1.22,512,2.038,513,2.038,514,0.902,515,0.856,516,1.753,517,2.038,518,2.038,519,2.038,520,1.753,521,2.038,522,5.06,523,2.038,524,2.038,525,2.038,526,2.038,527,4.63,528,2.038,529,2.038,530,2.038,531,2.038,532,2.038,533,2.038,534,2.038,535,1.753,536,2.038,537,2.038,538,2.038,539,2.038,540,2.038,541,2.038,542,2.038,543,2.038,544,2.038]],["title/classes/AdminUpdateUserDto.html",[66,0.042,545,2.256]],["body/classes/AdminUpdateUserDto.html",[1,2.443,3,0.185,4,0.166,5,0.166,7,0.267,8,0.756,19,2.049,21,0.638,22,0.019,23,1.143,24,1.808,29,1.227,32,2.146,37,2.603,39,1.224,43,1.295,57,0.474,65,0.185,66,0.07,68,1.402,69,0.011,70,0.011,133,1.452,137,1.073,139,2.603,149,2.731,152,2.002,154,1.722,170,1.532,241,2.605,250,1.357,279,2.002,331,1.224,336,2.201,348,4.424,355,3.146,404,2.82,405,2.271,407,3.351,409,1.585,410,1.491,412,1.678,414,3.905,491,2.371,545,3.304,546,4.557,547,2.371,548,2.002,549,3.074,550,2.23,551,4.102,552,2.506,553,4.238,554,3.002,555,2.899,556,3.556,557,4.746,558,2.899,559,4.497,560,3.39,561,3.39,562,5.18,563,4.746,564,3.39,565,3.39,566,3.859,567,4.769,568,3.39,569,4.769,570,3.39,571,4.577,572,3.39,573,1.585,574,3.39,575,3.39,576,2.8,577,3.39,578,3.39,579,3.39,580,3.39,581,3.39,582,3.335,583,2.604,584,2.916,585,2.23,586,4.769,587,2.185,588,2.03,589,1.781,590,2.185,591,2.371]],["title/controllers/AdminUserController.html",[90,2.635,108,1.865]],["body/controllers/AdminUserController.html",[3,0.143,4,0.128,5,0.128,7,0.205,8,0.624,12,2.214,19,2.085,21,0.609,22,0.019,23,1.135,24,1.471,29,0.998,37,2.006,39,2.049,43,1.069,51,1.815,55,2.755,57,0.473,65,0.143,66,0.029,68,1.399,69,0.009,70,0.009,89,1.46,90,2.755,94,0.615,98,0.942,108,2.349,109,4.175,111,1.824,113,1.571,114,2.965,116,2.359,117,2.755,132,2.506,133,1.205,135,2.679,137,0.766,138,1.571,139,2.734,147,2.004,149,2.81,151,1.571,152,2.506,153,2.004,154,0.942,158,2.678,161,1.562,162,2.244,169,3.658,170,1.636,171,4.549,179,4.549,180,3.97,181,3.026,210,2.81,215,3.468,218,4.462,222,2.244,223,4.36,225,3.158,228,2.755,229,2.004,230,3.399,231,3.059,232,1.824,235,1.37,237,1.824,238,2.069,241,2.527,245,1.824,246,4.175,247,4.976,248,3.646,249,3.026,250,0.742,258,2.004,259,2.004,260,1.824,261,0.942,271,1.861,279,1.654,303,2.244,304,4.083,310,2.244,311,2.244,320,0.676,336,2.381,355,2.069,370,3.646,396,3.136,446,4.549,449,1.681,451,3.658,453,2.359,488,1.562,490,2.244,491,2.755,510,3.646,511,1.562,516,2.244,520,2.244,545,3.166,548,1.095,550,1.842,551,2.244,552,2.069,562,2.755,584,2.244,592,3.388,593,2.608,594,2.755,595,4.746,596,3.388,597,4.083,598,4.746,599,2.778,600,2.608,601,2.608,602,2.539,603,4.746,604,2.608,605,3.136,606,1.95,607,2.608,608,3.939,609,2.608,610,2.004,611,2.608,612,3.166,613,3.939,614,3.388,615,3.939,616,2.608,617,4.062,618,2.608,619,2.608,620,2.608,621,2.608,622,2.608,623,2.608,624,2.244,625,2.244,626,5.676,627,2.494,628,2.608,629,3.939,630,1.824,631,2.004,632,2.608,633,2.608,634,2.608,635,4.746,636,2.608,637,2.608,638,5.676,639,4.746,640,4.746,641,4.746,642,2.608,643,5.288,644,2.608,645,1.562,646,2.608,647,2.608,648,2.608,649,3.388,650,2.608,651,2.608,652,2.608,653,2.608,654,2.608,655,2.608]],["title/classes/AdminUserQueryDto.html",[66,0.042,599,1.98]],["body/classes/AdminUserQueryDto.html",[3,0.148,4,0.133,5,0.133,7,0.214,8,0.643,11,1.03,19,1.969,21,0.642,22,0.019,23,1.127,24,1.79,29,1.215,32,2.019,37,2.382,38,2.427,51,1.535,57,0.391,65,0.266,66,0.06,69,0.012,70,0.01,125,2.009,133,1.449,137,1.461,138,2.152,139,2.046,143,2.406,144,2.911,145,2.406,146,2.388,149,2.406,151,2.857,154,2.085,158,1.03,164,1.102,170,1.545,197,2.009,241,2.522,242,1.625,250,0.772,331,0.98,334,1.519,336,1.939,348,4.398,349,5.071,355,2.834,367,2.046,368,2.772,369,3.232,387,2.335,392,3.773,395,1.855,396,3.034,398,2.335,401,2.43,404,2.786,405,2.046,407,2.721,408,1.344,409,1.269,410,0.849,412,1.344,414,3.91,424,2.616,451,2.616,546,4.503,548,2.041,549,2.616,550,1.898,552,1.426,554,2.265,555,2.554,556,3.133,558,2.554,571,2.839,576,2.522,587,1.749,588,1.625,589,1.426,590,1.749,591,1.898,599,2.554,606,2.406,656,3.734,657,3.734,658,3.734,659,3.734,660,3.734,661,3.761,662,4.144,663,4.059,664,2.714,665,4.059,666,2.714,667,4.059,668,2.714,669,3.23,670,2.714,671,2.714,672,2.714,673,2.714,674,2.714,675,2.714,676,2.714,677,2.714,678,4.144,679,2.714,680,2.714,681,2.714,682,2.714,683,2.714,684,2.714,685,3.722,686,3.133,687,1.898,688,1.481,689,2.834,690,2.085,691,2.911,692,2.388,693,1.749,694,1.519,695,1.898,696,1.898,697,2.616,698,2.132,699,1.749,700,1.749,701,1.749,702,1.749,703,2.911,704,1.344,705,1.519,706,2.085,707,3.118,708,1.625]],["title/modules/AppModule.html",[71,1.503,709,2.635]],["body/modules/AppModule.html",[2,2.466,3,0.256,4,0.23,5,0.23,21,0.399,22,0.019,39,2.346,43,1.274,57,0.535,65,0.256,66,0.052,69,0.014,70,0.014,71,2.591,72,4.632,73,2.323,74,2.323,75,2.627,76,2.627,77,2.323,78,2.627,79,2.627,82,4.303,83,4.022,84,4.022,85,3.317,86,2.627,87,2.078,93,3.89,94,1.107,95,2.811,96,1.78,102,3.606,103,4.038,709,5.351,710,4.038,711,4.038,712,4.632,713,4.694,714,5.099,715,5.87,716,2.811,717,4.694,718,4.038,719,4.694,720,4.694,721,4.694,722,4.694,723,4.038,724,4.694,725,3.606,726,4.694,727,4.694,728,4.694,729,4.694,730,4.694,731,2.811,732,4.694,733,4.694,734,4.694,735,4.694,736,4.694,737,4.694,738,4.694,739,3.606,740,4.694,741,4.694,742,5.927,743,5.099,744,4.694,745,4.694,746,4.694,747,4.694,748,3.025]],["title/controllers/AuthController.html",[108,1.865,749,2.635]],["body/controllers/AuthController.html",[3,0.197,4,0.176,5,0.176,7,0.284,8,0.571,19,1.892,21,0.568,22,0.019,23,0.571,24,1.477,29,1.002,43,1.811,57,0.484,65,0.197,66,0.04,68,1.222,69,0.012,70,0.012,87,1.595,89,2.016,94,0.849,108,2.821,111,2.52,113,1.985,114,2.97,125,3.738,132,2.393,133,1.108,134,5.288,135,2.926,139,1.887,169,2.322,170,1.43,178,3.822,180,2.52,181,3.822,210,2.821,227,2.767,228,3.48,230,2.157,232,2.52,245,2.52,246,3.48,247,3.987,250,1.025,255,2.016,260,2.52,261,1.301,271,1.869,315,1.96,317,2.665,501,3.822,510,3.822,550,1.685,594,3.48,605,2.614,614,3.099,624,3.099,625,3.099,649,4.903,669,4.287,695,2.665,749,3.48,750,4.28,751,3.602,752,3.987,753,4.28,754,3.48,755,4.28,756,3.987,757,3.099,758,4.558,759,3.602,760,3.602,761,3.602,762,4.976,763,3.734,764,4.3,765,4.976,766,4.722,767,3.602,768,4.28,769,3.822,770,3.602,771,3.602,772,3.602,773,5.55,774,3.602,775,3.602,776,3.602,777,3.413,778,3.099,779,3.099,780,2.016,781,2.767,782,2.016,783,3.602,784,3.602,785,3.602,786,5.55,787,5.7,788,3.602,789,3.602,790,3.602,791,5.288,792,3.602,793,4.976,794,5.7,795,5.7,796,5.7,797,4.903,798,5.7,799,4.903,800,3.602,801,4.976,802,3.602,803,3.602,804,3.602,805,3.602,806,3.602,807,3.602,808,3.48,809,3.48,810,3.602,811,3.602]],["title/modules/AuthModule.html",[71,1.503,712,2.428]],["body/modules/AuthModule.html",[3,0.249,4,0.223,5,0.223,22,0.019,51,1.296,57,0.553,65,0.249,66,0.05,69,0.014,70,0.014,71,2.556,73,2.255,74,2.255,75,2.55,76,2.55,77,2.255,78,3.586,79,3.586,85,3.255,86,2.55,87,2.017,89,3.255,93,3.483,94,1.074,95,2.728,96,1.728,97,2.937,107,3.5,114,1.913,235,3.972,237,3.187,238,3.856,712,4.914,714,3.92,715,3.92,716,3.483,723,3.92,748,2.937,749,4.482,777,4.271,778,3.92,782,2.55,812,3.92,813,3.92,814,3.92,815,4.597,816,4.597,817,4.556,818,5.817,819,3.187,820,5.817,821,4.556,822,4.556,823,4.556,824,4.556,825,3.187,826,3.187,827,4.556,828,4.556,829,5.817,830,4.556,831,4.556,832,4.556,833,3.187,834,4.556,835,4.556,836,3.92,837,4.556]],["title/injectables/AuthService.html",[777,2.256,838,1.124]],["body/injectables/AuthService.html",[3,0.173,4,0.155,5,0.155,7,0.249,12,0.944,19,1.935,20,3.25,21,0.544,22,0.019,23,1.156,29,1.125,32,0.99,51,1.652,57,0.498,62,1.201,65,0.173,66,0.05,68,1.371,69,0.011,70,0.011,94,0.747,96,1.201,97,2.041,98,1.919,113,1.812,114,3.062,132,2.687,133,1.244,135,2.687,170,1.139,210,2.63,215,1.772,230,1.896,261,1.919,271,1.742,300,2.432,315,2.397,317,3.362,320,1.708,367,1.201,501,2.432,514,2.011,515,2.883,554,1.908,576,1.481,594,3.178,596,3.909,605,2.387,669,3.947,695,1.481,716,1.896,748,2.041,752,3.717,754,2.215,755,3.909,756,3.178,757,3.909,758,4.124,763,3.25,764,3.425,766,4.723,768,3.909,769,3.49,777,3.182,779,2.724,786,4.571,791,4.995,808,3.178,809,4.934,819,2.215,825,2.215,826,2.215,833,3.178,836,3.909,838,1.355,839,1.664,840,2.724,841,4.544,842,4.544,843,4.544,844,2.724,845,3.051,846,5.67,847,4.082,848,4.46,849,3.166,850,3.178,851,4.544,852,3.166,853,3.166,854,4.544,855,5.806,856,4.544,857,3.166,858,4.544,859,3.166,860,4.544,861,3.166,862,4.082,863,2.432,864,1.772,865,3.178,866,3.166,867,3.166,868,2.041,869,2.432,870,3.166,871,2.041,872,3.178,873,3.166,874,2.928,875,3.082,876,4.544,877,4.544,878,4.544,879,3.166,880,2.432,881,3.909,882,2.724,883,2.724,884,3.166,885,2.432,886,4.544,887,4.544,888,4.544,889,3.166,890,3.166,891,2.041,892,3.425,893,3.166,894,3.166,895,3.166,896,4.544,897,2.432,898,4.544,899,4.544,900,4.544,901,4.544,902,3.166,903,4.544,904,3.166,905,2.215,906,3.49,907,2.432,908,3.166,909,2.724,910,4.544,911,2.724,912,3.166,913,3.166,914,3.166,915,3.166,916,3.166,917,3.166]],["title/classes/CreateOrderDto.html",[66,0.042,918,2.428]],["body/classes/CreateOrderDto.html",[3,0.227,4,0.203,5,0.203,7,0.327,8,0.868,12,1.24,21,0.603,22,0.019,23,1.124,24,1.588,29,1.078,39,2.214,43,1.129,57,0.444,65,0.299,66,0.072,69,0.013,70,0.013,133,1.065,137,0.808,152,2.921,154,1.979,158,1.577,164,1.955,170,1.52,250,1.183,279,3.088,292,3.671,331,1.501,333,1.797,368,2.845,382,2.737,384,2.326,395,1.885,404,2.6,405,2.57,406,3.282,410,1.3,412,2.057,573,2.867,583,4.21,585,3.367,602,3.532,918,3.532,919,5.007,920,2.907,921,4.738,922,5.274,923,4.738,924,4.157,925,4.157,926,4.157,927,4.21,928,3.833,929,4.714,930,3.282,931,4.714,932,4.714,933,4.714,934,2.679,935,4.157,936,4.714,937,3.532,938,5.274,939,4.157,940,4.157,941,3.532,942,3.833,943,4.21,944,5.274,945,5.274,946,5.274,947,5.274,948,4.714,949,2.713,950,4.714,951,5.607,952,3.833,953,4.21,954,4.21,955,5.607,956,4.21,957,4.21,958,3.576,959,3.193,960,3.193,961,2.907,962,2.907,963,3.576,964,3.576]],["title/classes/CreateProductDto.html",[66,0.042,438,2.256]],["body/classes/CreateProductDto.html",[3,0.145,4,0.13,5,0.13,7,0.208,8,0.631,21,0.618,22,0.019,23,1.145,24,1.871,28,2.671,29,1.27,37,2.43,38,1.923,39,2.449,43,1.63,57,0.386,65,0.145,66,0.053,68,1.224,69,0.009,70,0.009,133,1.431,137,1.167,152,2.805,154,1.438,170,1.583,197,2.636,202,3.001,250,0.753,279,3.162,320,1.032,331,0.955,333,2.468,335,3.42,337,2.679,338,2.679,339,2.679,340,2.679,348,4.13,352,3.197,358,2.229,359,2.566,361,2.566,363,2.566,365,3.868,371,1.37,376,3.082,381,2.827,382,1.672,384,2.981,404,2.772,405,2.487,406,3.189,407,3.197,408,1.31,409,1.237,410,0.827,411,4.118,412,1.31,413,1.585,414,3.669,420,2.033,421,3.086,438,2.384,471,4.13,573,3.123,585,3.172,687,1.851,703,3.189,934,1.706,941,3.086,942,3.348,943,2.033,954,2.033,956,2.033,961,2.785,962,2.785,965,6.247,966,2.033,967,3.678,968,4.388,969,4.014,970,4.118,971,4.388,972,4.118,973,4.388,974,4.388,975,3.059,976,2.276,977,2.646,978,3.059,979,3.059,980,3.425,981,3.425,982,3.425,983,3.425,984,3.425,985,3.425,986,3.425,987,3.425,988,3.059,989,2.276,990,2.646,991,2.646,992,2.646,993,4.092,994,3.425,995,2.646,996,4.914,997,3.425,998,5.163,999,4.788,1000,3.982,1001,4.914,1002,5.512,1003,3.982,1004,3.982,1005,2.646,1006,2.646,1007,4.092,1008,2.646,1009,3.982,1010,3.982,1011,2.276,1012,2.646,1013,3.982,1014,2.646,1015,3.425,1016,2.646,1017,2.646,1018,2.276,1019,2.646,1020,2.276,1021,2.646,1022,2.276,1023,3.982,1024,2.646,1025,2.646,1026,3.982,1027,2.033,1028,2.646,1029,2.646,1030,2.566,1031,2.276,1032,2.646,1033,2.646,1034,2.646,1035,3.425,1036,3.425,1037,2.646,1038,2.646,1039,2.646,1040,2.646,1041,2.646,1042,2.646,1043,2.646,1044,2.276,1045,2.646,1046,2.646,1047,2.646,1048,2.646,1049,2.276,1050,2.646,1051,2.646,1052,2.646,1053,2.646,1054,2.646,1055,3.982,1056,2.646,1057,2.276,1058,2.276]],["title/classes/CreateUserDto.html",[66,0.042,1059,2.256]],["body/classes/CreateUserDto.html",[1,2.367,3,0.219,4,0.196,5,0.196,7,0.315,8,0.847,19,2.014,21,0.598,22,0.018,23,1.189,24,1.821,29,1.236,32,1.671,39,2.173,43,1.452,57,0.388,65,0.219,66,0.059,68,1.376,69,0.013,70,0.013,133,1.338,137,1.338,152,2.891,170,1.506,250,1.139,279,3.15,331,1.446,404,2.561,405,2.611,410,1.252,547,2.8,553,4.623,554,2.81,555,3.162,558,3.162,559,4.66,563,4.599,566,3.446,573,3.287,576,2.5,582,3.739,585,3.339,612,3.846,685,3.446,695,2.5,731,4.007,799,3.444,941,4.313,969,3.446,1007,4.107,1059,3.201,1060,6.143,1061,4.209,1062,5.346,1063,4.599,1064,4.599,1065,4.599,1066,5.346,1067,6.018,1068,4.004,1069,4.004,1070,4.004,1071,4.004,1072,4.004,1073,4.004,1074,5.346,1075,5.346,1076,4.004,1077,4.004,1078,4.004,1079,6.422,1080,5.346,1081,4.004,1082,4.599,1083,4.004,1084,4.107,1085,5.346,1086,4.004,1087,3.444,1088,4.004,1089,4.004,1090,4.004,1091,3.444]],["title/interfaces/CustomerReportRow.html",[688,0.888,1092,2.635]],["body/interfaces/CustomerReportRow.html",[3,0.112,4,0.1,5,0.1,7,0.162,8,0.518,11,2.235,12,2.028,19,1.879,20,1.831,21,0.483,22,0.019,23,1.119,28,2.375,32,2.08,37,0.779,51,1.54,57,0.482,62,0.779,65,0.112,66,0.023,68,1.407,69,0.008,70,0.008,94,0.484,96,0.779,98,1.679,114,2.614,137,1.181,138,2.158,141,2.282,142,3.028,143,1.619,144,1.229,145,2.018,146,2.059,148,3.487,151,1.855,158,1.241,161,1.229,164,1.107,185,3.273,205,1.323,208,2.288,215,2.603,225,2.81,241,2.248,251,1.323,252,1.323,253,1.323,254,1.229,261,1.472,271,2.182,280,2.288,315,2.594,317,3.353,320,1.701,336,2.158,367,2.235,368,1.373,371,2.289,395,1.861,429,1.229,449,1.323,453,1.229,488,1.229,511,1.959,514,0.909,515,1.953,545,1.959,554,2.55,555,1.719,558,1.719,559,2.997,566,3.273,576,2.53,599,1.719,602,1.323,605,3.191,610,1.577,617,2.513,627,1.079,630,2.852,645,1.229,661,3.637,688,0.484,692,3.011,694,1.149,705,1.149,708,1.229,731,3.041,838,0.975,845,2.443,850,1.436,863,1.577,864,1.149,865,2.288,868,1.323,871,2.108,872,3.252,874,2.108,875,2.911,880,1.577,885,3.572,891,2.108,892,2.108,906,1.577,907,2.513,930,1.229,949,1.016,969,2.628,1059,2.785,1061,2.852,1084,2.513,1092,2.852,1093,0.96,1094,1.577,1095,4.369,1096,4.369,1097,2.628,1098,1.436,1099,2.628,1100,1.766,1101,1.577,1102,1.323,1103,1.323,1104,2.628,1105,1.766,1106,1.577,1107,1.577,1108,1.577,1109,1.229,1110,2.288,1111,1.766,1112,1.766,1113,1.323,1114,1.323,1115,1.766,1116,2.814,1117,1.766,1118,1.766,1119,1.229,1120,2.814,1121,1.766,1122,3.507,1123,3.507,1124,1.766,1125,1.766,1126,1.766,1127,1.766,1128,1.766,1129,1.577,1130,1.766,1131,1.766,1132,2.513,1133,1.577,1134,2.814,1135,4,1136,1.766,1137,1.766,1138,1.766,1139,1.323,1140,1.766,1141,1.766,1142,2.852,1143,1.766,1144,3.507,1145,4.655,1146,2.814,1147,2.288,1148,1.766,1149,1.766,1150,2.814,1151,4,1152,1.766,1153,1.766,1154,1.766,1155,2.814,1156,1.766,1157,1.766,1158,2.814,1159,2.852,1160,2.814,1161,1.766,1162,1.766,1163,1.766,1164,1.766,1165,1.766,1166,1.766,1167,1.766,1168,1.766,1169,1.436,1170,1.766,1171,1.766,1172,1.766,1173,1.577,1174,1.577,1175,1.577,1176,1.436,1177,1.766,1178,1.766,1179,2.814,1180,1.766,1181,2.814,1182,4.655,1183,2.814,1184,4,1185,1.766,1186,2.814,1187,1.436,1188,2.513,1189,1.766,1190,1.766,1191,1.766,1192,2.513,1193,1.577,1194,4,1195,2.513,1196,2.513,1197,2.108,1198,1.766,1199,1.766,1200,2.814,1201,1.766,1202,1.436,1203,2.814,1204,2.814,1205,2.814,1206,1.766,1207,1.766,1208,1.436,1209,1.766,1210,1.766,1211,2.814,1212,1.766,1213,1.577,1214,1.766,1215,1.766,1216,1.766,1217,3.507,1218,2.814,1219,2.814,1220,1.436,1221,2.814,1222,2.814,1223,4,1224,1.766,1225,2.814,1226,2.814,1227,1.766,1228,1.577,1229,1.323,1230,1.577,1231,1.577,1232,1.577,1233,1.577,1234,1.766,1235,1.577,1236,2.288,1237,1.577,1238,1.766,1239,2.513,1240,1.766,1241,1.766,1242,2.513,1243,1.766,1244,1.577,1245,1.577,1246,1.766,1247,1.766,1248,1.766]],["title/injectables/JwtAuthGuard.html",[235,1.98,838,1.124]],["body/injectables/JwtAuthGuard.html",[3,0.367,4,0.221,5,0.221,7,0.355,19,1.887,21,0.542,22,0.019,29,1.121,43,1.223,57,0.487,65,0.246,66,0.064,68,1.366,69,0.014,70,0.014,94,1.062,113,2.304,132,2.676,133,1.239,135,2.425,170,1.238,235,3.349,261,2.085,271,2.09,315,1.55,320,1.167,514,2.557,515,2.425,589,2.368,606,2.23,631,5.164,752,4.458,753,4.968,763,3.98,764,3.722,766,3.461,780,3.232,781,4.437,782,2.522,819,3.152,838,1.722,839,2.368,846,6.117,862,3.461,875,2.107,928,3.152,1082,4.968,1249,3.876,1250,4.04,1251,5.776,1252,4.968,1253,4.108,1254,4.968,1255,4.968,1256,5.776,1257,4.506,1258,6.22,1259,4.506,1260,4.968,1261,5.164,1262,4.506,1263,3.876,1264,5.776,1265,4.506,1266,5.776,1267,3.461,1268,4.506,1269,4.506,1270,3.461,1271,3.461,1272,3.152,1273,4.506,1274,3.876,1275,5.776,1276,4.506,1277,3.876,1278,3.876,1279,4.506,1280,4.506,1281,4.506,1282,4.506,1283,3.461,1284,4.506]],["title/interfaces/JwtPayload.html",[688,0.888,1285,2.635]],["body/interfaces/JwtPayload.html",[1,2.762,3,0.278,4,0.249,5,0.249,7,0.401,8,0.989,12,1.86,19,1.694,21,0.638,22,0.019,23,1.216,65,0.278,69,0.015,70,0.015,133,1.213,137,1.366,170,1.092,241,2.648,554,3.08,562,4.914,588,3.052,688,1.471,763,2.852,764,4.021,808,4.914,905,3.564,1093,2.383,1285,4.363,1286,4.384,1287,4.384,1288,4.384,1289,7.026,1290,6.238,1291,4.363,1292,5.366,1293,6.238]],["title/injectables/JwtStrategy.html",[815,2.428,838,1.124]],["body/injectables/JwtStrategy.html",[3,0.228,4,0.204,5,0.204,7,0.328,12,1.639,19,1.842,21,0.523,22,0.019,29,1.08,39,1.506,51,1.187,57,0.533,62,1.583,65,0.228,66,0.061,68,1.177,69,0.013,70,0.013,94,0.984,96,1.583,97,2.689,98,1.506,113,2.191,114,2.579,132,2.307,133,1.068,135,2.307,170,1.316,210,2.065,225,2.065,230,2.499,261,1.984,271,1.368,315,2.113,317,1.951,320,1.591,514,2.432,515,2.307,552,2.887,594,3.843,688,0.984,716,2.499,748,2.689,752,4.296,763,4.118,764,3.541,780,3.075,782,2.335,808,2.918,815,3.959,825,2.918,826,2.918,833,4.296,838,1.639,839,2.192,845,3.43,847,4.22,848,5.015,850,4.296,862,3.205,864,2.335,868,2.689,869,3.205,872,2.918,874,2.689,875,2.872,881,3.589,882,4.726,883,3.589,905,5.099,1119,2.499,1253,3.541,1270,3.205,1271,3.205,1285,4.871,1294,3.589,1295,5.616,1296,5.494,1297,5.494,1298,6.528,1299,5.494,1300,4.726,1301,3.589,1302,4.173,1303,5.494,1304,4.173,1305,5.494,1306,5.494,1307,3.589,1308,3.589,1309,4.22,1310,4.173,1311,4.173,1312,2.918,1313,3.589,1314,4.173,1315,4.173,1316,3.589,1317,2.918,1318,3.589,1319,4.173,1320,4.173,1321,3.589]],["title/classes/LoginDto.html",[66,0.042,758,2.428]],["body/classes/LoginDto.html",[1,3.076,3,0.27,4,0.242,5,0.242,7,0.388,8,0.969,19,1.976,21,0.591,22,0.019,23,1.153,24,1.584,29,1.075,57,0.443,65,0.27,66,0.074,69,0.014,70,0.014,170,1.489,250,1.404,279,2.917,331,1.782,405,2.32,410,1.543,548,2.568,549,3.942,550,2.86,554,3.098,562,4.859,573,2.86,582,4.278,585,3.108,587,3.18,588,2.955,589,2.593,590,3.18,669,3.98,731,4.418,758,4.284,941,4.284,1091,4.245,1322,4.245,1323,4.934,1324,4.934,1325,4.934,1326,4.934,1327,4.934,1328,4.934,1329,4.934,1330,4.934]],["title/entities/Order.html",[0,1.503,164,1.023]],["body/entities/Order.html",[0,1.474,2,1.942,3,0.202,4,0.181,5,0.181,7,0.291,8,0.803,11,2.191,12,1.723,18,3.459,19,1.768,20,3.644,21,0.649,22,0.019,23,1.151,24,1.91,25,4.519,29,1.297,32,1.943,33,4.041,35,3.264,38,2.244,42,5.032,43,1.988,49,4.041,51,1.768,52,2.839,55,3.542,57,0.451,58,2.213,59,4.259,60,3.89,61,3.89,62,1.402,65,0.202,66,0.041,68,0.792,69,0.012,70,0.012,137,1.266,139,2.357,140,4.196,154,2.244,158,1.402,164,1.569,212,4.438,244,2.585,367,2.357,368,2.426,371,1.742,704,2.507,897,5.527,921,4.041,937,2.382,949,3.076,1331,3.18,1332,5.777,1333,5.777,1334,4.97,1335,5.777,1336,5.346,1337,3.696,1338,3.696,1339,5.346,1340,3.696,1341,3.696,1342,3.144,1343,2.839,1344,5.064,1345,5.064,1346,3.696,1347,3.696,1348,3.696,1349,3.696,1350,4.774,1351,4.774,1352,4.774,1353,3.696,1354,3.696,1355,3.696,1356,3.696,1357,3.696,1358,3.696,1359,3.696,1360,3.89,1361,2.839,1362,2.069,1363,2.839,1364,3.696,1365,3.696,1366,3.696,1367,3.696,1368,3.18]],["title/entities/OrderItem.html",[0,1.503,1342,1.762]],["body/entities/OrderItem.html",[0,1.768,2,2.329,3,0.242,4,0.217,5,0.217,7,0.349,8,0.906,12,1.886,21,0.644,22,0.019,23,1.122,24,1.891,25,4.457,29,1.283,35,3.683,52,3.405,55,4.673,57,0.458,58,2.654,59,4.24,60,4.859,61,4.859,62,1.681,65,0.242,66,0.049,68,1.225,69,0.014,70,0.014,137,1.376,164,2.002,292,4.141,333,2.362,367,2.534,376,3.131,382,2.656,692,2.8,949,3.307,1342,2.672,1350,5.132,1351,5.132,1352,5.132,1369,6.343,1370,3.813,1371,6.915,1372,4.433,1373,4.433,1374,4.433,1375,4.433,1376,4.433,1377,4.433,1378,4.433,1379,4.433,1380,4.916,1381,4.433,1382,4.433,1383,4.433,1384,3.405,1385,4.433,1386,3.813]],["title/classes/OrderItemDto.html",[66,0.042,923,2.635]],["body/classes/OrderItemDto.html",[3,0.222,4,0.199,5,0.199,7,0.32,8,0.856,12,1.61,21,0.6,22,0.019,23,1.135,24,1.674,29,1.136,39,2.189,43,1.103,57,0.44,65,0.295,66,0.072,69,0.013,70,0.013,133,1.256,137,1.05,152,2.903,154,1.467,164,1.915,170,1.512,250,1.156,279,3.1,292,4.027,331,1.467,333,2.118,368,2.267,382,2.962,384,3.022,395,1.857,404,2.577,405,2.551,406,3.233,410,1.27,412,2.011,573,3.021,583,4.147,585,3.35,602,2.619,918,2.619,919,5.166,920,2.842,921,3.776,922,3.496,923,4.703,927,3.122,928,2.842,929,3.496,930,2.433,931,3.496,932,3.496,933,3.496,934,3.48,936,3.496,937,2.619,938,4.644,941,3.48,942,3.776,943,4.147,944,5.557,945,5.557,946,5.557,947,5.557,948,4.644,949,3.001,950,5.557,951,6.069,952,4.518,953,4.963,954,4.657,955,6.069,956,4.657,957,4.657,958,3.496,959,3.122,960,3.122,961,2.842,962,2.842,963,3.496,964,3.496,1387,4.064,1388,4.064,1389,4.064,1390,4.064,1391,4.064,1392,4.064]],["title/modules/OrdersModule.html",[71,1.503,82,2.256]],["body/modules/OrdersModule.html",[1,2.715,3,0.271,4,0.243,5,0.243,22,0.019,51,1.745,57,0.549,65,0.271,66,0.055,69,0.015,70,0.015,71,2.656,73,2.454,74,2.454,75,2.774,76,2.774,77,2.454,78,3.727,79,3.727,82,4.557,83,4.077,84,4.077,85,3.432,86,2.774,87,2.194,93,3.673,94,1.169,95,2.968,96,1.88,102,3.808,164,1.346,233,4.927,333,2.011,718,4.264,1342,2.868,1361,3.808,1362,2.774,1384,3.808,1393,4.264,1394,4.957,1395,4.264,1396,4.264,1397,4.957,1398,4.957,1399,4.264,1400,4.264,1401,4.264,1402,4.957]],["title/interfaces/PaginatedResponse.html",[688,0.888,698,1.98]],["body/interfaces/PaginatedResponse.html",[3,0.267,4,0.239,5,0.239,7,0.384,8,0.963,21,0.638,22,0.019,65,0.332,69,0.014,70,0.014,125,3.274,137,1.483,138,1.948,151,2.84,170,1.302,368,2.99,369,2.733,396,3.192,548,3.048,606,3.008,688,1.711,689,3.741,691,3.961,692,2.928,693,3.147,694,2.733,697,4.263,698,3.476,699,3.147,700,3.147,701,3.147,702,3.147,703,4.264,704,3.008,705,3.874,1093,2.283,1403,3.751,1404,3.751]],["title/interfaces/PaginatedResponse-1.html",[395,1.084,688,0.743,698,1.656]],["body/interfaces/PaginatedResponse-1.html",[3,0.184,4,0.165,5,0.165,7,0.265,8,0.751,11,1.275,19,1.62,21,0.64,22,0.019,23,1.104,32,1.865,37,2.386,38,2.271,51,1.349,57,0.432,65,0.3,66,0.066,69,0.013,70,0.011,125,2.719,133,0.654,137,1.47,138,1.891,139,2.083,143,1.664,144,2.013,145,2.347,146,2.432,149,2.347,151,2.847,154,1.983,164,0.913,170,1.585,241,2.473,242,2.013,250,0.957,334,1.881,336,1.341,349,4.871,355,2.491,367,2.083,368,2.997,369,3.074,392,3.316,395,1.889,396,3.305,401,2.013,404,2.897,405,2.263,407,3.074,408,1.664,409,1.572,410,1.051,412,1.664,414,4.065,424,3.056,451,2.167,546,2.167,548,2.306,549,2.167,550,1.572,552,1.766,554,2.306,555,2.491,556,2.167,558,2.491,571,2.351,576,2.217,587,2.167,588,2.013,589,1.766,590,2.167,591,2.351,599,2.491,606,2.953,656,3.642,657,2.582,658,2.582,659,2.582,660,2.582,661,3.289,662,3.642,669,2.839,678,3.642,685,4.054,686,3.54,687,2.351,688,1.615,689,3.429,690,2.582,691,3.572,692,2.641,693,2.167,694,1.881,695,2.217,696,2.351,697,3.54,698,2.886,699,2.167,700,2.167,701,2.167,702,2.167,703,3.766,704,2.347,705,3.338,706,2.582,707,3.642,708,2.013,1093,1.572]],["title/interfaces/PaginationMeta.html",[688,0.888,689,1.98]],["body/interfaces/PaginationMeta.html",[3,0.259,4,0.232,5,0.232,7,0.373,8,0.945,21,0.643,22,0.019,65,0.326,69,0.014,70,0.014,125,2.953,137,1.519,138,2.732,151,2.977,170,1.278,368,3.025,369,3.338,396,3.134,548,2.505,606,2.953,688,1.699,689,3.599,691,3.908,692,3.275,693,3.845,694,3.833,697,3.845,698,3.134,699,3.056,700,3.056,701,3.056,702,3.056,703,3.908,704,2.347,705,2.654,1093,2.217,1403,3.642,1404,3.642]],["title/interfaces/PaginationMeta-1.html",[395,1.084,688,0.743,689,1.656]],["body/interfaces/PaginationMeta-1.html",[3,0.177,4,0.159,5,0.159,7,0.256,8,0.733,11,1.232,19,1.595,21,0.643,22,0.019,23,1.124,32,1.836,37,2.355,38,2.242,51,1.317,57,0.426,65,0.295,66,0.065,69,0.013,70,0.011,125,2.29,133,1.142,137,1.498,138,2.476,139,2.044,143,1.608,144,1.945,145,2.29,146,2.386,149,2.29,151,2.92,154,1.946,164,0.882,170,1.578,241,2.451,242,1.945,250,0.924,334,1.818,336,1.296,349,4.832,355,2.431,367,2.044,368,2.901,369,3.287,392,3.236,395,1.854,396,3.391,401,1.945,404,2.88,405,2.228,407,3.017,408,1.608,409,1.519,410,1.015,412,1.608,414,4.041,424,2.982,451,2.094,546,2.094,548,1.943,549,2.094,550,1.519,552,1.707,554,2.263,555,2.431,556,2.094,558,2.431,571,2.272,576,2.164,587,2.094,588,1.945,589,1.707,590,2.094,591,2.272,599,2.431,606,3.073,656,3.555,657,2.495,658,2.495,659,2.495,660,2.495,661,3.228,662,3.555,669,2.771,678,3.555,685,4.002,686,3.474,687,2.272,688,1.601,689,3.262,690,2.495,691,3.517,692,3.058,693,2.982,694,3.287,695,3.018,696,3.236,697,2.982,698,2.431,699,2.094,700,2.094,701,2.094,702,2.094,703,3.228,704,1.608,705,1.818,706,2.495,707,3.555,708,1.945,1093,1.519]],["title/entities/Product.html",[0,1.503,333,1.235]],["body/entities/Product.html",[0,1.873,2,1.097,3,0.114,4,0.102,5,0.102,7,0.164,8,0.525,11,1.564,12,1.23,18,2.469,21,0.657,22,0.019,23,1.122,24,1.87,27,3.607,28,1.928,29,1.269,32,1.854,33,2.319,35,1.346,37,2.785,38,2.74,39,2.346,41,4.991,42,4.979,43,1.982,49,2.319,57,0.299,58,1.251,59,4.214,62,0.792,65,0.181,66,0.037,68,1.225,69,0.008,70,0.008,133,0.645,137,1.384,154,2.063,158,2.068,170,1.578,194,2.852,202,2.691,218,1.461,250,0.594,320,0.859,333,2.504,335,3.067,336,1.645,337,2.308,338,2.308,339,2.308,340,2.308,352,3.051,355,1.742,358,1.856,359,2.137,361,2.137,363,2.137,365,2.137,367,1.781,371,2.235,376,2.828,379,3.934,381,1.641,382,1.392,416,2.308,444,1.797,471,4.033,550,1.55,552,1.097,573,3.361,576,1.55,585,3.375,612,3.55,691,1.985,704,2.698,754,1.461,949,2.698,952,2.319,967,3.168,968,3.934,971,3.934,973,3.934,974,3.934,978,2.547,979,2.547,993,4.188,1030,2.137,1187,2.319,1288,2.852,1336,4.039,1339,2.852,1342,2.549,1343,1.604,1350,4.906,1351,4.188,1352,4.188,1360,2.547,1362,1.169,1380,4.689,1405,1.604,1406,3.316,1407,3.316,1408,3.316,1409,3.316,1410,3.316,1411,3.316,1412,3.547,1413,4.406,1414,4.123,1415,4.123,1416,4.123,1417,5.929,1418,4.123,1419,2.088,1420,2.088,1421,2.088,1422,2.088,1423,3.316,1424,2.088,1425,2.088,1426,2.088,1427,2.088,1428,2.088,1429,2.852,1430,4.123,1431,2.088,1432,2.547,1433,2.852,1434,2.088,1435,2.088,1436,2.852,1437,2.088,1438,2.088,1439,3.316,1440,2.088,1441,4.695,1442,2.088,1443,2.088,1444,2.088,1445,2.088,1446,2.088,1447,2.088,1448,2.088,1449,3.316,1450,2.088,1451,2.088,1452,2.088,1453,2.852,1454,4.695,1455,2.088,1456,3.316,1457,5.451,1458,2.088,1459,2.088,1460,3.316,1461,3.316,1462,2.088,1463,2.088,1464,2.088,1465,2.088,1466,3.316,1467,3.316,1468,2.088,1469,1.461,1470,2.852,1471,2.852,1472,2.852,1473,2.852,1474,2.852,1475,2.852,1476,2.852,1477,2.852,1478,2.852,1479,2.852,1480,2.852,1481,2.088,1482,2.088,1483,2.088,1484,2.088,1485,2.088,1486,3.316]],["title/interfaces/ProductPerformanceRow.html",[688,0.888,1487,2.635]],["body/interfaces/ProductPerformanceRow.html",[3,0.144,4,0.129,5,0.129,7,0.208,8,0.631,11,1.509,12,1.911,21,0.53,22,0.019,23,1.089,32,1.244,43,1.299,57,0.475,62,1.003,65,0.144,66,0.029,68,1.431,69,0.009,70,0.009,94,0.623,96,1.003,114,2.886,116,1.583,129,2.783,137,1.336,138,1.055,141,3.358,142,3.585,143,1.309,146,2.357,151,1.055,158,2.486,161,1.583,164,1.446,195,3.994,202,3.564,225,1.309,231,1.704,261,1.728,271,2.224,281,3.347,292,3.188,293,2.031,315,2.469,317,3.395,320,0.685,330,2.383,333,2.412,335,3.419,336,2.123,337,3.196,338,3.196,339,2.98,340,3.196,341,3.057,342,3.057,343,3.057,344,4.09,345,3.676,346,3.676,347,1.704,352,2.227,358,1.48,367,2.276,371,1.646,376,2.826,381,2.826,382,2.398,395,1.369,413,1.583,416,1.48,437,2.031,438,2.383,450,3.724,453,2.383,458,2.031,488,1.583,489,3.188,504,1.389,507,3.057,511,1.583,514,1.171,515,2.009,548,1.671,605,3.564,688,0.623,692,2.756,838,1.187,845,2.797,864,1.48,875,1.236,1093,1.236,1097,1.704,1099,3.084,1102,1.704,1103,1.704,1109,1.583,1110,1.849,1113,1.704,1114,1.704,1139,3.431,1142,3.347,1159,2.783,1169,1.849,1197,2.565,1208,1.849,1220,1.849,1342,1.236,1362,1.48,1469,1.849,1487,3.347,1488,2.031,1489,4.912,1490,4.912,1491,3.423,1492,2.031,1493,2.031,1494,2.031,1495,2.031,1496,2.031,1497,2.031,1498,2.275,1499,4.116,1500,2.275,1501,2.275,1502,2.275,1503,2.275,1504,2.275,1505,2.275,1506,2.275,1507,2.275,1508,2.275,1509,3.423,1510,2.275,1511,2.275,1512,2.275,1513,2.275,1514,2.031,1515,2.031,1516,2.275,1517,2.275,1518,2.275,1519,5.161,1520,2.275,1521,2.275,1522,2.275,1523,2.275,1524,2.275,1525,4.116,1526,2.275,1527,2.275,1528,2.275,1529,2.275,1530,3.676,1531,3.676,1532,3.423,1533,2.275,1534,4.116,1535,3.423,1536,3.423,1537,3.423,1538,4.58,1539,3.423,1540,3.057,1541,3.423,1542,3.423,1543,4.116,1544,2.275,1545,3.423,1546,2.275,1547,2.275,1548,2.275,1549,2.275,1550,2.275,1551,2.275,1552,2.275,1553,3.057,1554,2.275,1555,2.031,1556,2.275,1557,2.275,1558,2.275,1559,3.423,1560,2.275,1561,2.031,1562,2.275,1563,2.275,1564,2.275]],["title/modules/ProductsModule.html",[71,1.503,83,2.109]],["body/modules/ProductsModule.html",[3,0.289,4,0.259,5,0.259,22,0.019,57,0.536,65,0.289,66,0.059,69,0.015,70,0.015,71,2.732,73,2.616,74,2.616,75,2.958,76,2.958,77,2.616,78,3.834,79,3.834,83,4.188,85,3.57,86,2.958,87,2.34,93,3.165,94,1.246,95,3.819,96,2.005,164,1.732,333,1.733,413,3.165,504,4.049,1109,3.165,1342,2.983,1362,2.958,1469,3.697,1565,4.547,1566,4.547,1567,4.547,1568,5.285,1569,5.285,1570,5.285]],["title/injectables/ProductsService.html",[504,1.98,838,1.124]],["body/injectables/ProductsService.html",[3,0.128,4,0.114,5,0.114,7,0.184,11,1.372,12,1.886,21,0.538,22,0.019,23,1.085,29,1.204,32,1.786,43,1.203,57,0.458,62,0.885,65,0.128,66,0.026,68,1.495,69,0.009,70,0.009,94,0.55,96,0.885,113,1.443,114,3.172,116,2.653,117,2.531,129,2.531,132,2.655,133,1.229,135,2.842,137,1.111,138,0.931,141,3.335,142,3.616,143,1.156,146,2.21,151,0.931,158,2.398,160,2.78,161,2.167,164,1.355,195,2.531,202,3.322,210,1.156,215,2.025,225,1.156,231,1.505,261,1.6,271,2.157,281,3.099,292,2.989,293,1.793,315,2.418,317,3.331,320,0.605,330,2.989,333,2.287,335,3.234,336,1.991,337,3.023,338,3.023,339,2.793,340,3.023,341,2.78,342,2.78,343,2.78,344,3.834,345,3.404,346,3.404,347,1.505,352,2.793,358,1.306,367,2.167,371,1.524,376,1.791,381,1.791,382,1.519,395,1.245,413,1.398,416,2.48,429,2.167,430,3.113,431,3.113,436,3.113,437,2.78,438,3.234,449,1.505,450,3.491,453,2.653,458,2.78,488,2.167,489,3.688,494,2.008,504,1.901,507,2.78,511,1.398,514,1.602,515,1.86,548,1.519,605,3.819,688,0.55,692,2.21,838,1.079,839,1.227,845,3.395,864,1.306,875,1.092,1097,1.505,1099,2.856,1102,1.505,1103,1.505,1109,1.398,1110,1.633,1113,1.505,1114,2.856,1139,3.217,1142,3.099,1159,2.531,1169,1.633,1197,2.332,1208,1.633,1220,1.633,1342,1.092,1362,1.306,1469,1.633,1487,2.531,1488,1.793,1489,3.113,1490,3.113,1491,3.113,1492,1.793,1493,1.793,1494,1.793,1495,2.78,1496,1.793,1497,3.404,1498,2.008,1499,3.811,1500,2.008,1501,2.008,1502,2.008,1503,2.008,1504,2.008,1505,2.008,1506,2.008,1507,2.008,1508,2.008,1509,3.113,1510,2.008,1511,2.008,1512,2.008,1513,2.008,1514,1.793,1515,1.793,1516,2.008,1517,2.008,1518,4.293,1519,4.915,1520,4.293,1521,4.293,1522,4.293,1523,3.113,1524,3.113,1525,3.811,1526,2.008,1527,2.008,1528,2.008,1529,2.008,1530,3.404,1531,3.404,1532,3.113,1533,2.008,1534,3.811,1535,3.113,1536,3.113,1537,3.113,1538,4.293,1539,3.113,1540,2.78,1541,3.113,1542,3.113,1543,3.811,1544,2.008,1545,3.113,1546,2.008,1547,2.008,1548,2.008,1549,2.008,1550,2.008,1551,2.008,1552,2.008,1553,2.78,1554,4.293,1555,1.793,1556,2.008,1557,2.008,1558,2.008,1559,3.113,1560,2.008,1561,1.793,1562,2.008,1563,2.008,1564,2.008,1571,3.618,1572,2.334,1573,2.334,1574,2.334,1575,2.334,1576,2.334,1577,2.334,1578,2.334,1579,2.334,1580,2.334,1581,2.334,1582,2.334,1583,2.334,1584,2.334,1585,2.334,1586,2.334]],["title/injectables/RefreshTokenGuard.html",[838,1.124,1587,2.894]],["body/injectables/RefreshTokenGuard.html",[3,0.318,4,0.284,5,0.284,22,0.018,57,0.489,65,0.318,66,0.064,69,0.016,70,0.016,94,1.37,756,4.719,781,4.464,782,3.252,838,2.012,839,3.053,1253,4.348,1254,5.804,1587,5.183,1588,4.999,1589,4.999]],["title/injectables/RefreshTokenStrategy.html",[816,2.428,838,1.124]],["body/injectables/RefreshTokenStrategy.html",[3,0.264,4,0.237,5,0.237,7,0.38,21,0.514,22,0.019,29,1.158,43,1.312,57,0.525,65,0.264,66,0.054,68,1.294,69,0.014,70,0.014,94,1.139,113,2.408,132,2.535,133,1.174,135,2.029,255,2.704,261,1.745,271,1.979,315,2.076,320,1.252,514,2.673,515,2.029,716,2.894,748,3.115,756,4.222,763,3.685,773,5.193,780,3.973,782,2.704,809,4.222,816,3.891,825,3.38,826,3.38,833,4.605,838,1.8,839,2.539,847,4.637,848,5.298,869,3.712,875,2.26,905,4.823,1253,3.891,1271,3.712,1295,5.664,1300,5.193,1301,4.157,1307,5.664,1308,4.157,1309,3.712,1316,4.157,1317,3.38,1318,4.157,1321,4.157,1590,5.664,1591,4.157,1592,4.832,1593,6.037,1594,4.832,1595,4.832,1596,4.832,1597,4.832,1598,4.832,1599,4.832,1600,4.832]],["title/entities/Roles.html",[0,1.503,98,1.36]],["body/entities/Roles.html",[0,2.524,2,2.742,3,0.285,4,0.255,5,0.255,7,0.411,8,1.003,12,2.032,19,1.718,21,0.603,22,0.019,24,1.765,25,3.363,29,1.198,43,1.718,51,2.124,57,0.494,58,4.079,59,3.79,62,1.979,65,0.285,66,0.058,68,1.46,69,0.015,70,0.015,97,3.363,98,2.285,137,1.23,154,2.557,241,2.62,1107,4.008,1147,4.427,1432,4.862,1601,4.489,1602,5.218,1603,5.218,1604,4.489,1605,5.218,1606,5.444]],["title/guards/RolesGuard.html",[238,1.98,1250,2.635]],["body/guards/RolesGuard.html",[3,0.257,4,0.23,5,0.23,7,0.37,19,1.912,21,0.505,22,0.019,29,1.044,37,2.252,43,1.612,51,1.339,57,0.472,65,0.324,66,0.052,68,1.273,69,0.014,70,0.014,94,1.11,98,2.597,113,2.368,132,2.493,133,1.154,135,1.977,152,2.732,238,3.12,241,1.699,242,2.819,260,3.292,271,1.947,315,2.422,320,1.538,371,2.042,514,2.084,769,3.616,838,1.771,875,2.777,909,4.049,1147,3.292,1255,5.877,1258,6.187,1260,5.108,1261,5.248,1263,4.049,1267,3.616,1272,3.292,1277,4.049,1278,4.049,1312,3.292,1607,4.707,1608,3.616,1609,4.707,1610,4.707,1611,4.707,1612,5.938,1613,3.616,1614,5.938,1615,4.707,1616,4.707,1617,4.049,1618,4.707,1619,4.707,1620,4.707,1621,4.707,1622,4.707,1623,4.707,1624,4.707,1625,4.707,1626,4.707,1627,5.938,1628,4.707,1629,4.707,1630,4.707,1631,4.707,1632,4.707,1633,4.707]],["title/interfaces/SalesReportRow.html",[688,0.888,1634,2.894]],["body/interfaces/SalesReportRow.html",[1,0.897,3,0.111,4,0.099,5,0.099,7,0.159,8,0.513,11,1.913,12,1.803,19,0.878,20,1.133,21,0.527,22,0.019,23,1.109,28,2.515,32,2.189,38,0.731,45,2.485,51,0.576,57,0.492,62,0.768,65,0.111,66,0.022,68,1.381,69,0.008,70,0.008,94,0.477,96,0.768,113,0.808,114,2.37,129,2.263,137,1.305,139,2.141,140,1.305,141,3.01,142,2.823,145,1.002,146,1.432,148,3.638,149,1.002,164,2.008,168,1.556,169,2.085,174,3.104,176,4.339,185,4.219,195,2.826,197,1.002,198,1.742,201,1.742,202,1.064,205,2.085,208,2.263,212,3.104,225,1.002,233,1.305,244,1.416,251,1.305,252,1.305,253,1.305,254,1.213,261,2.038,271,1.982,280,3.762,281,3.528,286,1.556,315,2.598,316,1.742,317,2.899,320,1.307,333,2.076,367,0.768,368,1.358,369,3.01,370,1.556,371,2.472,372,1.742,376,2.662,381,1.002,382,2.258,395,1.735,429,1.213,450,1.416,456,2.783,504,2.123,505,1.742,514,0.897,515,2.538,548,1.358,554,2.37,566,1.305,576,0.947,605,1.7,612,1.213,627,2.123,688,0.477,692,2.853,743,2.783,838,0.965,845,2.826,864,1.133,868,1.305,874,2.085,875,0.947,911,1.742,918,2.085,930,1.213,949,1.601,953,5.156,975,1.556,1063,2.783,1064,3.476,1065,3.476,1093,0.947,1097,1.305,1099,2.604,1102,1.305,1103,1.305,1108,1.556,1113,1.305,1114,1.305,1174,2.485,1175,1.556,1176,1.416,1187,2.263,1188,1.556,1192,1.556,1193,1.556,1195,1.556,1196,2.485,1197,2.085,1202,1.416,1213,1.556,1228,1.556,1229,3.638,1230,1.556,1231,1.556,1232,1.556,1233,1.556,1235,1.556,1236,2.263,1237,1.556,1239,3.104,1242,1.556,1244,2.485,1245,3.544,1272,1.416,1342,0.947,1361,1.556,1362,1.133,1363,1.556,1384,1.556,1386,2.783,1399,1.742,1400,1.742,1401,1.742,1453,1.742,1492,1.556,1493,1.556,1494,1.556,1495,1.556,1496,1.556,1497,1.556,1514,1.556,1515,1.556,1530,1.556,1531,1.556,1540,2.485,1553,1.556,1555,1.556,1561,2.485,1634,3.544,1635,1.742,1636,5.378,1637,3.235,1638,1.416,1639,2.025,1640,1.742,1641,2.783,1642,2.025,1643,2.025,1644,2.025,1645,2.025,1646,2.025,1647,2.025,1648,2.025,1649,3.235,1650,4.04,1651,3.235,1652,2.025,1653,3.235,1654,2.025,1655,2.025,1656,4.614,1657,3.235,1658,2.025,1659,3.235,1660,3.235,1661,3.235,1662,3.235,1663,3.235,1664,2.025,1665,2.025,1666,3.235,1667,2.025,1668,3.235,1669,3.235,1670,3.235,1671,3.235,1672,2.025,1673,2.025,1674,2.025,1675,2.025,1676,2.025,1677,2.025,1678,2.025,1679,4.04,1680,2.025,1681,2.025,1682,2.025,1683,2.025,1684,2.025,1685,2.025,1686,4.04,1687,4.04,1688,2.025,1689,2.025,1690,2.025,1691,2.025,1692,2.025,1693,2.025,1694,2.025,1695,2.025,1696,2.025,1697,2.025,1698,2.025,1699,2.025,1700,2.025,1701,2.025,1702,2.025,1703,2.025,1704,2.025,1705,2.025,1706,2.025,1707,2.025,1708,2.025,1709,2.025,1710,2.025,1711,2.025,1712,2.025,1713,2.025,1714,2.025,1715,2.025,1716,2.025,1717,3.235,1718,3.235,1719,4.614,1720,3.235,1721,3.235,1722,2.025,1723,3.235,1724,2.025,1725,3.235,1726,2.025,1727,2.025,1728,2.025,1729,3.235,1730,2.025,1731,2.025,1732,2.025,1733,5.378,1734,2.025,1735,5.044,1736,2.025,1737,3.235,1738,3.235,1739,2.025,1740,2.025,1741,2.025,1742,2.025,1743,2.025,1744,2.025,1745,3.235,1746,3.235,1747,3.235,1748,4.614,1749,4.614,1750,3.235,1751,2.025,1752,2.025,1753,3.235,1754,3.235,1755,2.025,1756,3.235,1757,2.025,1758,2.025,1759,2.025,1760,2.025,1761,2.025,1762,2.025,1763,2.025,1764,2.025,1765,2.025,1766,2.025,1767,2.025,1768,2.025,1769,2.025,1770,2.025,1771,2.025,1772,2.025,1773,2.025,1774,3.235,1775,2.025,1776,2.025,1777,2.025,1778,3.235,1779,2.025,1780,3.235,1781,2.025,1782,2.025,1783,2.025,1784,2.025,1785,2.025]],["title/classes/UpdateOrderDto.html",[66,0.042,1638,2.635]],["body/classes/UpdateOrderDto.html",[3,0.26,4,0.233,5,0.233,7,0.374,8,0.947,21,0.556,22,0.018,23,0.947,24,1.693,29,1.149,39,2.36,57,0.474,65,0.26,66,0.066,69,0.014,70,0.014,133,1.402,137,1.162,139,2.68,140,4.553,152,3.028,154,2.158,158,1.804,164,2.01,170,1.401,244,3.326,250,1.353,279,3.028,320,1.548,331,1.717,371,2.055,384,3.345,404,2.735,405,2.267,406,3.579,408,2.354,409,2.223,410,1.487,421,3.065,573,3.056,585,3.206,920,3.326,921,4.941,927,4.591,934,3.065,1027,3.653,1334,5.622,1363,3.653,1368,5.141,1638,4.18,1786,5.898,1787,5.976,1788,5.976,1789,5.976,1790,4.755,1791,5.141,1792,5.976,1793,4.755,1794,4.755,1795,4.755,1796,4.755,1797,4.755]],["title/classes/UpdateProductDto.html",[66,0.042,489,2.256]],["body/classes/UpdateProductDto.html",[3,0.131,4,0.117,5,0.117,7,0.189,8,0.585,21,0.615,22,0.019,23,1.127,24,1.873,28,1.12,29,1.271,37,2.468,38,2.085,39,2.391,43,1.687,57,0.326,65,0.131,66,0.041,68,1.171,69,0.009,70,0.009,87,1.634,133,1.48,137,1.265,152,2.986,154,1.333,158,0.909,170,1.58,202,2.872,250,0.682,279,3.169,320,0.957,331,0.865,333,2.455,335,3.273,336,1.796,337,2.521,338,2.521,339,2.521,340,2.521,348,4.332,352,3.059,355,1.94,358,2.066,359,2.38,361,2.38,363,2.38,365,4.004,371,1.74,376,3.154,381,2.978,382,2.125,384,2.832,404,2.897,405,2.356,406,3.457,407,3.231,408,1.186,409,1.12,410,0.749,413,1.435,414,3.81,416,2.521,420,1.841,421,3.523,471,4.194,489,2.211,573,2.98,585,3.043,930,1.435,934,2.38,942,3.539,949,2.229,957,1.841,959,1.841,960,1.841,961,3.539,962,3.539,966,1.841,967,3.46,968,4.199,969,3.262,970,3.874,971,4.199,972,3.874,973,4.199,974,4.199,975,2.836,976,2.061,978,2.836,979,2.836,980,3.176,981,3.176,982,3.176,983,3.176,984,3.176,985,3.176,986,3.176,987,3.176,988,2.836,989,2.061,993,3.887,994,3.176,996,3.176,997,3.176,998,3.874,1001,3.176,1002,4.967,1007,2.836,1011,2.061,1015,4.353,1018,2.061,1020,2.061,1022,2.061,1027,3.46,1030,2.38,1031,2.061,1035,3.874,1036,3.176,1044,2.061,1049,2.061,1057,2.061,1058,2.061,1412,3.874,1413,3.874,1429,3.176,1436,3.176,1798,5.579,1799,3.692,1800,2.396,1801,2.396,1802,2.396,1803,4.504,1804,2.396,1805,3.692,1806,5.774,1807,4.353,1808,3.692,1809,5.466,1810,3.176,1811,3.692,1812,3.692,1813,3.692,1814,3.692,1815,3.692,1816,2.396,1817,2.396,1818,2.396,1819,2.396,1820,2.396,1821,3.692,1822,3.692,1823,2.396,1824,2.396,1825,2.396,1826,2.396,1827,2.396,1828,2.396,1829,2.396,1830,4.504,1831,2.396,1832,2.396,1833,3.692,1834,2.396,1835,4.504,1836,2.396,1837,2.396,1838,3.692,1839,2.396,1840,2.396,1841,2.396,1842,2.396,1843,2.061,1844,2.396,1845,2.396,1846,2.396,1847,2.396,1848,2.396,1849,2.396,1850,4.504,1851,2.396,1852,2.396,1853,2.396,1854,3.692,1855,3.692,1856,2.396,1857,2.396,1858,2.396,1859,2.396,1860,3.692]],["title/classes/UpdateStockDto.html",[66,0.042,495,2.635]],["body/classes/UpdateStockDto.html",[3,0.295,4,0.264,5,0.264,7,0.425,8,1.024,21,0.459,22,0.018,24,1.399,28,2.525,29,0.949,57,0.468,65,0.295,66,0.072,69,0.015,70,0.015,137,1.256,170,1.157,250,1.536,279,2.713,320,1.674,331,1.949,333,2.118,371,2.222,381,3.546,382,3.008,384,3.616,408,2.672,410,1.688,416,3.869,421,3.48,495,4.518,535,5.557,573,2.525,585,3.021,686,4.164,695,3.021,1798,4.963,1861,4.644,1862,5.399,1863,5.399]],["title/classes/UpdateUserDto.html",[66,0.042,645,2.256]],["body/classes/UpdateUserDto.html",[3,0.313,4,0.28,5,0.28,22,0.018,57,0.513,65,0.313,66,0.074,69,0.016,70,0.016,250,1.628,331,2.065,404,2.281,405,2.17,409,2.675,410,1.788,429,3.425,547,4.001,582,4.001,630,4.001,645,4.003,685,3.687,1059,3.425,1087,4.921,1253,4.308,1864,4.921,1865,6.685,1866,5.72]],["title/classes/UserQueryDto.html",[66,0.042,1104,2.428]],["body/classes/UserQueryDto.html",[3,0.257,4,0.23,5,0.23,7,0.37,8,0.941,21,0.599,22,0.019,23,1.083,24,1.825,29,1.239,38,2.466,57,0.43,65,0.257,66,0.066,69,0.014,70,0.014,133,1.154,137,1.398,138,2.809,151,2.809,197,3.381,331,1.699,334,2.634,347,4.193,367,2.252,391,5.108,395,2.474,404,2.868,405,2.467,408,2.33,409,2.201,410,1.472,417,4.562,424,3.827,426,4.049,661,3.895,686,4.193,695,3.194,1104,3.827,1132,4.997,1133,4.997,1867,6.187,1868,5.938,1869,6.831,1870,6.831,1871,4.707,1872,5.938,1873,4.707,1874,4.707,1875,4.707,1876,4.707,1877,4.707,1878,4.049,1879,4.707]],["title/entities/Users.html",[0,1.503,51,1.072]],["body/entities/Users.html",[0,1.892,1,3.033,2,1.768,3,0.184,4,0.165,5,0.165,7,0.265,8,0.752,11,2.084,12,1.639,18,3.291,19,1.288,21,0.653,22,0.019,23,1.172,24,1.934,25,4.601,26,6.293,27,5.619,29,1.313,32,2.142,33,3.844,35,3.058,37,2.733,38,2.474,39,2.357,41,5.619,42,4.993,43,2.009,49,3.844,51,1.35,57,0.433,58,2.015,59,4.35,62,1.276,65,0.184,66,0.037,69,0.011,70,0.011,98,2.422,133,1.16,148,3.542,164,1.773,241,1.713,336,2.192,553,4.222,554,2.642,555,2.887,556,3.542,557,4.728,558,2.887,559,3.542,708,3.291,731,3.291,809,3.844,897,3.645,1061,3.844,1129,3.645,1291,3.319,1343,3.645,1360,4.222,1432,4.584,1604,2.895,1606,4.082,1880,2.895,1881,5.496,1882,4.745,1883,3.365,1884,3.365,1885,3.365,1886,3.365,1887,4.745,1888,3.365,1889,3.365,1890,3.365,1891,3.365,1892,3.365,1893,3.365,1894,3.365,1895,3.365,1896,4.745,1897,3.365,1898,3.365,1899,3.365,1900,3.365,1901,3.365,1902,3.365,1903,3.365,1904,3.365,1905,4.745,1906,3.365,1907,3.365,1908,3.365,1909,3.365]],["title/modules/UsersModule.html",[71,1.503,84,2.109]],["body/modules/UsersModule.html",[1,2.813,3,0.287,4,0.257,5,0.257,22,0.019,51,1.494,57,0.542,65,0.287,66,0.058,69,0.015,70,0.015,71,2.725,73,2.599,74,2.599,75,2.939,76,2.939,77,2.599,78,3.823,79,3.823,84,4.183,85,3.556,86,2.939,87,2.325,93,3.145,94,1.238,95,3.145,96,1.992,98,2.294,107,4.034,164,1.725,627,4.046,1101,4.034,1106,4.034,1109,3.145,1910,4.518,1911,4.518,1912,4.518,1913,5.252,1914,5.252,1915,5.252]],["title/injectables/UsersService.html",[627,1.98,838,1.124]],["body/injectables/UsersService.html",[3,0.101,4,0.09,5,0.09,7,0.145,11,2.147,12,2.037,19,1.839,20,1.678,21,0.524,22,0.019,23,1.149,28,2.248,29,1.123,32,2.077,37,1.438,51,1.466,57,0.47,62,0.699,65,0.101,66,0.02,68,1.452,69,0.007,70,0.007,94,0.434,96,0.699,98,1.577,113,1.196,114,3.055,116,1.795,117,2.097,132,2.586,133,1.197,135,2.637,137,1.002,138,2.055,141,2.121,142,2.883,143,1.484,144,1.103,145,1.876,146,1.934,148,2.443,151,1.742,158,1.137,161,1.795,164,1.029,185,1.932,205,1.188,208,2.097,210,0.912,215,2.883,225,2.688,241,2.341,251,1.188,252,1.188,253,1.188,254,1.103,261,1.368,271,2.125,280,2.097,315,2.569,317,3.298,320,1.655,336,2.258,367,2.147,368,1.259,371,2.23,395,1.772,429,2.27,449,1.932,453,1.795,488,1.795,511,1.795,514,1.327,515,2.163,545,2.615,554,2.163,555,1.575,558,1.575,559,2.815,566,1.932,576,1.772,597,2.579,599,2.295,602,1.188,605,3.589,610,2.303,617,3.355,627,1.575,630,2.651,645,1.103,661,3.505,688,0.434,692,2.664,694,1.031,705,1.031,708,1.103,731,3.252,838,0.894,839,0.968,844,1.585,845,3.161,850,2.097,863,1.415,864,1.031,865,2.097,868,1.188,871,1.932,872,3.055,874,1.932,875,2.813,880,1.415,885,3.355,891,1.932,892,1.932,906,1.415,907,2.303,930,1.103,949,0.912,969,2.443,1059,3.252,1061,3.362,1084,2.303,1092,2.097,1094,1.415,1095,2.579,1096,2.579,1097,2.443,1098,1.289,1099,2.443,1100,1.585,1101,1.415,1102,1.188,1103,1.188,1104,3.321,1105,1.585,1106,1.415,1107,1.415,1108,1.415,1109,1.103,1110,2.097,1111,1.585,1112,3.261,1113,1.188,1114,2.443,1115,2.579,1116,2.579,1117,1.585,1118,1.585,1119,1.103,1120,2.579,1121,1.585,1122,3.261,1123,3.261,1124,1.585,1125,1.585,1126,1.585,1127,1.585,1128,1.585,1129,1.415,1130,1.585,1131,2.579,1132,2.303,1133,1.415,1134,2.579,1135,3.757,1136,1.585,1137,1.585,1138,1.585,1139,1.188,1140,1.585,1141,1.585,1142,2.651,1143,1.585,1144,3.261,1145,4.432,1146,2.579,1147,2.097,1148,2.579,1149,1.585,1150,2.579,1151,3.757,1152,2.579,1153,1.585,1154,1.585,1155,2.579,1156,1.585,1157,1.585,1158,2.579,1159,2.651,1160,2.579,1161,1.585,1162,1.585,1163,1.585,1164,1.585,1165,1.585,1166,1.585,1167,1.585,1168,1.585,1169,1.289,1170,1.585,1171,1.585,1172,3.757,1173,1.415,1174,1.415,1175,1.415,1176,1.289,1177,1.585,1178,1.585,1179,2.579,1180,1.585,1181,2.579,1182,4.432,1183,2.579,1184,3.757,1185,1.585,1186,2.579,1187,1.289,1188,2.303,1189,1.585,1190,1.585,1191,1.585,1192,2.303,1193,1.415,1194,3.757,1195,2.303,1196,2.303,1197,1.932,1198,1.585,1199,1.585,1200,2.579,1201,1.585,1202,1.289,1203,2.579,1204,2.579,1205,2.579,1206,1.585,1207,1.585,1208,1.289,1209,1.585,1210,1.585,1211,2.579,1212,1.585,1213,1.415,1214,1.585,1215,1.585,1216,1.585,1217,3.261,1218,2.579,1219,2.579,1220,1.289,1221,2.579,1222,2.579,1223,3.757,1224,1.585,1225,2.579,1226,2.579,1227,1.585,1228,2.303,1229,2.443,1230,1.415,1231,1.415,1232,1.415,1233,1.415,1234,1.585,1235,1.415,1236,2.097,1237,1.415,1238,1.585,1239,2.303,1240,1.585,1241,1.585,1242,2.303,1243,1.585,1244,1.415,1245,1.415,1246,1.585,1247,1.585,1248,2.579,1916,2.998,1917,2.998,1918,3.79,1919,2.998,1920,2.998,1921,2.998,1922,1.842,1923,1.842,1924,1.842,1925,1.842,1926,1.842,1927,1.842,1928,1.842,1929,1.842,1930,1.842,1931,1.842,1932,1.842,1933,1.842,1934,1.842,1935,1.842]],["title/interfaces/ValidationErrorItem.html",[688,0.888,1936,2.635]],["body/interfaces/ValidationErrorItem.html",[3,0.212,4,0.189,5,0.189,7,0.305,8,0.828,21,0.503,22,0.019,23,1.123,57,0.429,65,0.212,66,0.066,69,0.012,70,0.012,94,0.913,125,2.929,133,1.016,139,2.403,158,1.468,163,2.974,255,2.167,261,1.398,271,2.077,315,2.538,320,1.354,371,1.798,401,4.244,410,1.634,515,2.484,550,2.444,589,3.476,612,3.13,688,0.913,695,3.425,704,1.916,725,2.974,739,4.015,780,2.925,871,2.495,891,2.495,892,3.813,937,2.495,1030,2.495,1093,1.81,1098,3.655,1119,2.318,1283,2.974,1291,2.708,1312,2.708,1936,4.768,1937,2.974,1938,2.974,1939,4.496,1940,4.496,1941,5.45,1942,3.33,1943,2.708,1944,3.33,1945,3.33,1946,2.974,1947,3.33,1948,3.33,1949,3.33,1950,3.33,1951,5.45,1952,3.33,1953,3.33,1954,3.33,1955,4.496,1956,4.496,1957,3.33,1958,5.09,1959,5.691,1960,5.09,1961,5.864,1962,3.33,1963,3.33,1964,5.45,1965,3.33,1966,3.33,1967,3.33,1968,3.33,1969,3.33,1970,3.33,1971,3.33,1972,3.33,1973,3.33,1974,3.33,1975,3.33,1976,3.33,1977,3.33,1978,4.496,1979,3.33,1980,3.33,1981,3.33,1982,3.33,1983,3.33,1984,3.33,1985,3.33,1986,4.496,1987,3.33,1988,4.496,1989,3.33,1990,3.33,1991,3.33,1992,5.09,1993,3.33,1994,3.33,1995,3.33,1996,3.33,1997,3.33,1998,3.33,1999,3.33,2000,3.33,2001,3.33,2002,3.33,2003,3.33,2004,3.33]],["title/classes/ValidationExceptionFilter.html",[66,0.042,1943,2.635]],["body/classes/ValidationExceptionFilter.html",[3,0.197,4,0.177,5,0.177,7,0.284,8,0.79,21,0.523,22,0.019,23,1.058,29,1.082,38,1.304,57,0.414,65,0.197,66,0.063,68,1.223,69,0.012,70,0.012,94,0.851,113,1.988,125,2.825,132,2.396,133,1.109,135,2.396,139,2.334,158,1.369,163,2.773,197,1.787,255,2.021,261,2.06,271,2.017,315,2.509,320,1.478,331,1.304,371,1.714,401,3.866,410,1.558,515,2.971,550,2.33,589,3.392,612,2.984,688,0.851,695,3.26,704,1.787,725,4.384,739,4.727,780,2.789,871,2.327,891,3.678,892,3.678,937,2.327,1030,2.327,1098,4.304,1119,2.162,1283,2.773,1291,2.525,1312,3.485,1936,4.785,1937,4.96,1938,2.773,1939,4.909,1940,5.293,1941,5.743,1942,3.106,1943,3.485,1944,4.287,1945,4.287,1946,2.773,1947,3.106,1948,3.106,1949,3.106,1950,3.106,1951,5.293,1952,3.106,1953,4.287,1954,3.106,1955,4.287,1956,4.287,1957,3.106,1958,5.554,1959,5.554,1960,4.909,1961,5.743,1962,3.106,1963,3.106,1964,5.293,1965,3.106,1966,3.106,1967,3.106,1968,3.106,1969,3.106,1970,3.106,1971,3.106,1972,3.106,1973,3.106,1974,4.287,1975,3.106,1976,3.106,1977,3.106,1978,4.287,1979,3.106,1980,3.106,1981,3.106,1982,3.106,1983,3.106,1984,3.106,1985,4.287,1986,4.287,1987,3.106,1988,4.287,1989,3.106,1990,3.106,1991,3.106,1992,4.909,1993,3.106,1994,3.106,1995,3.106,1996,3.106,1997,3.106,1998,3.106,1999,3.106,2000,3.106,2001,3.106,2002,3.106,2003,3.106,2004,3.106,2005,4.983,2006,4.983,2007,3.61,2008,3.61,2009,3.61,2010,3.61,2011,3.61]],["title/coverage.html",[2012,3.942]],["body/coverage.html",[0,2.708,1,1.69,5,0.187,6,3.283,19,1.595,21,0.325,22,0.019,28,3.348,51,1.086,66,0.083,69,0.012,70,0.012,77,1.889,90,2.67,91,2.67,92,2.67,98,1.869,108,3.118,109,4.108,110,3.283,164,1.036,233,2.46,235,2.005,238,2.005,286,2.932,320,0.989,330,2.286,332,2.67,333,1.697,334,3.685,371,2.67,427,3.283,438,2.286,489,2.286,495,2.67,504,2.005,545,2.286,546,4.059,547,4.108,592,3.283,599,2.005,627,2.005,631,2.932,645,2.286,688,1.688,689,2.72,698,2.72,749,2.67,750,3.283,758,2.46,777,2.286,815,2.46,816,2.46,838,2.107,840,3.283,918,2.46,919,3.977,920,4.108,923,2.67,965,3.283,966,3.977,1059,2.286,1060,3.283,1092,2.67,1094,3.977,1104,2.46,1249,3.283,1250,2.67,1285,2.67,1286,3.283,1287,3.283,1294,3.283,1322,3.283,1331,3.283,1342,1.785,1369,3.283,1370,3.283,1403,3.977,1404,3.977,1405,2.932,1433,3.283,1487,2.67,1488,3.977,1587,2.932,1588,3.283,1589,3.283,1590,3.283,1591,3.283,1601,3.283,1608,3.977,1613,3.977,1634,2.932,1635,4.453,1638,2.67,1786,3.283,1798,3.977,1843,3.283,1861,3.283,1864,3.283,1867,3.283,1880,3.283,1936,2.67,1937,3.977,1938,3.977,1943,2.67,2012,2.932,2013,2.932,2014,3.817,2015,3.817,2016,5.177,2017,5.177,2018,3.817,2019,5.874,2020,5.177,2021,3.817,2022,3.817,2023,3.817,2024,3.283,2025,3.283,2026,6.298,2027,3.283,2028,7.24,2029,4.453,2030,5.874,2031,3.817,2032,5.874,2033,3.817,2034,5.177,2035,3.283,2036,3.817,2037,5.177,2038,3.817,2039,5.177,2040,3.817,2041,3.817,2042,3.817,2043,5.874,2044,3.817,2045,3.817,2046,3.817,2047,3.817,2048,3.817,2049,3.817,2050,3.817,2051,3.817,2052,3.817]],["title/dependencies.html",[74,2.242,2053,2.711]],["body/dependencies.html",[22,0.019,32,1.647,62,1.998,66,0.071,69,0.015,70,0.015,74,2.608,94,1.242,96,1.998,250,1.499,254,3.155,255,3.563,410,1.647,412,2.608,606,2.608,716,3.155,763,2.949,782,2.949,819,3.685,865,3.685,1236,3.685,1267,4.047,1309,5.255,1640,4.532,1641,4.532,2054,6.841,2055,5.268,2056,6.366,2057,5.268,2058,5.268,2059,5.268,2060,5.268,2061,5.268,2062,5.268,2063,5.268,2064,5.268,2065,5.268,2066,5.268,2067,5.268,2068,6.366,2069,5.268,2070,5.268,2071,5.268,2072,5.268,2073,5.268,2074,5.268,2075,5.268,2076,5.268,2077,5.268,2078,5.268,2079,5.268,2080,5.268,2081,5.268,2082,5.268,2083,5.268,2084,5.268]],["title/miscellaneous/enumerations.html",[2085,1.887,2086,3.896]],["body/miscellaneous/enumerations.html",[7,0.329,11,1.585,18,2.502,22,0.019,68,1.178,69,0.013,70,0.013,140,3.544,145,3.233,146,2.721,149,2.722,185,3.544,197,3.911,241,1.985,289,4.73,290,4.73,332,2.922,333,2.015,334,3.44,347,4.209,352,3.655,376,2.722,379,4.224,399,4.73,415,3.594,416,2.338,417,3.209,418,3.594,952,3.846,1405,3.209,1470,4.73,1471,5.618,1472,5.618,1473,5.618,1474,5.618,1475,5.618,1476,4.73,1477,4.73,1478,4.73,1479,4.73,1480,4.73,1791,4.73,1807,4.73,1878,3.594,2085,2.502,2086,3.594,2087,5.499,2088,5.499,2089,5.499,2090,5.499,2091,4.178,2092,4.178,2093,5.499,2094,4.178,2095,4.178,2096,4.178,2097,5.499,2098,5.499,2099,5.499,2100,4.178,2101,5.499,2102,5.499,2103,5.499,2104,5.499,2105,5.499,2106,5.499,2107,5.499,2108,5.499,2109,5.499,2110,5.499,2111,5.499,2112,5.499,2113,5.499,2114,5.499,2115,4.178,2116,5.499]],["title/miscellaneous/functions.html",[2085,1.887,2117,3.896]],["body/miscellaneous/functions.html",[7,0.474,22,0.016,69,0.016,70,0.016,77,3.581,2035,5.184,2085,3.608,2117,5.184,2118,6.026]],["title/index.html",[7,0.248,2119,2.711,2120,2.711]],["body/index.html",[4,0.207,22,0.018,69,0.013,70,0.013,87,3.093,170,0.905,174,3.243,279,2.753,300,4.745,491,2.952,552,2.218,797,4.762,845,2.218,928,3.872,988,3.243,1139,2.721,1173,3.243,1229,2.721,1252,3.631,1270,3.243,1272,4.887,1313,3.631,1617,3.631,1810,3.631,2012,3.243,2013,4.253,2121,4.221,2122,4.221,2123,6.177,2124,5.536,2125,4.221,2126,4.221,2127,4.221,2128,5.536,2129,6.177,2130,4.221,2131,4.221,2132,6.557,2133,7.224,2134,4.221,2135,7.12,2136,4.221,2137,4.221,2138,5.536,2139,4.221,2140,4.221,2141,6.177,2142,4.221,2143,5.536,2144,4.221,2145,4.221,2146,4.221,2147,4.221,2148,4.221,2149,6.557,2150,7.224,2151,6.987,2152,5.536,2153,4.221,2154,4.221,2155,4.221,2156,4.221,2157,5.536,2158,6.557,2159,5.536,2160,4.221,2161,5.536,2162,6.809,2163,6.557,2164,4.221,2165,5.536,2166,4.221,2167,4.221,2168,4.221,2169,6.557,2170,4.221,2171,4.221,2172,4.221,2173,4.221,2174,4.221,2175,5.536,2176,4.221,2177,4.221,2178,4.221,2179,4.221,2180,5.536,2181,4.221,2182,4.221,2183,4.221,2184,5.536,2185,4.221,2186,4.221,2187,5.641,2188,4.221,2189,4.221,2190,4.221,2191,4.221,2192,4.221,2193,4.221,2194,4.221,2195,4.221,2196,5.536,2197,4.221,2198,4.221,2199,4.221,2200,4.221,2201,4.221,2202,4.221,2203,4.221,2204,4.221,2205,4.221,2206,5.536,2207,4.221,2208,4.221,2209,4.221,2210,4.221,2211,5.536,2212,4.221,2213,4.221,2214,4.221,2215,4.762,2216,5.536,2217,4.221,2218,4.221,2219,4.221,2220,4.221,2221,4.221,2222,4.221,2223,4.221,2224,4.221,2225,4.221,2226,4.221,2227,3.631,2228,4.221,2229,4.221,2230,4.221,2231,4.221,2232,4.221,2233,4.221,2234,2.952]],["title/license.html",[2119,2.711,2120,2.711,2234,2.204]],["body/license.html",[22,0.015,69,0.015,70,0.015,87,2.306,255,2.916,471,3.358,696,3.644,754,4.422,1119,3.786,1292,4.482,2013,4.002,2215,4.482,2234,3.644,2235,6.808,2236,5.21,2237,5.21,2238,5.21,2239,5.21,2240,6.323,2241,5.21,2242,5.21,2243,5.21,2244,5.21,2245,5.21,2246,5.21,2247,6.323,2248,7.583,2249,5.21,2250,5.21,2251,6.808,2252,5.21,2253,5.21,2254,5.21,2255,5.21,2256,5.21,2257,5.21,2258,5.21,2259,5.21,2260,5.21,2261,5.21,2262,6.323,2263,5.21,2264,5.21,2265,5.21,2266,5.21,2267,5.21,2268,5.21,2269,6.323,2270,6.323,2271,5.21,2272,5.21,2273,5.21,2274,5.21,2275,5.21,2276,5.21,2277,5.21,2278,5.21,2279,5.21,2280,5.21,2281,5.21,2282,5.21,2283,5.21,2284,5.21,2285,5.21,2286,5.21,2287,5.21,2288,5.21,2289,5.21,2290,5.21,2291,5.21,2292,5.21,2293,5.21,2294,5.21,2295,5.21,2296,5.21,2297,5.21,2298,5.21]],["title/modules.html",[73,2.54]],["body/modules.html",[22,0.016,69,0.016,70,0.016,72,3.726,73,2.861,82,3.462,83,3.235,84,3.235,709,4.043,712,3.726,2187,6.494,2299,7.549,2300,7.549,2301,7.549]],["title/overview.html",[2302,4.414]],["body/overview.html",[2,2.452,22,0.018,69,0.014,70,0.014,71,1.861,72,4.797,73,2.31,74,2.31,75,2.612,76,2.612,77,2.31,78,2.612,79,2.612,80,4.015,81,4.015,82,4.518,83,4.127,84,4.127,85,3.305,86,2.612,87,2.066,89,2.612,233,4.697,235,3.829,238,3.578,331,1.685,395,1.605,504,3.829,627,3.829,709,5.304,710,4.015,711,4.015,712,4.909,777,3.88,812,4.015,813,4.015,814,4.015,815,4.176,816,4.176,839,2.452,1093,2.182,1176,4.131,1202,3.264,1250,3.264,1393,4.015,1395,4.015,1396,4.015,1565,4.015,1566,4.015,1567,4.015,1910,4.015,1911,4.015,1912,4.015,2302,4.015,2303,4.667,2304,4.667,2305,4.667]],["title/properties.html",[8,0.718,2053,2.711]],["body/properties.html",[8,0.95,22,0.018,69,0.016,70,0.016,170,1.284,2227,5.155,2234,4.191,2306,5.993,2307,5.993,2308,5.993]],["title/miscellaneous/variables.html",[1317,3.167,2085,1.887]],["body/miscellaneous/variables.html",[7,0.424,21,0.549,22,0.018,23,1.023,38,2.585,69,0.015,70,0.015,98,2.735,152,2.263,197,3.544,210,2.668,241,1.946,271,1.767,315,1.854,548,2.263,606,2.668,780,3.017,1229,3.474,1261,4.141,1274,5.552,1317,3.77,1608,4.141,1613,5.501,1946,4.141,2024,4.637,2025,5.552,2027,5.552,2029,4.637,2085,3.228,2309,5.39,2310,6.454,2311,5.39,2312,5.39,2313,5.39,2314,5.39,2315,5.39,2316,5.39,2317,5.39,2318,6.454,2319,5.39]]],"invertedIndex":[["",{"_index":22,"title":{},"body":{"entities/Address.html":{},"modules/AdminModule.html":{},"controllers/AdminOrdersController.html":{},"classes/AdminProductQueryDto.html":{},"controllers/AdminProductsController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomerReportRow.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"classes/OrderItemDto.html":{},"modules/OrdersModule.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"entities/Product.html":{},"interfaces/ProductPerformanceRow.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"interfaces/SalesReportRow.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateStockDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"entities/Users.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":371,"title":{},"body":{"classes/AdminProductQueryDto.html":{},"classes/CreateProductDto.html":{},"interfaces/CustomerReportRow.html":{},"entities/Order.html":{},"entities/Product.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"interfaces/SalesReportRow.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateStockDto.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"coverage.html":{}}}],["0.0.1",{"_index":2307,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":2064,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":2078,"title":{},"body":{"dependencies.html":{}}}],["0.3.22",{"_index":2084,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":2063,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":2072,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":2028,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":2015,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":2016,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":2050,"title":{},"body":{"coverage.html":{}}}],["0/15",{"_index":2042,"title":{},"body":{"coverage.html":{}}}],["0/17",{"_index":2038,"title":{},"body":{"coverage.html":{}}}],["0/19",{"_index":2039,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":2041,"title":{},"body":{"coverage.html":{}}}],["0/22",{"_index":2040,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":2032,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":2037,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":2034,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":2049,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":2043,"title":{},"body":{"coverage.html":{}}}],["01",{"_index":1067,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["01'})@isnotempty()@isdatestring({strict",{"_index":1068,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["06",{"_index":296,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["0})@column({type",{"_index":1454,"title":{},"body":{"entities/Product.html":{}}}],["0})@isnumber()@min(0",{"_index":1033,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["0})@isnumber()@min(0)@isoptional",{"_index":1024,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["1",{"_index":395,"title":{"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{}},"body":{"classes/AdminProductQueryDto.html":{},"controllers/AdminProductsController.html":{},"classes/AdminUserQueryDto.html":{},"classes/CreateOrderDto.html":{},"interfaces/CustomerReportRow.html":{},"classes/OrderItemDto.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"interfaces/SalesReportRow.html":{},"classes/UserQueryDto.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["1.0.0",{"_index":2068,"title":{},"body":{"dependencies.html":{}}}],["1.4.7",{"_index":2067,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":2030,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":2031,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":367,"title":{},"body":{"classes/AdminProductQueryDto.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AuthService.html":{},"interfaces/CustomerReportRow.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{},"entities/Product.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"interfaces/SalesReportRow.html":{},"classes/UserQueryDto.html":{},"injectables/UsersService.html":{}}}],["100",{"_index":28,"title":{},"body":{"entities/Address.html":{},"controllers/AdminOrdersController.html":{},"classes/CreateProductDto.html":{},"interfaces/CustomerReportRow.html":{},"entities/Product.html":{},"interfaces/SalesReportRow.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateStockDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["1000",{"_index":743,"title":{},"body":{"modules/AppModule.html":{},"interfaces/SalesReportRow.html":{}}}],["100})@column({length",{"_index":1447,"title":{},"body":{"entities/Product.html":{}}}],["100})@isint()@min(0",{"_index":1862,"title":{},"body":{"classes/UpdateStockDto.html":{}}}],["100})@isnumber()@min(0)@isoptional",{"_index":1840,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["10})@isoptional()@isnumber()@min(0)@transform",{"_index":373,"title":{},"body":{"classes/AdminProductQueryDto.html":{}}}],["10})@isoptional()@type(undefined)@isint()@min(1)@max(100",{"_index":672,"title":{},"body":{"classes/AdminUserQueryDto.html":{}}}],["11.0.0",{"_index":2056,"title":{},"body":{"dependencies.html":{}}}],["11.0.1",{"_index":2054,"title":{},"body":{"dependencies.html":{}}}],["11.0.5",{"_index":2057,"title":{},"body":{"dependencies.html":{}}}],["11.1.5",{"_index":2059,"title":{},"body":{"dependencies.html":{}}}],["123e4567",{"_index":944,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{}}}],["12d3",{"_index":946,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{}}}],["13",{"_index":294,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["14",{"_index":2304,"title":{},"body":{"overview.html":{}}}],["14t18:00:00.000z",{"_index":297,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["150",{"_index":1838,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["180",{"_index":1051,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["1990",{"_index":1066,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["1=1",{"_index":1541,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["1})@isnumber",{"_index":1390,"title":{},"body":{"classes/OrderItemDto.html":{}}}],["1})@isoptional()@isnumber()@min(1)@transform",{"_index":397,"title":{},"body":{"classes/AdminProductQueryDto.html":{}}}],["1})@isoptional()@type(undefined)@isint()@min(1",{"_index":673,"title":{},"body":{"classes/AdminUserQueryDto.html":{}}}],["2",{"_index":949,"title":{},"body":{"classes/CreateOrderDto.html":{},"interfaces/CustomerReportRow.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"classes/OrderItemDto.html":{},"entities/Product.html":{},"interfaces/SalesReportRow.html":{},"classes/UpdateProductDto.html":{},"injectables/UsersService.html":{}}}],["2/3",{"_index":2033,"title":{},"body":{"coverage.html":{}}}],["2/4",{"_index":2022,"title":{},"body":{"coverage.html":{}}}],["2/7",{"_index":2023,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":45,"title":{},"body":{"entities/Address.html":{},"controllers/AdminOrdersController.html":{},"interfaces/SalesReportRow.html":{}}}],["200",{"_index":178,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AuthController.html":{}}}],["201",{"_index":443,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["2024",{"_index":295,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["2025",{"_index":2237,"title":{},"body":{"license.html":{}}}],["21t17:59:59.999z",{"_index":298,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["24",{"_index":1720,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["24.99",{"_index":1026,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["25",{"_index":286,"title":{},"body":{"controllers/AdminOrdersController.html":{},"interfaces/SalesReportRow.html":{},"coverage.html":{}}}],["255",{"_index":41,"title":{},"body":{"entities/Address.html":{},"entities/Product.html":{},"entities/Users.html":{}}}],["28",{"_index":1843,"title":{},"body":{"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["29.99",{"_index":1023,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["3",{"_index":1187,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"entities/Product.html":{},"interfaces/SalesReportRow.html":{},"injectables/UsersService.html":{}}}],["3/3",{"_index":2019,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":1844,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["32",{"_index":959,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{},"classes/UpdateProductDto.html":{}}}],["34",{"_index":1845,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["36",{"_index":1846,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["38",{"_index":1847,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["4",{"_index":1202,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"interfaces/SalesReportRow.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["4.0.1",{"_index":2073,"title":{},"body":{"dependencies.html":{}}}],["4.0.2",{"_index":2055,"title":{},"body":{"dependencies.html":{}}}],["4.1.0",{"_index":2069,"title":{},"body":{"dependencies.html":{}}}],["4.4.0",{"_index":2070,"title":{},"body":{"dependencies.html":{}}}],["4/6",{"_index":2018,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":500,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["401",{"_index":765,"title":{},"body":{"controllers/AuthController.html":{}}}],["403",{"_index":445,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["404",{"_index":224,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{}}}],["426614174000",{"_index":948,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{}}}],["426614174000'})@isuuid",{"_index":1388,"title":{},"body":{"classes/OrderItemDto.html":{}}}],["426614174001",{"_index":958,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{}}}],["46",{"_index":2044,"title":{},"body":{"coverage.html":{}}}],["49.99",{"_index":1792,"title":{},"body":{"classes/UpdateOrderDto.html":{}}}],["5",{"_index":930,"title":{},"body":{"classes/CreateOrderDto.html":{},"interfaces/CustomerReportRow.html":{},"classes/OrderItemDto.html":{},"interfaces/SalesReportRow.html":{},"classes/UpdateProductDto.html":{},"injectables/UsersService.html":{}}}],["5.0.1",{"_index":2083,"title":{},"body":{"dependencies.html":{}}}],["5.0.2",{"_index":2061,"title":{},"body":{"dependencies.html":{}}}],["5.1.1",{"_index":2062,"title":{},"body":{"dependencies.html":{}}}],["5.4.1",{"_index":2071,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":2020,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":2021,"title":{},"body":{"coverage.html":{}}}],["59.99",{"_index":1835,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["59.99})@isnumber()@min(0)@isoptional",{"_index":1817,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["6",{"_index":1176,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"interfaces/SalesReportRow.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["6/13",{"_index":2045,"title":{},"body":{"coverage.html":{}}}],["6/6",{"_index":2046,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":1719,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["66",{"_index":2017,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":208,"title":{},"body":{"controllers/AdminOrdersController.html":{},"interfaces/CustomerReportRow.html":{},"interfaces/SalesReportRow.html":{},"injectables/UsersService.html":{}}}],["7.8.1",{"_index":2080,"title":{},"body":{"dependencies.html":{}}}],["79.99",{"_index":1833,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["8",{"_index":2303,"title":{},"body":{"overview.html":{}}}],["8.15.6",{"_index":2076,"title":{},"body":{"dependencies.html":{}}}],["8801712345678",{"_index":1080,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["9",{"_index":2305,"title":{},"body":{"overview.html":{}}}],["9/10",{"_index":2048,"title":{},"body":{"coverage.html":{}}}],["90",{"_index":2047,"title":{},"body":{"coverage.html":{}}}],["98",{"_index":1830,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["99.99",{"_index":284,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["9999.99",{"_index":282,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["9_]+):\\s",{"_index":1982,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["__dirname",{"_index":735,"title":{},"body":{"modules/AppModule.html":{}}}],["a456",{"_index":947,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{}}}],["above",{"_index":2268,"title":{},"body":{"license.html":{}}}],["access",{"_index":447,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["access_token",{"_index":786,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["accessories",{"_index":1475,"title":{},"body":{"entities/Product.html":{},"miscellaneous/enumerations.html":{}}}],["accesstoken",{"_index":910,"title":{},"body":{"injectables/AuthService.html":{}}}],["action",{"_index":2292,"title":{},"body":{"license.html":{}}}],["activate",{"_index":647,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["active",{"_index":355,"title":{},"body":{"classes/AdminProductQueryDto.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{},"entities/Product.html":{},"classes/UpdateProductDto.html":{}}}],["activecustomerscurrentperiod",{"_index":1217,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["activecustomerscurrentperiodraw",{"_index":1215,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["activecustomersprevperiod",{"_index":1223,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["adddays",{"_index":1108,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"interfaces/SalesReportRow.html":{},"injectables/UsersService.html":{}}}],["additional",{"_index":927,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{},"classes/UpdateOrderDto.html":{}}}],["additionalproperties",{"_index":1461,"title":{},"body":{"entities/Product.html":{}}}],["address",{"_index":1,"title":{"entities/Address.html":{}},"body":{"entities/Address.html":{},"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDto.html":{},"modules/OrdersModule.html":{},"interfaces/SalesReportRow.html":{},"entities/Users.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["address'})@isoptional()@isemail",{"_index":564,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["address.entity",{"_index":1908,"title":{},"body":{"entities/Users.html":{}}}],["address.user",{"_index":1882,"title":{},"body":{"entities/Users.html":{}}}],["addresses",{"_index":1881,"title":{},"body":{"entities/Users.html":{}}}],["addressrepository",{"_index":1645,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["addselect('sum(orderitem.quantity",{"_index":1533,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["addselect('sum(orderitem.total",{"_index":1534,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["addselect(['product.name",{"_index":1537,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["admin",{"_index":149,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{},"interfaces/SalesReportRow.html":{},"miscellaneous/enumerations.html":{}}}],["admin.'})@apiquery({name",{"_index":173,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["admin/admin.module",{"_index":719,"title":{},"body":{"modules/AppModule.html":{}}}],["admin/orders",{"_index":112,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["admin/products",{"_index":428,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["admin/users",{"_index":593,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["adminmodule",{"_index":72,"title":{"modules/AdminModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["adminnotes",{"_index":212,"title":{},"body":{"controllers/AdminOrdersController.html":{},"entities/Order.html":{},"interfaces/SalesReportRow.html":{}}}],["adminorderscontroller",{"_index":92,"title":{"controllers/AdminOrdersController.html":{}},"body":{"modules/AdminModule.html":{},"controllers/AdminOrdersController.html":{},"coverage.html":{}}}],["adminproductquerydto",{"_index":330,"title":{"classes/AdminProductQueryDto.html":{}},"body":{"classes/AdminProductQueryDto.html":{},"controllers/AdminProductsController.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"coverage.html":{}}}],["adminproductscontroller",{"_index":91,"title":{"controllers/AdminProductsController.html":{}},"body":{"modules/AdminModule.html":{},"controllers/AdminProductsController.html":{},"coverage.html":{}}}],["adminupdateuserdto",{"_index":545,"title":{"classes/AdminUpdateUserDto.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["adminusercontroller",{"_index":90,"title":{"controllers/AdminUserController.html":{}},"body":{"modules/AdminModule.html":{},"controllers/AdminUserController.html":{},"coverage.html":{}}}],["adminuserquerydto",{"_index":599,"title":{"classes/AdminUserQueryDto.html":{}},"body":{"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"interfaces/CustomerReportRow.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["advanced",{"_index":740,"title":{},"body":{"modules/AppModule.html":{}}}],["after)'})@isoptional()@isdatestring",{"_index":663,"title":{},"body":{"classes/AdminUserQueryDto.html":{}}}],["allowing",{"_index":2176,"title":{},"body":{"index.html":{}}}],["already",{"_index":1118,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["amazing",{"_index":2220,"title":{},"body":{"index.html":{}}}],["amount",{"_index":1368,"title":{},"body":{"entities/Order.html":{},"classes/UpdateOrderDto.html":{}}}],["analytics",{"_index":168,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"interfaces/SalesReportRow.html":{}}}],["analytics'})@apiquery({name",{"_index":186,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{}}}],["and/or",{"_index":2260,"title":{},"body":{"license.html":{}}}],["any).message",{"_index":1962,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["aov",{"_index":1751,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["api",{"_index":700,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{}}}],["apibearerauth",{"_index":249,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{}}}],["apibody",{"_index":510,"title":{},"body":{"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"controllers/AuthController.html":{}}}],["apioperation",{"_index":246,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"controllers/AuthController.html":{}}}],["apiparam",{"_index":635,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["apiproperty",{"_index":585,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/OrderItemDto.html":{},"entities/Product.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateStockDto.html":{}}}],["apiproperty({description",{"_index":573,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/OrderItemDto.html":{},"entities/Product.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateStockDto.html":{}}}],["apipropertyoptional",{"_index":414,"title":{},"body":{"classes/AdminProductQueryDto.html":{},"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"classes/CreateProductDto.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{},"classes/UpdateProductDto.html":{}}}],["apipropertyoptional({description",{"_index":348,"title":{},"body":{"classes/AdminProductQueryDto.html":{},"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["apipropertyoptional({enum",{"_index":675,"title":{},"body":{"classes/AdminUserQueryDto.html":{}}}],["apiquery",{"_index":248,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{}}}],["apiresponse",{"_index":247,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"controllers/AuthController.html":{}}}],["apisecurity",{"_index":634,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["apitags",{"_index":245,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"controllers/AuthController.html":{}}}],["apitags('a",{"_index":783,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('e",{"_index":636,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["apitags('f",{"_index":512,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["apitags('g",{"_index":256,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["application",{"_index":2151,"title":{},"body":{"index.html":{}}}],["application/vnd.openxmlformats",{"_index":324,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["application_name",{"_index":746,"title":{},"body":{"modules/AppModule.html":{}}}],["applications",{"_index":2128,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":709,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appropriate",{"_index":1284,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["argumentshost",{"_index":1940,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["arising",{"_index":2296,"title":{},"body":{"license.html":{}}}],["array",{"_index":704,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"entities/Order.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"entities/Product.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["array.isarray(messages",{"_index":1963,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["arrival",{"_index":363,"title":{},"body":{"classes/AdminProductQueryDto.html":{},"controllers/AdminProductsController.html":{},"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/UpdateProductDto.html":{}}}],["arrival')@apioperation({summary",{"_index":481,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["arrival'})@apiresponse({status",{"_index":482,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["asc",{"_index":145,"title":{},"body":{"controllers/AdminOrdersController.html":{},"classes/AdminProductQueryDto.html":{},"classes/AdminUserQueryDto.html":{},"interfaces/CustomerReportRow.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{},"interfaces/SalesReportRow.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["assertion",{"_index":1991,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["associated",{"_index":696,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{},"license.html":{}}}],["async",{"_index":114,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/CustomerReportRow.html":{},"injectables/JwtStrategy.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"interfaces/SalesReportRow.html":{},"injectables/UsersService.html":{}}}],["attachment",{"_index":327,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["attempt",{"_index":789,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth",{"_index":751,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":824,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":237,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"modules/AuthModule.html":{}}}],["auth.guard.ts",{"_index":1249,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:17",{"_index":1259,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:25",{"_index":1262,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:40",{"_index":1265,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.service",{"_index":778,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":717,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/decorators/roles.decorator",{"_index":240,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{}}}],["auth/guards/jwt",{"_index":236,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{}}}],["auth/guards/roles.guard",{"_index":239,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{}}}],["authcontroller",{"_index":749,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticated",{"_index":769,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/RolesGuard.html":{}}}],["authenticates",{"_index":768,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["authentication",{"_index":752,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["authguard",{"_index":781,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["authguard('jwt",{"_index":1254,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["authmodule",{"_index":712,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":2227,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authority",{"_index":1282,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authors",{"_index":2286,"title":{},"body":{"license.html":{}}}],["authservice",{"_index":777,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["availability",{"_index":1647,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["available",{"_index":993,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/UpdateProductDto.html":{}}}],["average",{"_index":1453,"title":{},"body":{"entities/Product.html":{},"interfaces/SalesReportRow.html":{}}}],["averageordervalue",{"_index":283,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["avgordervalue",{"_index":1748,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["avgordervaluechange",{"_index":1750,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["avgordervaluetrend",{"_index":1754,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["await",{"_index":317,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/CustomerReportRow.html":{},"injectables/JwtStrategy.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"interfaces/SalesReportRow.html":{},"injectables/UsersService.html":{}}}],["aws",{"_index":2165,"title":{},"body":{"index.html":{}}}],["azminur",{"_index":2238,"title":{},"body":{"license.html":{}}}],["back",{"_index":207,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["back.jpg",{"_index":1852,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["backers",{"_index":2221,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":1098,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["badrequestexception('email",{"_index":1117,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["badrequestexception(`role",{"_index":1146,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["bangladeshi",{"_index":1079,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["based",{"_index":1270,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"index.html":{}}}],["basic",{"_index":1483,"title":{},"body":{"entities/Product.html":{}}}],["bcrypt",{"_index":865,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["bcrypt.compare",{"_index":878,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(createuserdto.password",{"_index":1121,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["bcrypt.hash(password",{"_index":1153,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["bcrypt.hash(refreshtoken",{"_index":904,"title":{},"body":{"injectables/AuthService.html":{}}}],["beauty",{"_index":1479,"title":{},"body":{"entities/Product.html":{},"miscellaneous/enumerations.html":{}}}],["before",{"_index":707,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{}}}],["before)'})@isoptional()@isdatestring",{"_index":665,"title":{},"body":{"classes/AdminUserQueryDto.html":{}}}],["being",{"_index":1788,"title":{},"body":{"classes/UpdateOrderDto.html":{}}}],["best",{"_index":358,"title":{},"body":{"classes/AdminProductQueryDto.html":{},"controllers/AdminProductsController.html":{},"classes/CreateProductDto.html":{},"entities/Product.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductDto.html":{}}}],["bestsellers",{"_index":1529,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["between",{"_index":1099,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"interfaces/SalesReportRow.html":{},"injectables/UsersService.html":{}}}],["between(prevstart",{"_index":1726,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["between(prevstartdate",{"_index":1224,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["between(start",{"_index":1724,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["between(startdate",{"_index":1220,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"injectables/UsersService.html":{}}}],["birth",{"_index":563,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{}}}],["birth'})@isoptional()@type(undefined)@isdate",{"_index":560,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["black",{"_index":1044,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["bleach",{"_index":985,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["blue",{"_index":957,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{},"classes/UpdateProductDto.html":{}}}],["board",{"_index":2214,"title":{},"body":{"index.html":{}}}],["body",{"_index":228,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"controllers/AuthController.html":{}}}],["body('adminnotes",{"_index":306,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["body('isactive",{"_index":650,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["body('orderids",{"_index":308,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["body('role",{"_index":654,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["body('status",{"_index":305,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["books",{"_index":1476,"title":{},"body":{"entities/Product.html":{},"miscellaneous/enumerations.html":{}}}],["boolean",{"_index":37,"title":{},"body":{"entities/Address.html":{},"classes/AdminProductQueryDto.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"classes/CreateProductDto.html":{},"interfaces/CustomerReportRow.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{},"entities/Product.html":{},"guards/RolesGuard.html":{},"classes/UpdateProductDto.html":{},"entities/Users.html":{},"injectables/UsersService.html":{}}}],["bootstrap",{"_index":77,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/OrdersModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["brand",{"_index":335,"title":{},"body":{"classes/AdminProductQueryDto.html":{},"classes/CreateProductDto.html":{},"entities/Product.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductDto.html":{}}}],["brand'})@isoptional()@isstring",{"_index":350,"title":{},"body":{"classes/AdminProductQueryDto.html":{}}}],["breakdown",{"_index":201,"title":{},"body":{"controllers/AdminOrdersController.html":{},"interfaces/SalesReportRow.html":{}}}],["breakdown')@apioperation({summary",{"_index":200,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["breakdown[datestr",{"_index":1780,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["breakdown[datestr][cat",{"_index":1782,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["breakdown[datestr][item.category",{"_index":1783,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["browse",{"_index":2301,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":2299,"title":{},"body":{"modules.html":{}}}],["buffer",{"_index":316,"title":{},"body":{"controllers/AdminOrdersController.html":{},"interfaces/SalesReportRow.html":{}}}],["building",{"_index":2124,"title":{},"body":{"index.html":{}}}],["burgundy",{"_index":1046,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["button",{"_index":1858,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["c",{"_index":2236,"title":{},"body":{"license.html":{}}}],["calculate",{"_index":1729,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["canactivate",{"_index":1255,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":1260,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["cancelled",{"_index":2099,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["care",{"_index":978,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/UpdateProductDto.html":{}}}],["careinstructions",{"_index":967,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/UpdateProductDto.html":{}}}],["cascade",{"_index":1345,"title":{},"body":{"entities/Order.html":{}}}],["case",{"_index":388,"title":{},"body":{"classes/AdminProductQueryDto.html":{}}}],["cash_on_delivery",{"_index":964,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{}}}],["casual",{"_index":1054,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["casual_wear",{"_index":2110,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["catch",{"_index":891,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["catch(badrequestexception",{"_index":1942,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["catch(exception",{"_index":1945,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["categories",{"_index":1774,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["categories.foreach(cat",{"_index":1781,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["categorization",{"_index":1411,"title":{},"body":{"entities/Product.html":{}}}],["category",{"_index":202,"title":{},"body":{"controllers/AdminOrdersController.html":{},"classes/AdminProductQueryDto.html":{},"classes/CreateProductDto.html":{},"entities/Product.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"interfaces/SalesReportRow.html":{},"classes/UpdateProductDto.html":{}}}],["category.enum.ts",{"_index":2093,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["change",{"_index":1151,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["changepassword",{"_index":1916,"title":{},"body":{"injectables/UsersService.html":{}}}],["changepassword(id",{"_index":1152,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["channel",{"_index":2189,"title":{},"body":{"index.html":{}}}],["charge",{"_index":2244,"title":{},"body":{"license.html":{}}}],["chart",{"_index":1190,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["check",{"_index":1272,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"interfaces/SalesReportRow.html":{},"index.html":{}}}],["city",{"_index":9,"title":{},"body":{"entities/Address.html":{}}}],["claim",{"_index":2289,"title":{},"body":{"license.html":{}}}],["class",{"_index":66,"title":{"classes/AdminProductQueryDto.html":{},"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/OrderItemDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateStockDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"classes/ValidationExceptionFilter.html":{}},"body":{"entities/Address.html":{},"modules/AdminModule.html":{},"controllers/AdminOrdersController.html":{},"classes/AdminProductQueryDto.html":{},"controllers/AdminProductsController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomerReportRow.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"classes/OrderItemDto.html":{},"modules/OrdersModule.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{},"entities/Product.html":{},"interfaces/ProductPerformanceRow.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"interfaces/SalesReportRow.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateStockDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"entities/Users.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":331,"title":{},"body":{"classes/AdminProductQueryDto.html":{},"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/OrderItemDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateStockDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"classes/ValidationExceptionFilter.html":{},"overview.html":{}}}],["classic",{"_index":1001,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["clicks",{"_index":2175,"title":{},"body":{"index.html":{}}}],["closure",{"_index":1857,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["clothing",{"_index":952,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{},"entities/Product.html":{},"miscellaneous/enumerations.html":{}}}],["cloud",{"_index":2160,"title":{},"body":{"index.html":{}}}],["cluster_adminmodule",{"_index":80,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_adminmodule_imports",{"_index":81,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":710,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":711,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":812,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":814,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":813,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_ordersmodule",{"_index":1393,"title":{},"body":{"modules/OrdersModule.html":{},"overview.html":{}}}],["cluster_ordersmodule_exports",{"_index":1396,"title":{},"body":{"modules/OrdersModule.html":{},"overview.html":{}}}],["cluster_ordersmodule_imports",{"_index":1394,"title":{},"body":{"modules/OrdersModule.html":{}}}],["cluster_ordersmodule_providers",{"_index":1395,"title":{},"body":{"modules/OrdersModule.html":{},"overview.html":{}}}],["cluster_productsmodule",{"_index":1565,"title":{},"body":{"modules/ProductsModule.html":{},"overview.html":{}}}],["cluster_productsmodule_exports",{"_index":1566,"title":{},"body":{"modules/ProductsModule.html":{},"overview.html":{}}}],["cluster_productsmodule_providers",{"_index":1567,"title":{},"body":{"modules/ProductsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1910,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1911,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":1912,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cold",{"_index":981,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["color",{"_index":955,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{}}}],["colors",{"_index":968,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/UpdateProductDto.html":{}}}],["column",{"_index":59,"title":{},"body":{"entities/Address.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"entities/Roles.html":{},"entities/Users.html":{}}}],["column('varchar",{"_index":1486,"title":{},"body":{"entities/Product.html":{}}}],["column({nullable",{"_index":1885,"title":{},"body":{"entities/Users.html":{}}}],["column({type",{"_index":25,"title":{},"body":{"entities/Address.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Roles.html":{},"entities/Users.html":{}}}],["come",{"_index":2181,"title":{},"body":{"index.html":{}}}],["comfort",{"_index":1812,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["comfortable",{"_index":1000,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["comment",{"_index":1887,"title":{},"body":{"entities/Users.html":{}}}],["comments",{"_index":1787,"title":{},"body":{"classes/UpdateOrderDto.html":{}}}],["commerce",{"_index":1407,"title":{},"body":{"entities/Product.html":{}}}],["conditions",{"_index":2267,"title":{},"body":{"license.html":{}}}],["config",{"_index":832,"title":{},"body":{"modules/AuthModule.html":{}}}],["config.accesstokensecret",{"_index":834,"title":{},"body":{"modules/AuthModule.html":{}}}],["config.accesstokenttl}s",{"_index":837,"title":{},"body":{"modules/AuthModule.html":{}}}],["config/jwt.config",{"_index":826,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["configmodule",{"_index":714,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forfeature(jwtconfig",{"_index":829,"title":{},"body":{"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":720,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":715,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configservice.get('dbhost",{"_index":726,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('dbname",{"_index":734,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('dbpassword",{"_index":732,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('dbport",{"_index":728,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('dbuser",{"_index":730,"title":{},"body":{"modules/AppModule.html":{}}}],["configtype",{"_index":848,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["connection",{"_index":2297,"title":{},"body":{"license.html":{}}}],["console",{"_index":741,"title":{},"body":{"modules/AppModule.html":{}}}],["console.log('login",{"_index":788,"title":{},"body":{"controllers/AuthController.html":{}}}],["const",{"_index":315,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/CustomerReportRow.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"interfaces/SalesReportRow.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["constraint",{"_index":1977,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["constraintmatch",{"_index":1978,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["constraintmatch[1",{"_index":1983,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["constraintmatch[2",{"_index":1984,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["constraints",{"_index":1992,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["constraints[key",{"_index":1998,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["constructor",{"_index":514,"title":{},"body":{"controllers/AdminProductsController.html":{},"injectables/AuthService.html":{},"interfaces/CustomerReportRow.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"interfaces/SalesReportRow.html":{},"injectables/UsersService.html":{}}}],["constructor(jwtconfiguration",{"_index":1301,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["constructor(jwtservice",{"_index":1257,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["constructor(private",{"_index":260,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminUserController.html":{},"controllers/AuthController.html":{},"guards/RolesGuard.html":{}}}],["constructor(productrepository",{"_index":1572,"title":{},"body":{"injectables/ProductsService.html":{}}}],["constructor(reflector",{"_index":1609,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(usersrepository",{"_index":844,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["containing",{"_index":1305,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["contains",{"_index":690,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{}}}],["content",{"_index":323,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["context",{"_index":1263,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["context.getclass",{"_index":1278,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":1277,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":1619,"title":{},"body":{"guards/RolesGuard.html":{}}}],["continue",{"_index":1279,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["contract",{"_index":2293,"title":{},"body":{"license.html":{}}}],["controller",{"_index":108,"title":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"controllers/AuthController.html":{}},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"controllers/AuthController.html":{},"coverage.html":{}}}],["controller('admin/orders",{"_index":257,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["controller('admin/products",{"_index":513,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["controller('admin/users",{"_index":637,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["controller('auth",{"_index":784,"title":{},"body":{"controllers/AuthController.html":{}}}],["controllers",{"_index":89,"title":{},"body":{"modules/AdminModule.html":{},"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"overview.html":{}}}],["controllers/admin",{"_index":100,"title":{},"body":{"modules/AdminModule.html":{}}}],["conversion",{"_index":1203,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["conversionrate",{"_index":1211,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["conversionratechangepercent",{"_index":1225,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["conversionratetrend",{"_index":1226,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["cookie",{"_index":2065,"title":{},"body":{"dependencies.html":{}}}],["copies",{"_index":2262,"title":{},"body":{"license.html":{}}}],["copy",{"_index":2247,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":2235,"title":{},"body":{"license.html":{}}}],["cotton",{"_index":998,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["cotton'})@isstring()@isoptional",{"_index":1019,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["count",{"_index":1194,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["count(distinct",{"_index":1214,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["count(id",{"_index":1193,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"interfaces/SalesReportRow.html":{},"injectables/UsersService.html":{}}}],["country",{"_index":10,"title":{},"body":{"entities/Address.html":{}}}],["courses",{"_index":2195,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":2012,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":429,"title":{},"body":{"controllers/AdminProductsController.html":{},"interfaces/CustomerReportRow.html":{},"injectables/ProductsService.html":{},"interfaces/SalesReportRow.html":{},"classes/UpdateUserDto.html":{},"injectables/UsersService.html":{}}}],["create(@body",{"_index":518,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["create(createorderdto",{"_index":1646,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["create(createproductdto",{"_index":437,"title":{},"body":{"controllers/AdminProductsController.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["create(createuserdto",{"_index":1115,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["created",{"_index":444,"title":{},"body":{"controllers/AdminProductsController.html":{},"entities/Product.html":{}}}],["created'})@createdatecolumn",{"_index":1425,"title":{},"body":{"entities/Product.html":{}}}],["created_at",{"_index":417,"title":{},"body":{"classes/AdminProductQueryDto.html":{},"classes/UserQueryDto.html":{},"miscellaneous/enumerations.html":{}}}],["createdafter",{"_index":657,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{}}}],["createdat",{"_index":11,"title":{},"body":{"entities/Address.html":{},"classes/AdminProductQueryDto.html":{},"classes/AdminUserQueryDto.html":{},"interfaces/CustomerReportRow.html":{},"entities/Order.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{},"entities/Product.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"interfaces/SalesReportRow.html":{},"entities/Users.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["createdatecolumn",{"_index":33,"title":{},"body":{"entities/Address.html":{},"entities/Order.html":{},"entities/Product.html":{},"entities/Users.html":{}}}],["createdbefore",{"_index":658,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{}}}],["createorderdto",{"_index":918,"title":{"classes/CreateOrderDto.html":{}},"body":{"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{},"interfaces/SalesReportRow.html":{},"coverage.html":{}}}],["createorderdto.items",{"_index":1648,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["createparamdecorator",{"_index":2312,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createproductdto",{"_index":438,"title":{"classes/CreateProductDto.html":{}},"body":{"controllers/AdminProductsController.html":{},"classes/CreateProductDto.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"coverage.html":{}}}],["createproductdto})@apiresponse({status",{"_index":442,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["createquerybuilder('orderitem",{"_index":1531,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"interfaces/SalesReportRow.html":{}}}],["createquerybuilder('product",{"_index":1551,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["creates",{"_index":440,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["createuserdto",{"_index":1059,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"interfaces/CustomerReportRow.html":{},"classes/UpdateUserDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.profileimage",{"_index":1128,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["creation",{"_index":662,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{}}}],["credentials",{"_index":766,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{}}}],["credit_card",{"_index":938,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{}}}],["crew",{"_index":1056,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["ctx",{"_index":1946,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["ctx.getrequest",{"_index":1949,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":1948,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":2313,"title":{},"body":{"miscellaneous/variables.html":{}}}],["current",{"_index":691,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"entities/Product.html":{}}}],["currently",{"_index":1439,"title":{},"body":{"entities/Product.html":{}}}],["currentorders",{"_index":1727,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["currentorders.length",{"_index":1731,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["currentorders.reduce((sum",{"_index":1732,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["currenttrendraw",{"_index":1743,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["currentuser",{"_index":2027,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["customer",{"_index":185,"title":{},"body":{"controllers/AdminOrdersController.html":{},"interfaces/CustomerReportRow.html":{},"interfaces/SalesReportRow.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["customerdata",{"_index":1691,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["customerdata.length",{"_index":1693,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["customerreportrow",{"_index":1092,"title":{"interfaces/CustomerReportRow.html":{}},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["customersheet",{"_index":1689,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["customersheet.addrows(customerdata",{"_index":1696,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["customersheet.columns",{"_index":1694,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["d",{"_index":1236,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"interfaces/SalesReportRow.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["daily",{"_index":1753,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["dailyrevenue",{"_index":1769,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["damages",{"_index":2290,"title":{},"body":{"license.html":{}}}],["dark",{"_index":960,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{},"classes/UpdateProductDto.html":{}}}],["data",{"_index":548,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"classes/LoginDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"interfaces/SalesReportRow.html":{},"miscellaneous/variables.html":{}}}],["database",{"_index":733,"title":{},"body":{"modules/AppModule.html":{}}}],["date",{"_index":32,"title":{},"body":{"entities/Address.html":{},"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomerReportRow.html":{},"entities/Order.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{},"entities/Product.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"interfaces/SalesReportRow.html":{},"entities/Users.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["date().toisostring",{"_index":1970,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["date().toisostring()}.xlsx",{"_index":321,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["date(order.createdat",{"_index":1662,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["date_trunc('day",{"_index":1766,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["datestr",{"_index":1778,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["date})@apiquery({name",{"_index":157,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{}}}],["day",{"_index":190,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["days",{"_index":205,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"interfaces/CustomerReportRow.html":{},"interfaces/SalesReportRow.html":{},"injectables/UsersService.html":{}}}],["dd",{"_index":1065,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/SalesReportRow.html":{}}}],["deactivate",{"_index":648,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["deal",{"_index":2250,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":2298,"title":{},"body":{"license.html":{}}}],["decimal",{"_index":1350,"title":{},"body":{"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{}}}],["decimal'})@column({type",{"_index":1451,"title":{},"body":{"entities/Product.html":{}}}],["declarations",{"_index":76,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/OrdersModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorator",{"_index":2316,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decorators",{"_index":24,"title":{},"body":{"entities/Address.html":{},"controllers/AdminOrdersController.html":{},"classes/AdminProductQueryDto.html":{},"controllers/AdminProductsController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"controllers/AuthController.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"classes/OrderItemDto.html":{},"entities/Product.html":{},"entities/Roles.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateStockDto.html":{},"classes/UserQueryDto.html":{},"entities/Users.html":{}}}],["deeper",{"_index":2191,"title":{},"body":{"index.html":{}}}],["default",{"_index":38,"title":{},"body":{"entities/Address.html":{},"controllers/AdminOrdersController.html":{},"classes/AdminProductQueryDto.html":{},"classes/AdminUserQueryDto.html":{},"classes/CreateProductDto.html":{},"entities/Order.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{},"entities/Product.html":{},"interfaces/SalesReportRow.html":{},"classes/UpdateProductDto.html":{},"classes/UserQueryDto.html":{},"entities/Users.html":{},"classes/ValidationExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["defaultrole",{"_index":1122,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["defined",{"_index":29,"title":{},"body":{"entities/Address.html":{},"controllers/AdminOrdersController.html":{},"classes/AdminProductQueryDto.html":{},"controllers/AdminProductsController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"classes/OrderItemDto.html":{},"entities/Product.html":{},"injectables/ProductsService.html":{},"injectables/RefreshTokenStrategy.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateStockDto.html":{},"classes/UserQueryDto.html":{},"entities/Users.html":{},"injectables/UsersService.html":{},"classes/ValidationExceptionFilter.html":{}}}],["defines",{"_index":587,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"classes/LoginDto.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{}}}],["delete",{"_index":460,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["delete(':id",{"_index":523,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["delete(':id')@apioperation({summary",{"_index":459,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["deleted",{"_index":463,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["deletes",{"_index":461,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["deliver",{"_index":929,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{}}}],["delivered",{"_index":2098,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["delivery_man",{"_index":2116,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["denied",{"_index":900,"title":{},"body":{"injectables/AuthService.html":{}}}],["denim",{"_index":1806,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["dependencies",{"_index":74,"title":{"dependencies.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/OrdersModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":2149,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":2164,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":2157,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":2174,"title":{},"body":{"index.html":{}}}],["desc",{"_index":146,"title":{},"body":{"controllers/AdminOrdersController.html":{},"classes/AdminProductQueryDto.html":{},"classes/AdminUserQueryDto.html":{},"interfaces/CustomerReportRow.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"interfaces/SalesReportRow.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["desc'})@isoptional()@isstring",{"_index":683,"title":{},"body":{"classes/AdminUserQueryDto.html":{}}}],["description",{"_index":170,"title":{},"body":{"controllers/AdminOrdersController.html":{},"classes/AdminProductQueryDto.html":{},"controllers/AdminProductsController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/OrderItemDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"entities/Product.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateStockDto.html":{},"index.html":{},"properties.html":{}}}],["detail.jpg",{"_index":1853,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["detailed",{"_index":194,"title":{},"body":{"controllers/AdminOrdersController.html":{},"entities/Product.html":{}}}],["details",{"_index":1484,"title":{},"body":{"entities/Product.html":{}}}],["development",{"_index":2136,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":2201,"title":{},"body":{"index.html":{}}}],["direction.enum",{"_index":1879,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["direction.enum.ts",{"_index":2089,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["discord",{"_index":2188,"title":{},"body":{"index.html":{}}}],["discounted",{"_index":1429,"title":{},"body":{"entities/Product.html":{},"classes/UpdateProductDto.html":{}}}],["discountedprice",{"_index":1412,"title":{},"body":{"entities/Product.html":{},"classes/UpdateProductDto.html":{}}}],["disposition",{"_index":326,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["distribute",{"_index":2258,"title":{},"body":{"license.html":{}}}],["dive",{"_index":2190,"title":{},"body":{"index.html":{}}}],["dividing",{"_index":1752,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["dob",{"_index":553,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"entities/Users.html":{}}}],["documentation",{"_index":2013,"title":{},"body":{"coverage.html":{},"index.html":{},"license.html":{}}}],["doe",{"_index":1074,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["doesn't",{"_index":1630,"title":{},"body":{"guards/RolesGuard.html":{}}}],["download",{"_index":127,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["downloadmasterreport",{"_index":115,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["downloadmasterreport(@res",{"_index":314,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["downloadmasterreport(res",{"_index":124,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["dresses",{"_index":2101,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["dry",{"_index":983,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["dsc",{"_index":2095,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["dto",{"_index":790,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/admin",{"_index":1110,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"injectables/UsersService.html":{}}}],["dto/create",{"_index":1102,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"interfaces/SalesReportRow.html":{},"injectables/UsersService.html":{}}}],["dto/login.dto",{"_index":779,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/update",{"_index":1103,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"interfaces/SalesReportRow.html":{},"injectables/UsersService.html":{}}}],["dto/user",{"_index":1105,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["during",{"_index":895,"title":{},"body":{"injectables/AuthService.html":{}}}],["e",{"_index":1406,"title":{},"body":{"entities/Product.html":{}}}],["e2e",{"_index":2144,"title":{},"body":{"index.html":{}}}],["e89b",{"_index":945,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{}}}],["each",{"_index":962,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/OrderItemDto.html":{},"classes/UpdateProductDto.html":{}}}],["efficient",{"_index":2125,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":2155,"title":{},"body":{"index.html":{}}}],["elastane",{"_index":1854,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["elastane'})@isstring()@isoptional",{"_index":1831,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["electronics",{"_index":1470,"title":{},"body":{"entities/Product.html":{},"miscellaneous/enumerations.html":{}}}],["elevate",{"_index":975,"title":{},"body":{"classes/CreateProductDto.html":{},"interfaces/SalesReportRow.html":{},"classes/UpdateProductDto.html":{}}}],["elevate_admin",{"_index":747,"title":{},"body":{"modules/AppModule.html":{}}}],["email",{"_index":554,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomerReportRow.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDto.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{},"interfaces/SalesReportRow.html":{},"entities/Users.html":{},"injectables/UsersService.html":{}}}],["email'})@isoptional()@isstring",{"_index":679,"title":{},"body":{"classes/AdminUserQueryDto.html":{}}}],["end",{"_index":176,"title":{},"body":{"controllers/AdminOrdersController.html":{},"interfaces/SalesReportRow.html":{}}}],["end.gettime",{"_index":1717,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["enddate",{"_index":142,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"interfaces/CustomerReportRow.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"interfaces/SalesReportRow.html":{},"injectables/UsersService.html":{}}}],["endofday",{"_index":253,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"interfaces/CustomerReportRow.html":{},"interfaces/SalesReportRow.html":{},"injectables/UsersService.html":{}}}],["endofday(enddate",{"_index":1712,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["endofday(new",{"_index":1174,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"interfaces/SalesReportRow.html":{},"injectables/UsersService.html":{}}}],["endofday(now",{"_index":542,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["endofday(subdays(startdate",{"_index":1180,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["ensure",{"_index":2153,"title":{},"body":{"index.html":{}}}],["enterprise",{"_index":2205,"title":{},"body":{"index.html":{}}}],["entities",{"_index":2,"title":{},"body":{"entities/Address.html":{},"modules/AppModule.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"entities/Roles.html":{},"entities/Users.html":{},"overview.html":{}}}],["entities/address.entity",{"_index":1915,"title":{},"body":{"modules/UsersModule.html":{}}}],["entities/order",{"_index":1400,"title":{},"body":{"modules/OrdersModule.html":{},"interfaces/SalesReportRow.html":{}}}],["entities/order.entity",{"_index":1399,"title":{},"body":{"modules/OrdersModule.html":{},"interfaces/SalesReportRow.html":{}}}],["entities/product.entity",{"_index":413,"title":{},"body":{"classes/AdminProductQueryDto.html":{},"classes/CreateProductDto.html":{},"interfaces/ProductPerformanceRow.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductDto.html":{}}}],["entities/roles.entity",{"_index":1106,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entities/users.entity",{"_index":1101,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entity",{"_index":0,"title":{"entities/Address.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"entities/Roles.html":{},"entities/Users.html":{}},"body":{"entities/Address.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"entities/Roles.html":{},"entities/Users.html":{},"coverage.html":{}}}],["entity('addresses",{"_index":64,"title":{},"body":{"entities/Address.html":{}}}],["entity('order_items",{"_index":1385,"title":{},"body":{"entities/OrderItem.html":{}}}],["entity('orders",{"_index":1364,"title":{},"body":{"entities/Order.html":{}}}],["entity('products",{"_index":1485,"title":{},"body":{"entities/Product.html":{}}}],["entity{.ts,.js",{"_index":736,"title":{},"body":{"modules/AppModule.html":{}}}],["enum",{"_index":154,"title":{},"body":{"controllers/AdminOrdersController.html":{},"classes/AdminProductQueryDto.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"entities/Order.html":{},"classes/OrderItemDto.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{},"entities/Product.html":{},"entities/Roles.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{}}}],["enumerations",{"_index":2086,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/order",{"_index":1363,"title":{},"body":{"entities/Order.html":{},"interfaces/SalesReportRow.html":{},"classes/UpdateOrderDto.html":{}}}],["enums/roles.enum",{"_index":1107,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"entities/Roles.html":{},"injectables/UsersService.html":{}}}],["environment",{"_index":1316,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["equal",{"_index":1870,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["err",{"_index":1266,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["error",{"_index":892,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["error('default",{"_index":1125,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["error('jwt_access_token_secret",{"_index":1315,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["error('jwt_refresh_token_secret",{"_index":1596,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["error.children",{"_index":1999,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["error.children.foreach(child",{"_index":2001,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["error.children.length",{"_index":2000,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["error.constraints",{"_index":1994,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["error.match(/^([a",{"_index":1979,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["error.property",{"_index":1990,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["errorresponse",{"_index":1968,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["errors",{"_index":1958,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["errors.foreach(error",{"_index":2003,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["errors.map(error",{"_index":1975,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["ethnic_wear",{"_index":2111,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["event",{"_index":2285,"title":{},"body":{"license.html":{}}}],["everyday",{"_index":1004,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["example",{"_index":279,"title":{},"body":{"controllers/AdminOrdersController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/OrderItemDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateStockDto.html":{},"index.html":{}}}],["exceljs",{"_index":1641,"title":{},"body":{"interfaces/SalesReportRow.html":{},"dependencies.html":{}}}],["exceljs.workbook",{"_index":1675,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["exception",{"_index":1953,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["exception.filter.ts",{"_index":1938,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:18",{"_index":2007,"title":{},"body":{"classes/ValidationExceptionFilter.html":{}}}],["exception.filter.ts:20",{"_index":2008,"title":{},"body":{"classes/ValidationExceptionFilter.html":{}}}],["exception.filter.ts:63",{"_index":2011,"title":{},"body":{"classes/ValidationExceptionFilter.html":{}}}],["exception.filter.ts:77",{"_index":2010,"title":{},"body":{"classes/ValidationExceptionFilter.html":{}}}],["exception.getresponse",{"_index":1952,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["exception.getstatus",{"_index":1950,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["exceptionfilter",{"_index":1939,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["exceptionresponse",{"_index":1951,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["executioncontext",{"_index":1261,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["existing",{"_index":462,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["existinguser",{"_index":1116,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["exists",{"_index":1622,"title":{},"body":{"guards/RolesGuard.html":{}}}],["exp",{"_index":1289,"title":{},"body":{"interfaces/JwtPayload.html":{}}}],["experience",{"_index":2193,"title":{},"body":{"index.html":{}}}],["expiration",{"_index":1290,"title":{},"body":{"interfaces/JwtPayload.html":{}}}],["expiresin",{"_index":836,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["export",{"_index":65,"title":{},"body":{"entities/Address.html":{},"modules/AdminModule.html":{},"controllers/AdminOrdersController.html":{},"classes/AdminProductQueryDto.html":{},"controllers/AdminProductsController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomerReportRow.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"classes/OrderItemDto.html":{},"modules/OrdersModule.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"entities/Product.html":{},"interfaces/ProductPerformanceRow.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"interfaces/SalesReportRow.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateStockDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"entities/Users.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["exports",{"_index":79,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/OrdersModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":255,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AuthController.html":{},"injectables/RefreshTokenStrategy.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"dependencies.html":{},"license.html":{}}}],["extends",{"_index":1253,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UpdateUserDto.html":{}}}],["extra",{"_index":744,"title":{},"body":{"modules/AppModule.html":{}}}],["extracterrors",{"_index":1987,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["extracterrors(child",{"_index":2002,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["extracterrors(error",{"_index":2004,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["extractjwt",{"_index":1308,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":1319,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromextractors",{"_index":1597,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["extracts",{"_index":1296,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["fabric",{"_index":1049,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["failed",{"_index":1972,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["false",{"_index":39,"title":{},"body":{"entities/Address.html":{},"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"modules/AppModule.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"classes/OrderItemDto.html":{},"entities/Product.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"entities/Users.html":{}}}],["false})@column({type",{"_index":1441,"title":{},"body":{"entities/Product.html":{}}}],["false})@isboolean()@isoptional",{"_index":1015,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["false})@isboolean()@isoptional()@transform",{"_index":1013,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["false})@isenum(orderstatus)@isoptional",{"_index":1794,"title":{},"body":{"classes/UpdateOrderDto.html":{}}}],["false})@isenum(productcategory)@isoptional",{"_index":1801,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["false})@isnumber()@min(0)@isoptional",{"_index":1027,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{}}}],["false})@isoptional()@isboolean",{"_index":574,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["false})@isoptional()@isstring",{"_index":1075,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["false})@isoptional()@isstring()@isphonenumber('bd",{"_index":1081,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["false})@isstring()@isoptional",{"_index":934,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/OrderItemDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{}}}],["false})@isurl()@isoptional",{"_index":1011,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["fashion",{"_index":1057,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["fashion'})@isstring()@isoptional",{"_index":976,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["fast",{"_index":2168,"title":{},"body":{"index.html":{}}}],["featured",{"_index":361,"title":{},"body":{"classes/AdminProductQueryDto.html":{},"controllers/AdminProductsController.html":{},"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/UpdateProductDto.html":{}}}],["featured')@apioperation({summary",{"_index":477,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["features",{"_index":1810,"title":{},"body":{"classes/UpdateProductDto.html":{},"index.html":{}}}],["fetch",{"_index":372,"title":{},"body":{"classes/AdminProductQueryDto.html":{},"interfaces/SalesReportRow.html":{}}}],["few",{"_index":2169,"title":{},"body":{"index.html":{}}}],["field",{"_index":401,"title":{},"body":{"classes/AdminProductQueryDto.html":{},"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["file",{"_index":5,"title":{},"body":{"entities/Address.html":{},"modules/AdminModule.html":{},"controllers/AdminOrdersController.html":{},"classes/AdminProductQueryDto.html":{},"controllers/AdminProductsController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomerReportRow.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"classes/OrderItemDto.html":{},"modules/OrdersModule.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"entities/Product.html":{},"interfaces/ProductPerformanceRow.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"interfaces/SalesReportRow.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateStockDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"entities/Users.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"coverage.html":{}}}],["filename",{"_index":319,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["filename=${filename",{"_index":328,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["files",{"_index":2249,"title":{},"body":{"license.html":{}}}],["filledtrend",{"_index":1235,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"interfaces/SalesReportRow.html":{},"injectables/UsersService.html":{}}}],["filltrend",{"_index":1917,"title":{},"body":{"injectables/UsersService.html":{}}}],["filltrend(trendarr",{"_index":1228,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"interfaces/SalesReportRow.html":{},"injectables/UsersService.html":{}}}],["filter",{"_index":349,"title":{},"body":{"classes/AdminProductQueryDto.html":{},"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{}}}],["filter'})@isoptional()@isnumber()@min(0)@transform",{"_index":377,"title":{},"body":{"classes/AdminProductQueryDto.html":{}}}],["filtering",{"_index":451,"title":{},"body":{"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{}}}],["finalsortby",{"_index":1164,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["findall",{"_index":116,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"injectables/UsersService.html":{}}}],["findall(@query",{"_index":516,"title":{},"body":{"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{}}}],["findall(page",{"_index":136,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["findall(querydto",{"_index":449,"title":{},"body":{"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"interfaces/CustomerReportRow.html":{},"injectables/ProductsService.html":{},"injectables/UsersService.html":{}}}],["findone",{"_index":117,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminUserController.html":{},"injectables/ProductsService.html":{},"injectables/UsersService.html":{}}}],["findone(@param('id",{"_index":311,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminUserController.html":{}}}],["findone(id",{"_index":161,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminUserController.html":{},"interfaces/CustomerReportRow.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"injectables/UsersService.html":{}}}],["findoptionswhere",{"_index":1491,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["first",{"_index":566,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomerReportRow.html":{},"interfaces/SalesReportRow.html":{},"injectables/UsersService.html":{}}}],["firstname",{"_index":555,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomerReportRow.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{},"entities/Users.html":{},"injectables/UsersService.html":{}}}],["fit",{"_index":1002,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["fitness",{"_index":2281,"title":{},"body":{"license.html":{}}}],["five",{"_index":1813,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["fns",{"_index":254,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"interfaces/CustomerReportRow.html":{},"interfaces/SalesReportRow.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["focus",{"_index":2177,"title":{},"body":{"index.html":{}}}],["follow",{"_index":2208,"title":{},"body":{"index.html":{}}}],["following",{"_index":2266,"title":{},"body":{"license.html":{}}}],["food",{"_index":1480,"title":{},"body":{"entities/Product.html":{},"miscellaneous/enumerations.html":{}}}],["forbidden",{"_index":446,"title":{},"body":{"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{}}}],["forbidden'})@apiresponse({status",{"_index":608,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["forbiddenexception",{"_index":1612,"title":{},"body":{"guards/RolesGuard.html":{}}}],["forbiddenexception('user",{"_index":1624,"title":{},"body":{"guards/RolesGuard.html":{}}}],["forest",{"_index":1047,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["formal_wear",{"_index":2109,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["format",{"_index":612,"title":{},"body":{"controllers/AdminUserController.html":{},"classes/CreateUserDto.html":{},"entities/Product.html":{},"interfaces/SalesReportRow.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["format(item.date",{"_index":1779,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["format(new",{"_index":1661,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["formatnestedvalidationerrors",{"_index":2005,"title":{},"body":{"classes/ValidationExceptionFilter.html":{}}}],["formatnestedvalidationerrors(errors",{"_index":1985,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["formattederrors",{"_index":1986,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["formattederrors.push",{"_index":1997,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["formatvalidationerrors",{"_index":2006,"title":{},"body":{"classes/ValidationExceptionFilter.html":{}}}],["formatvalidationerrors(errors",{"_index":1974,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["found",{"_index":225,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"interfaces/CustomerReportRow.html":{},"injectables/JwtStrategy.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"interfaces/SalesReportRow.html":{},"injectables/UsersService.html":{}}}],["found'})@httpcode(httpstatus.ok",{"_index":615,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["framework",{"_index":2123,"title":{},"body":{"index.html":{}}}],["free",{"_index":2243,"title":{},"body":{"license.html":{}}}],["front.jpg",{"_index":1851,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["full",{"_index":2204,"title":{},"body":{"index.html":{}}}],["function",{"_index":2036,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":2117,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":2265,"title":{},"body":{"license.html":{}}}],["g",{"_index":2172,"title":{},"body":{"index.html":{}}}],["generate",{"_index":1739,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["generatecustomerreport",{"_index":1918,"title":{},"body":{"injectables/UsersService.html":{}}}],["generatemasterreport",{"_index":1673,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["generateproductperformancereport",{"_index":1554,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["generates",{"_index":854,"title":{},"body":{"injectables/AuthService.html":{}}}],["generatesalesreport",{"_index":1655,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["generatetokens",{"_index":842,"title":{},"body":{"injectables/AuthService.html":{}}}],["generatetokens(user",{"_index":851,"title":{},"body":{"injectables/AuthService.html":{}}}],["generation",{"_index":867,"title":{},"body":{"injectables/AuthService.html":{}}}],["generic",{"_index":699,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{}}}],["get(':id",{"_index":310,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminUserController.html":{}}}],["get(':id')@apioperation({summary",{"_index":162,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminUserController.html":{}}}],["get('analytics",{"_index":539,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["get('analytics')@apioperation({summary",{"_index":455,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["get('analytics/customer",{"_index":275,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["get('analytics/customer')@apioperation({summary",{"_index":184,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["get('analytics/revenue",{"_index":199,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["get('analytics/revenue')@apioperation({summary",{"_index":193,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["get('analytics/summary",{"_index":277,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["get('analytics/summary')@apioperation({summary",{"_index":167,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["get('logout",{"_index":800,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('logout')@useguards(undefined)@httpcode(httpstatus.ok",{"_index":771,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('refresh",{"_index":806,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('refresh')@useguards(undefined)@httpcode(httpstatus.ok",{"_index":775,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('report/download",{"_index":313,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["get('report/download')@apioperation({summary",{"_index":126,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["get()@apioperation({summary",{"_index":147,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{}}}],["getallusers",{"_index":1919,"title":{},"body":{"injectables/UsersService.html":{}}}],["getallusers(userquerydto",{"_index":1131,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["getanalyticssummary",{"_index":118,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["getanalyticssummary(startdate",{"_index":166,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["getbestsellers",{"_index":1521,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["getbycategory",{"_index":1571,"title":{},"body":{"injectables/ProductsService.html":{}}}],["getbycategory(category",{"_index":1523,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["getcustomeranalytics",{"_index":119,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["getcustomeranalytics(startdate",{"_index":183,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["getdailyactivecustomers",{"_index":1212,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["getdailyactivecustomers(startdate",{"_index":1216,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["getdailynewusers",{"_index":1191,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["getdailynewusers(startdate",{"_index":1199,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["getdailytrends",{"_index":1741,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["getdailytrends(start",{"_index":1744,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["getfeatured",{"_index":1518,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["getnewarrivals",{"_index":1520,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["getonsale",{"_index":1522,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["getorderanalytics(startdate",{"_index":1710,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["getproductanalytics",{"_index":430,"title":{},"body":{"controllers/AdminProductsController.html":{},"injectables/ProductsService.html":{}}}],["getproductanalytics(days",{"_index":454,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["getproductanalytics(startdate",{"_index":1524,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["getrawmany",{"_index":1197,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"interfaces/SalesReportRow.html":{},"injectables/UsersService.html":{}}}],["getrawone",{"_index":1208,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"injectables/UsersService.html":{}}}],["getrawone().then(r",{"_index":1221,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["getrevenueanalytics",{"_index":120,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["getrevenueanalytics(startdate",{"_index":188,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["getrevenuebreakdown",{"_index":121,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["getrevenuebreakdown(@query('days",{"_index":301,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["getrevenuebreakdown(days",{"_index":198,"title":{},"body":{"controllers/AdminOrdersController.html":{},"interfaces/SalesReportRow.html":{}}}],["getsalesreportdata",{"_index":1706,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["getting",{"_index":2119,"title":{"index.html":{},"license.html":{}},"body":{}}],["getuseranalytics",{"_index":1172,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["gift",{"_index":932,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{}}}],["granted",{"_index":2242,"title":{},"body":{"license.html":{}}}],["graph",{"_index":2198,"title":{},"body":{"index.html":{}}}],["greater",{"_index":1869,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["green",{"_index":1048,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["groupby('date",{"_index":1196,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"interfaces/SalesReportRow.html":{},"injectables/UsersService.html":{}}}],["groupby('orderitem.productid",{"_index":1542,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["grow",{"_index":2217,"title":{},"body":{"index.html":{}}}],["gsm",{"_index":1052,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["guard",{"_index":1250,"title":{"guards/RolesGuard.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"overview.html":{}}}],["guards",{"_index":1607,"title":{},"body":{"guards/RolesGuard.html":{}}}],["guards/jwt",{"_index":822,"title":{},"body":{"modules/AuthModule.html":{}}}],["guards/roles.guard",{"_index":823,"title":{},"body":{"modules/AuthModule.html":{}}}],["handle",{"_index":1964,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["handlerequest",{"_index":1256,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["handlerequest(err",{"_index":1264,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["handlers",{"_index":2318,"title":{},"body":{"miscellaneous/variables.html":{}}}],["handling",{"_index":594,"title":{},"body":{"controllers/AdminUserController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["hands",{"_index":2192,"title":{},"body":{"index.html":{}}}],["handy",{"_index":2182,"title":{},"body":{"index.html":{}}}],["hashedpassword",{"_index":1120,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["hashedrefreshtoken",{"_index":903,"title":{},"body":{"injectables/AuthService.html":{}}}],["hasrole",{"_index":1627,"title":{},"body":{"guards/RolesGuard.html":{}}}],["header",{"_index":1686,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["headers",{"_index":1297,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["help",{"_index":2196,"title":{},"body":{"index.html":{}}}],["here",{"_index":2225,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":2241,"title":{},"body":{"license.html":{}}}],["hh:mm:ss",{"_index":1663,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["high",{"_index":1805,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["history",{"_index":1332,"title":{},"body":{"entities/Order.html":{}}}],["holders",{"_index":2287,"title":{},"body":{"license.html":{}}}],["home",{"_index":1477,"title":{},"body":{"entities/Product.html":{},"miscellaneous/enumerations.html":{}}}],["hoodies",{"_index":2105,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["host",{"_index":725,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["host.switchtohttp",{"_index":1947,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["httpcode",{"_index":625,"title":{},"body":{"controllers/AdminUserController.html":{},"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok",{"_index":649,"title":{},"body":{"controllers/AdminUserController.html":{},"controllers/AuthController.html":{}}}],["httponly",{"_index":794,"title":{},"body":{"controllers/AuthController.html":{}}}],["https://example.com/images/classic",{"_index":1009,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["https://example.com/images/jeans",{"_index":1850,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["https://example.com/images/premium",{"_index":1821,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["https://example.com/profile.jpg",{"_index":1085,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["https://nestjs.com",{"_index":2231,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":624,"title":{},"body":{"controllers/AdminUserController.html":{},"controllers/AuthController.html":{}}}],["httpstatus.forbidden",{"_index":641,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["httpstatus.not_found",{"_index":643,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["httpstatus.ok",{"_index":638,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["httpstatus.unauthorized",{"_index":639,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["id",{"_index":12,"title":{},"body":{"entities/Address.html":{},"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"injectables/AuthService.html":{},"classes/CreateOrderDto.html":{},"interfaces/CustomerReportRow.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"classes/OrderItemDto.html":{},"entities/Product.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"entities/Roles.html":{},"interfaces/SalesReportRow.html":{},"entities/Users.html":{},"injectables/UsersService.html":{}}}],["id'})@apiresponse({status",{"_index":607,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["identifier",{"_index":1433,"title":{},"body":{"entities/Product.html":{},"coverage.html":{}}}],["ignoreexpiration",{"_index":1320,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["ilike",{"_index":1159,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"injectables/UsersService.html":{}}}],["image",{"_index":969,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomerReportRow.html":{},"classes/UpdateProductDto.html":{},"injectables/UsersService.html":{}}}],["images",{"_index":1413,"title":{},"body":{"entities/Product.html":{},"classes/UpdateProductDto.html":{}}}],["imageurl",{"_index":970,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["implement",{"_index":1269,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["implements",{"_index":1312,"title":{},"body":{"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["implied",{"_index":2277,"title":{},"body":{"license.html":{}}}],["import",{"_index":57,"title":{},"body":{"entities/Address.html":{},"modules/AdminModule.html":{},"controllers/AdminOrdersController.html":{},"classes/AdminProductQueryDto.html":{},"controllers/AdminProductsController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomerReportRow.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"classes/OrderItemDto.html":{},"modules/OrdersModule.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{},"entities/Product.html":{},"interfaces/ProductPerformanceRow.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"interfaces/SalesReportRow.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateStockDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"entities/Users.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["imports",{"_index":93,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/OrdersModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{}}}],["inactive",{"_index":883,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["included",{"_index":2271,"title":{},"body":{"license.html":{}}}],["including",{"_index":754,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Product.html":{},"license.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"entities/Address.html":{},"controllers/AdminOrdersController.html":{},"classes/AdminProductQueryDto.html":{},"controllers/AdminProductsController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomerReportRow.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"classes/OrderItemDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"entities/Product.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"injectables/RefreshTokenStrategy.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"interfaces/SalesReportRow.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateStockDto.html":{},"classes/UserQueryDto.html":{},"entities/Users.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"entities/Address.html":{},"modules/AdminModule.html":{},"controllers/AdminOrdersController.html":{},"classes/AdminProductQueryDto.html":{},"controllers/AdminProductsController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomerReportRow.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"classes/OrderItemDto.html":{},"modules/OrdersModule.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"entities/Product.html":{},"interfaces/ProductPerformanceRow.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"interfaces/SalesReportRow.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateStockDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"entities/Users.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["information",{"_index":552,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"injectables/JwtStrategy.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{},"entities/Product.html":{},"index.html":{}}}],["infrastructure",{"_index":2179,"title":{},"body":{"index.html":{}}}],["inject",{"_index":748,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["inject(jwtconfig.key",{"_index":869,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["injectable",{"_index":838,"title":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/ProductsService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/CustomerReportRow.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"interfaces/SalesReportRow.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":839,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/ProductsService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":864,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CustomerReportRow.html":{},"injectables/JwtStrategy.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"interfaces/SalesReportRow.html":{},"injectables/UsersService.html":{}}}],["injectrepository(address",{"_index":1644,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["injectrepository(order",{"_index":1113,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"interfaces/SalesReportRow.html":{},"injectables/UsersService.html":{}}}],["injectrepository(orderitem",{"_index":1496,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"interfaces/SalesReportRow.html":{}}}],["injectrepository(product",{"_index":1494,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"interfaces/SalesReportRow.html":{}}}],["injectrepository(roles",{"_index":1111,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["injectrepository(users",{"_index":868,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CustomerReportRow.html":{},"injectables/JwtStrategy.html":{},"interfaces/SalesReportRow.html":{},"injectables/UsersService.html":{}}}],["innerjoin('orderitem.order",{"_index":1770,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["innerjoin('orderitem.product",{"_index":1771,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["insensitive",{"_index":419,"title":{},"body":{"classes/AdminProductQueryDto.html":{}}}],["insensitive)'})@isoptional()@isstring",{"_index":389,"title":{},"body":{"classes/AdminProductQueryDto.html":{}}}],["inside",{"_index":1799,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["install",{"_index":2171,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":2134,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":893,"title":{},"body":{"injectables/AuthService.html":{}}}],["instructions",{"_index":979,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/UpdateProductDto.html":{}}}],["int",{"_index":1380,"title":{},"body":{"entities/OrderItem.html":{},"entities/Product.html":{}}}],["integer",{"_index":1457,"title":{},"body":{"entities/Product.html":{}}}],["interact",{"_index":2199,"title":{},"body":{"index.html":{}}}],["interface",{"_index":688,"title":{"interfaces/CustomerReportRow.html":{},"interfaces/JwtPayload.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"interfaces/ProductPerformanceRow.html":{},"interfaces/SalesReportRow.html":{},"interfaces/ValidationErrorItem.html":{}},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/CustomerReportRow.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"interfaces/SalesReportRow.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"coverage.html":{}}}],["interfaces",{"_index":1093,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"interfaces/JwtPayload.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"interfaces/ProductPerformanceRow.html":{},"interfaces/SalesReportRow.html":{},"interfaces/ValidationErrorItem.html":{},"overview.html":{}}}],["interfaces/jwt",{"_index":1310,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["internalservererrorexception",{"_index":863,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["internalservererrorexception('error",{"_index":894,"title":{},"body":{"injectables/AuthService.html":{}}}],["internalservererrorexception('failed",{"_index":1150,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["interval",{"_index":189,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["invalid",{"_index":501,"title":{},"body":{"controllers/AdminProductsController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["inventory",{"_index":1410,"title":{},"body":{"entities/Product.html":{}}}],["iron",{"_index":986,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["isactive",{"_index":336,"title":{},"body":{"classes/AdminProductQueryDto.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"interfaces/CustomerReportRow.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{},"entities/Product.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductDto.html":{},"entities/Users.html":{},"injectables/UsersService.html":{}}}],["isarray",{"_index":942,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/OrderItemDto.html":{},"classes/UpdateProductDto.html":{}}}],["isbestseller",{"_index":337,"title":{},"body":{"classes/AdminProductQueryDto.html":{},"controllers/AdminProductsController.html":{},"classes/CreateProductDto.html":{},"entities/Product.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductDto.html":{}}}],["isboolean",{"_index":407,"title":{},"body":{"classes/AdminProductQueryDto.html":{},"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"classes/CreateProductDto.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{},"classes/UpdateProductDto.html":{}}}],["isdate",{"_index":586,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["isdatestring",{"_index":685,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"classes/CreateUserDto.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{},"classes/UpdateUserDto.html":{}}}],["isdefault",{"_index":13,"title":{},"body":{"entities/Address.html":{}}}],["isemail",{"_index":582,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/UpdateUserDto.html":{}}}],["isemailverified",{"_index":556,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{},"entities/Users.html":{}}}],["isenum",{"_index":409,"title":{},"body":{"classes/AdminProductQueryDto.html":{},"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"classes/CreateProductDto.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{}}}],["isenum(orderdirection",{"_index":426,"title":{},"body":{"classes/AdminProductQueryDto.html":{},"classes/UserQueryDto.html":{}}}],["isenum(orderstatus",{"_index":1797,"title":{},"body":{"classes/UpdateOrderDto.html":{}}}],["isenum(productcategory",{"_index":420,"title":{},"body":{"classes/AdminProductQueryDto.html":{},"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["isenum(productsortby",{"_index":425,"title":{},"body":{"classes/AdminProductQueryDto.html":{}}}],["isenum(role",{"_index":591,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{}}}],["isfeatured",{"_index":338,"title":{},"body":{"classes/AdminProductQueryDto.html":{},"controllers/AdminProductsController.html":{},"classes/CreateProductDto.html":{},"entities/Product.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductDto.html":{}}}],["isglobal",{"_index":721,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":686,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{},"classes/UpdateStockDto.html":{},"classes/UserQueryDto.html":{}}}],["isnewarrival",{"_index":339,"title":{},"body":{"classes/AdminProductQueryDto.html":{},"controllers/AdminProductsController.html":{},"classes/CreateProductDto.html":{},"entities/Product.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductDto.html":{}}}],["isnotempty",{"_index":941,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/OrderItemDto.html":{}}}],["isnumber",{"_index":406,"title":{},"body":{"classes/AdminProductQueryDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/OrderItemDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{}}}],["iso",{"_index":1062,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isobject",{"_index":1036,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["isonsale",{"_index":340,"title":{},"body":{"classes/AdminProductQueryDto.html":{},"controllers/AdminProductsController.html":{},"classes/CreateProductDto.html":{},"entities/Product.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductDto.html":{}}}],["isoptional",{"_index":404,"title":{},"body":{"classes/AdminProductQueryDto.html":{},"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/OrderItemDto.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{}}}],["isoptional()@isenum(orderdirection",{"_index":1874,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["isoptional()@isint()@min(1",{"_index":1868,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["isoptional()@isstring",{"_index":1872,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["ispasswordvalid",{"_index":877,"title":{},"body":{"injectables/AuthService.html":{}}}],["isphonenumber",{"_index":1087,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["isphonenumber('bd",{"_index":1090,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isphoneverified",{"_index":557,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Users.html":{}}}],["ispublic",{"_index":1275,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["isstring",{"_index":405,"title":{},"body":{"classes/AdminProductQueryDto.html":{},"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/OrderItemDto.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{}}}],["isurl",{"_index":1035,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["isuuid",{"_index":583,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{}}}],["item",{"_index":953,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{},"interfaces/SalesReportRow.html":{}}}],["item.category",{"_index":1776,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["item.entity",{"_index":1362,"title":{},"body":{"entities/Order.html":{},"modules/OrdersModule.html":{},"entities/Product.html":{},"interfaces/ProductPerformanceRow.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"interfaces/SalesReportRow.html":{}}}],["item.entity.ts",{"_index":1370,"title":{},"body":{"entities/OrderItem.html":{},"coverage.html":{}}}],["item.entity.ts:11",{"_index":1375,"title":{},"body":{"entities/OrderItem.html":{}}}],["item.entity.ts:14",{"_index":1379,"title":{},"body":{"entities/OrderItem.html":{}}}],["item.entity.ts:18",{"_index":1374,"title":{},"body":{"entities/OrderItem.html":{}}}],["item.entity.ts:22",{"_index":1378,"title":{},"body":{"entities/OrderItem.html":{}}}],["item.entity.ts:25",{"_index":1381,"title":{},"body":{"entities/OrderItem.html":{}}}],["item.entity.ts:28",{"_index":1376,"title":{},"body":{"entities/OrderItem.html":{}}}],["item.entity.ts:31",{"_index":1382,"title":{},"body":{"entities/OrderItem.html":{}}}],["item.entity.ts:8",{"_index":1372,"title":{},"body":{"entities/OrderItem.html":{}}}],["item.price",{"_index":1670,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["item.product.name",{"_index":1668,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["item.productid",{"_index":1649,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["item.quantity",{"_index":1669,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["item.total",{"_index":1671,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["items",{"_index":368,"title":{},"body":{"classes/AdminProductQueryDto.html":{},"classes/AdminUserQueryDto.html":{},"classes/CreateOrderDto.html":{},"interfaces/CustomerReportRow.html":{},"entities/Order.html":{},"classes/OrderItemDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"interfaces/SalesReportRow.html":{},"injectables/UsersService.html":{}}}],["items.product",{"_index":1657,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["jackets",{"_index":2104,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["jeans",{"_index":1807,"title":{},"body":{"classes/UpdateProductDto.html":{},"miscellaneous/enumerations.html":{}}}],["jeans.jpg",{"_index":1822,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["job",{"_index":2211,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":2213,"title":{},"body":{"index.html":{}}}],["john",{"_index":1088,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["john'})@isnotempty()@isstring",{"_index":1072,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["john.doe@example.com",{"_index":1089,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["john.doe@example.com'})@isnotempty()@isemail",{"_index":1070,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["join",{"_index":2223,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":61,"title":{},"body":{"entities/Address.html":{},"entities/Order.html":{},"entities/OrderItem.html":{}}}],["joined",{"_index":1095,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["jointable",{"_index":1905,"title":{},"body":{"entities/Users.html":{}}}],["json",{"_index":1460,"title":{},"body":{"entities/Product.html":{}}}],["json.stringify(exceptionresponse",{"_index":1957,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["jsonb",{"_index":1339,"title":{},"body":{"entities/Order.html":{},"entities/Product.html":{}}}],["jwt",{"_index":763,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/RefreshTokenStrategy.html":{},"dependencies.html":{}}}],["jwtauthguard",{"_index":235,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{},"overview.html":{}}}],["jwtconfig",{"_index":825,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["jwtconfig.key",{"_index":831,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtconfiguration",{"_index":847,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["jwtconfiguration.accesstokensecret",{"_index":1314,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtconfiguration.refreshtokensecret",{"_index":1595,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["jwtfromrequest",{"_index":1318,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["jwtmodule",{"_index":818,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":830,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":1285,"title":{"interfaces/JwtPayload.html":{}},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["jwtservice",{"_index":846,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{}}}],["jwtstrategy",{"_index":815,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":2228,"title":{},"body":{"index.html":{}}}],["key",{"_index":1229,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"interfaces/SalesReportRow.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["kids_wear",{"_index":2112,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["kind",{"_index":2276,"title":{},"body":{"license.html":{}}}],["l",{"_index":1041,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["label",{"_index":14,"title":{},"body":{"entities/Address.html":{}}}],["last",{"_index":576,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomerReportRow.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{},"entities/Product.html":{},"interfaces/SalesReportRow.html":{},"injectables/UsersService.html":{}}}],["lastloginafter",{"_index":659,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{}}}],["lastloginat",{"_index":708,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/CustomerReportRow.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{},"entities/Users.html":{},"injectables/UsersService.html":{}}}],["lastloginbefore",{"_index":660,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{}}}],["lastname",{"_index":558,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomerReportRow.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{},"entities/Users.html":{},"injectables/UsersService.html":{}}}],["learn",{"_index":2185,"title":{},"body":{"index.html":{}}}],["leftjoin('orderitem.order",{"_index":1536,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["leftjoin('orderitem.product",{"_index":1535,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["leftjoinandselect('user.roles",{"_index":1156,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["legend",{"_index":75,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/OrdersModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":27,"title":{},"body":{"entities/Address.html":{},"entities/Product.html":{},"entities/Users.html":{}}}],["lessthan",{"_index":1100,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["lessthan(startdate",{"_index":1185,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["lessthanorequal",{"_index":1493,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"interfaces/SalesReportRow.html":{}}}],["lessthanorequal(enddate",{"_index":1527,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["liability",{"_index":2291,"title":{},"body":{"license.html":{}}}],["liable",{"_index":2288,"title":{},"body":{"license.html":{}}}],["license",{"_index":2234,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["licensed",{"_index":2216,"title":{},"body":{"index.html":{}}}],["light",{"_index":1848,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["like(`%${search",{"_index":1135,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["limit",{"_index":138,"title":{},"body":{"controllers/AdminOrdersController.html":{},"classes/AdminProductQueryDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"interfaces/CustomerReportRow.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"classes/UserQueryDto.html":{},"injectables/UsersService.html":{}}}],["limit(10",{"_index":1545,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["limit).take(limit",{"_index":1169,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"injectables/UsersService.html":{}}}],["limitation",{"_index":2253,"title":{},"body":{"license.html":{}}}],["limited",{"_index":2278,"title":{},"body":{"license.html":{}}}],["line",{"_index":1636,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["linkedin",{"_index":2210,"title":{},"body":{"index.html":{}}}],["list",{"_index":602,"title":{},"body":{"controllers/AdminUserController.html":{},"classes/CreateOrderDto.html":{},"interfaces/CustomerReportRow.html":{},"classes/OrderItemDto.html":{},"injectables/UsersService.html":{}}}],["literal",{"_index":1348,"title":{},"body":{"entities/Order.html":{}}}],["local",{"_index":2074,"title":{},"body":{"dependencies.html":{}}}],["log",{"_index":1283,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["logged",{"_index":805,"title":{},"body":{"controllers/AuthController.html":{}}}],["logger",{"_index":739,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["logger(validationexceptionfilter.name",{"_index":1944,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["logging",{"_index":738,"title":{},"body":{"modules/AppModule.html":{}}}],["login",{"_index":669,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{}}}],["login'})@apibody({type",{"_index":760,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(logindto",{"_index":757,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logindto",{"_index":758,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["logindto.email",{"_index":873,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindto.password",{"_index":879,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindto})@apiresponse({status",{"_index":761,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout",{"_index":755,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logout(@req",{"_index":802,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(req",{"_index":770,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(userid",{"_index":856,"title":{},"body":{"injectables/AuthService.html":{}}}],["logschemasync",{"_index":745,"title":{},"body":{"modules/AppModule.html":{}}}],["look",{"_index":206,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["looking",{"_index":2159,"title":{},"body":{"index.html":{}}}],["loop",{"_index":2207,"title":{},"body":{"index.html":{}}}],["low",{"_index":984,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["lowstock",{"_index":1549,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["m",{"_index":954,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/OrderItemDto.html":{}}}],["machine",{"_index":980,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["make",{"_index":1620,"title":{},"body":{"guards/RolesGuard.html":{}}}],["makes",{"_index":2166,"title":{},"body":{"index.html":{}}}],["management",{"_index":595,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["manages",{"_index":866,"title":{},"body":{"injectables/AuthService.html":{}}}],["managing",{"_index":2178,"title":{},"body":{"index.html":{}}}],["manytomany",{"_index":1606,"title":{},"body":{"entities/Roles.html":{},"entities/Users.html":{}}}],["manytomany(undefined",{"_index":1604,"title":{},"body":{"entities/Roles.html":{},"entities/Users.html":{}}}],["manytoone",{"_index":60,"title":{},"body":{"entities/Address.html":{},"entities/Order.html":{},"entities/OrderItem.html":{}}}],["manytoone(undefined",{"_index":52,"title":{},"body":{"entities/Address.html":{},"entities/Order.html":{},"entities/OrderItem.html":{}}}],["manytoone(undefined)@joincolumn({name",{"_index":1377,"title":{},"body":{"entities/OrderItem.html":{}}}],["map",{"_index":1231,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"interfaces/SalesReportRow.html":{},"injectables/UsersService.html":{}}}],["marked",{"_index":472,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["master",{"_index":128,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["matching",{"_index":70,"title":{},"body":{"entities/Address.html":{},"modules/AdminModule.html":{},"controllers/AdminOrdersController.html":{},"classes/AdminProductQueryDto.html":{},"controllers/AdminProductsController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomerReportRow.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"classes/OrderItemDto.html":{},"modules/OrdersModule.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"entities/Product.html":{},"interfaces/ProductPerformanceRow.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"interfaces/SalesReportRow.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateStockDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"entities/Users.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["material",{"_index":971,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/UpdateProductDto.html":{}}}],["maternity_wear",{"_index":2113,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["math.ceil(total",{"_index":1171,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["mau",{"_index":2162,"title":{},"body":{"index.html":{}}}],["max",{"_index":687,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"classes/CreateProductDto.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{}}}],["max(100",{"_index":706,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{}}}],["maximum",{"_index":375,"title":{},"body":{"classes/AdminProductQueryDto.html":{}}}],["maxlength",{"_index":1417,"title":{},"body":{"entities/Product.html":{}}}],["maxprice",{"_index":341,"title":{},"body":{"classes/AdminProductQueryDto.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["maxqueryexecutiontime",{"_index":742,"title":{},"body":{"modules/AppModule.html":{}}}],["maxrating",{"_index":342,"title":{},"body":{"classes/AdminProductQueryDto.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["maxstock",{"_index":343,"title":{},"body":{"classes/AdminProductQueryDto.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["means",{"_index":1616,"title":{},"body":{"guards/RolesGuard.html":{}}}],["medium",{"_index":1849,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["merchantability",{"_index":2280,"title":{},"body":{"license.html":{}}}],["merge",{"_index":2256,"title":{},"body":{"license.html":{}}}],["message",{"_index":695,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{},"classes/UpdateStockDto.html":{},"classes/UserQueryDto.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["messages",{"_index":1961,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["meta",{"_index":705,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/CustomerReportRow.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"injectables/UsersService.html":{}}}],["metadata",{"_index":606,"title":{},"body":{"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["method",{"_index":937,"title":{},"body":{"classes/CreateOrderDto.html":{},"entities/Order.html":{},"classes/OrderItemDto.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["methods",{"_index":113,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/ProductsService.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"interfaces/SalesReportRow.html":{},"injectables/UsersService.html":{},"classes/ValidationExceptionFilter.html":{}}}],["metrics",{"_index":1730,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["mid",{"_index":1856,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["min",{"_index":408,"title":{},"body":{"classes/AdminProductQueryDto.html":{},"classes/AdminUserQueryDto.html":{},"classes/CreateProductDto.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateStockDto.html":{},"classes/UserQueryDto.html":{}}}],["min(0",{"_index":421,"title":{},"body":{"classes/AdminProductQueryDto.html":{},"classes/CreateProductDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateStockDto.html":{}}}],["min(1",{"_index":424,"title":{},"body":{"classes/AdminProductQueryDto.html":{},"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{},"classes/UserQueryDto.html":{}}}],["minimum",{"_index":384,"title":{},"body":{"classes/AdminProductQueryDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/OrderItemDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateStockDto.html":{}}}],["minlength",{"_index":1327,"title":{},"body":{"classes/LoginDto.html":{}}}],["minlength(6",{"_index":1330,"title":{},"body":{"classes/LoginDto.html":{}}}],["minprice",{"_index":344,"title":{},"body":{"classes/AdminProductQueryDto.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["minrating",{"_index":345,"title":{},"body":{"classes/AdminProductQueryDto.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["minstock",{"_index":346,"title":{},"body":{"classes/AdminProductQueryDto.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["miscellaneous",{"_index":2085,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":2215,"title":{},"body":{"index.html":{},"license.html":{}}}],["mm",{"_index":1064,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/SalesReportRow.html":{}}}],["mode",{"_index":2138,"title":{},"body":{"index.html":{}}}],["modern",{"_index":1808,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["modify",{"_index":2255,"title":{},"body":{"license.html":{}}}],["module",{"_index":71,"title":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/OrdersModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/OrdersModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":73,"title":{"modules.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/OrdersModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["month",{"_index":192,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["more",{"_index":2158,"title":{},"body":{"index.html":{}}}],["morethanorequal",{"_index":1492,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"interfaces/SalesReportRow.html":{}}}],["morethanorequal(startdate",{"_index":1526,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["mostprofitable",{"_index":1547,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["multiple",{"_index":216,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["myśliwiec",{"_index":2229,"title":{},"body":{"index.html":{}}}],["name",{"_index":68,"title":{},"body":{"entities/Address.html":{},"controllers/AdminOrdersController.html":{},"classes/AdminProductQueryDto.html":{},"controllers/AdminProductsController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomerReportRow.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"injectables/RefreshTokenStrategy.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"interfaces/SalesReportRow.html":{},"classes/UpdateProductDto.html":{},"injectables/UsersService.html":{},"classes/ValidationExceptionFilter.html":{},"miscellaneous/enumerations.html":{}}}],["name'})@isoptional()@isstring",{"_index":567,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["namefromemail",{"_index":888,"title":{},"body":{"injectables/AuthService.html":{}}}],["navy",{"_index":956,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/OrderItemDto.html":{}}}],["neck",{"_index":1055,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["need",{"_index":2202,"title":{},"body":{"index.html":{}}}],["needed",{"_index":1058,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["needed.'})@isstring()@isoptional",{"_index":989,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["negative",{"_index":535,"title":{},"body":{"controllers/AdminProductsController.html":{},"classes/UpdateStockDto.html":{}}}],["negative.'})@apibody({type",{"_index":498,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["nest",{"_index":2129,"title":{},"body":{"index.html":{}}}],["nested",{"_index":1966,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["nestframework",{"_index":2233,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":2150,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":94,"title":{},"body":{"modules/AdminModule.html":{},"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/CustomerReportRow.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"modules/OrdersModule.html":{},"interfaces/ProductPerformanceRow.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"interfaces/SalesReportRow.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":716,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/RefreshTokenStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1267,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":819,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"dependencies.html":{}}}],["nestjs/mau",{"_index":2173,"title":{},"body":{"index.html":{}}}],["nestjs/passport",{"_index":782,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":2058,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":250,"title":{},"body":{"controllers/AdminOrdersController.html":{},"classes/AdminProductQueryDto.html":{},"controllers/AdminProductsController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"controllers/AuthController.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/OrderItemDto.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{},"entities/Product.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateStockDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":96,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/CustomerReportRow.html":{},"injectables/JwtStrategy.html":{},"modules/OrdersModule.html":{},"interfaces/ProductPerformanceRow.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"interfaces/SalesReportRow.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":320,"title":{},"body":{"controllers/AdminOrdersController.html":{},"classes/AdminProductQueryDto.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"injectables/AuthService.html":{},"classes/CreateProductDto.html":{},"interfaces/CustomerReportRow.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/Product.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"interfaces/SalesReportRow.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateStockDto.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"coverage.html":{}}}],["newuser",{"_index":1126,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["newuserstrendraw",{"_index":1198,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["node.js",{"_index":2122,"title":{},"body":{"index.html":{}}}],["noninfringement",{"_index":2284,"title":{},"body":{"license.html":{}}}],["not'})@apiresponse({status",{"_index":478,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["note",{"_index":1653,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["notes",{"_index":921,"title":{},"body":{"classes/CreateOrderDto.html":{},"entities/Order.html":{},"classes/OrderItemDto.html":{},"classes/UpdateOrderDto.html":{}}}],["notfoundexception",{"_index":1097,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"interfaces/SalesReportRow.html":{},"injectables/UsersService.html":{}}}],["notfoundexception('no",{"_index":1140,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["notfoundexception(`product",{"_index":1515,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"interfaces/SalesReportRow.html":{}}}],["notfoundexception(`user",{"_index":1141,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["notice",{"_index":2269,"title":{},"body":{"license.html":{}}}],["now",{"_index":541,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["npm",{"_index":2133,"title":{},"body":{"index.html":{}}}],["null",{"_index":897,"title":{},"body":{"injectables/AuthService.html":{},"entities/Order.html":{},"entities/Users.html":{}}}],["nullable",{"_index":42,"title":{},"body":{"entities/Address.html":{},"entities/Order.html":{},"entities/Product.html":{},"entities/Users.html":{}}}],["number",{"_index":137,"title":{},"body":{"controllers/AdminOrdersController.html":{},"classes/AdminProductQueryDto.html":{},"controllers/AdminProductsController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomerReportRow.html":{},"interfaces/JwtPayload.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"classes/OrderItemDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"entities/Product.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"entities/Roles.html":{},"interfaces/SalesReportRow.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateStockDto.html":{},"classes/UserQueryDto.html":{},"injectables/UsersService.html":{}}}],["number'})@isoptional()@isstring",{"_index":578,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["number})@apiquery({name",{"_index":153,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{}}}],["number})@apiresponse({status",{"_index":601,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["object",{"_index":550,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"controllers/AuthController.html":{},"classes/LoginDto.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{},"entities/Product.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["object.assign(product",{"_index":1516,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["object.assign(user",{"_index":1143,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["object.keys(constraints).foreach(key",{"_index":1996,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["object.keys(constraints).length",{"_index":1995,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["object.keys(customerdata[0]).map(key",{"_index":1695,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["object.keys(productdata[0]).map(key",{"_index":1703,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["object.keys(salesdata[0]).map(key",{"_index":1685,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["object.values(breakdown",{"_index":1785,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["object.values(role",{"_index":653,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["obtaining",{"_index":2246,"title":{},"body":{"license.html":{}}}],["offer",{"_index":2212,"title":{},"body":{"index.html":{}}}],["officedocument.spreadsheetml.sheet",{"_index":325,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["official",{"_index":2163,"title":{},"body":{"index.html":{}}}],["onetomany",{"_index":1360,"title":{},"body":{"entities/Order.html":{},"entities/Product.html":{},"entities/Users.html":{}}}],["onetomany(undefined",{"_index":1343,"title":{},"body":{"entities/Order.html":{},"entities/Product.html":{},"entities/Users.html":{}}}],["only)'})@apibody({type",{"_index":441,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["only)'})@apiresponse({status",{"_index":217,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{}}}],["open",{"_index":1617,"title":{},"body":{"guards/RolesGuard.html":{},"index.html":{}}}],["operations",{"_index":596,"title":{},"body":{"controllers/AdminUserController.html":{},"injectables/AuthService.html":{}}}],["optional",{"_index":133,"title":{},"body":{"controllers/AdminOrdersController.html":{},"classes/AdminProductQueryDto.html":{},"controllers/AdminProductsController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/OrderItemDto.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{},"entities/Product.html":{},"injectables/ProductsService.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UserQueryDto.html":{},"entities/Users.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["order",{"_index":164,"title":{"entities/Order.html":{}},"body":{"controllers/AdminOrdersController.html":{},"classes/AdminProductQueryDto.html":{},"classes/AdminUserQueryDto.html":{},"classes/CreateOrderDto.html":{},"interfaces/CustomerReportRow.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"classes/OrderItemDto.html":{},"modules/OrdersModule.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{},"interfaces/ProductPerformanceRow.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"interfaces/SalesReportRow.html":{},"classes/UpdateOrderDto.html":{},"entities/Users.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["order\".\"createdat",{"_index":1767,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["order.createdat",{"_index":1540,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"interfaces/SalesReportRow.html":{}}}],["order.dto",{"_index":1637,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["order.dto.ts",{"_index":920,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{},"classes/UpdateOrderDto.html":{},"coverage.html":{}}}],["order.dto.ts:11",{"_index":1389,"title":{},"body":{"classes/OrderItemDto.html":{}}}],["order.dto.ts:14",{"_index":1795,"title":{},"body":{"classes/UpdateOrderDto.html":{}}}],["order.dto.ts:19",{"_index":1391,"title":{},"body":{"classes/OrderItemDto.html":{}}}],["order.dto.ts:23",{"_index":1790,"title":{},"body":{"classes/UpdateOrderDto.html":{}}}],["order.dto.ts:28",{"_index":1392,"title":{},"body":{"classes/OrderItemDto.html":{}}}],["order.dto.ts:34",{"_index":1793,"title":{},"body":{"classes/UpdateOrderDto.html":{}}}],["order.dto.ts:37",{"_index":1387,"title":{},"body":{"classes/OrderItemDto.html":{}}}],["order.dto.ts:62",{"_index":926,"title":{},"body":{"classes/CreateOrderDto.html":{}}}],["order.dto.ts:71",{"_index":940,"title":{},"body":{"classes/CreateOrderDto.html":{}}}],["order.dto.ts:80",{"_index":935,"title":{},"body":{"classes/CreateOrderDto.html":{}}}],["order.entity",{"_index":1383,"title":{},"body":{"entities/OrderItem.html":{}}}],["order.id",{"_index":1660,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["order.items",{"_index":1386,"title":{},"body":{"entities/OrderItem.html":{},"interfaces/SalesReportRow.html":{}}}],["order.items)@joincolumn({name",{"_index":1373,"title":{},"body":{"entities/OrderItem.html":{}}}],["order.notes",{"_index":1651,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["order.notes}\\n[admin",{"_index":1652,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["order.status",{"_index":1650,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["order.totalamount",{"_index":1245,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"interfaces/SalesReportRow.html":{},"injectables/UsersService.html":{}}}],["order.user",{"_index":1896,"title":{},"body":{"entities/Users.html":{}}}],["order.user.email",{"_index":1667,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["order.user.firstname",{"_index":1664,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["order.user.lastname",{"_index":1665,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["order.user?.email",{"_index":1709,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["order.user?.firstname",{"_index":1707,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["order.user?.lastname",{"_index":1708,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["order_by",{"_index":1132,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"classes/UserQueryDto.html":{},"injectables/UsersService.html":{}}}],["order_direction",{"_index":1133,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"classes/UserQueryDto.html":{},"injectables/UsersService.html":{}}}],["order_direction.touppercase",{"_index":1137,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["orderby('\"totalquantity",{"_index":1544,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["orderby('\"totalrevenue",{"_index":1548,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["orderby('date",{"_index":1773,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["ordercount",{"_index":1761,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["orderdirection",{"_index":347,"title":{},"body":{"classes/AdminProductQueryDto.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"classes/UserQueryDto.html":{},"miscellaneous/enumerations.html":{}}}],["orderdirection.desc",{"_index":391,"title":{},"body":{"classes/AdminProductQueryDto.html":{},"classes/UserQueryDto.html":{}}}],["orderid",{"_index":1371,"title":{},"body":{"entities/OrderItem.html":{}}}],["orderids",{"_index":220,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["orderitem",{"_index":1342,"title":{"entities/OrderItem.html":{}},"body":{"entities/Order.html":{},"entities/OrderItem.html":{},"modules/OrdersModule.html":{},"entities/Product.html":{},"interfaces/ProductPerformanceRow.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"interfaces/SalesReportRow.html":{},"coverage.html":{}}}],["orderitem.order",{"_index":1344,"title":{},"body":{"entities/Order.html":{}}}],["orderitem.product",{"_index":1449,"title":{},"body":{"entities/Product.html":{}}}],["orderitemdto",{"_index":923,"title":{"classes/OrderItemDto.html":{}},"body":{"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{},"coverage.html":{}}}],["orderitemrepository",{"_index":1497,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"interfaces/SalesReportRow.html":{}}}],["orderitems",{"_index":1414,"title":{},"body":{"entities/Product.html":{}}}],["orderrepository",{"_index":1114,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"interfaces/SalesReportRow.html":{},"injectables/UsersService.html":{}}}],["orders",{"_index":148,"title":{},"body":{"controllers/AdminOrdersController.html":{},"interfaces/CustomerReportRow.html":{},"interfaces/SalesReportRow.html":{},"entities/Users.html":{},"injectables/UsersService.html":{}}}],["orders.controller",{"_index":105,"title":{},"body":{"modules/AdminModule.html":{}}}],["orders.controller.ts",{"_index":110,"title":{},"body":{"controllers/AdminOrdersController.html":{},"coverage.html":{}}}],["orders.controller.ts:102",{"_index":226,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["orders.controller.ts:113",{"_index":219,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["orders.controller.ts:123",{"_index":165,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["orders.controller.ts:129",{"_index":131,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["orders.controller.ts:30",{"_index":159,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["orders.controller.ts:48",{"_index":196,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["orders.controller.ts:60",{"_index":187,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["orders.controller.ts:84",{"_index":182,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["orders.controller.ts:94",{"_index":209,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["orders.length",{"_index":1658,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["orders.service",{"_index":1398,"title":{},"body":{"modules/OrdersModule.html":{}}}],["orders/entities/order",{"_index":1469,"title":{},"body":{"entities/Product.html":{},"interfaces/ProductPerformanceRow.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{}}}],["orders/entities/order.entity",{"_index":1907,"title":{},"body":{"entities/Users.html":{}}}],["orders/enums/order",{"_index":243,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["orders/orders.module",{"_index":103,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{}}}],["orders/orders.service",{"_index":234,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["ordersbystatus",{"_index":288,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["orderschangepercent",{"_index":1737,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["ordersmodule",{"_index":82,"title":{"modules/OrdersModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/OrdersModule.html":{},"modules.html":{},"overview.html":{}}}],["ordersservice",{"_index":233,"title":{},"body":{"controllers/AdminOrdersController.html":{},"modules/OrdersModule.html":{},"interfaces/SalesReportRow.html":{},"coverage.html":{},"overview.html":{}}}],["orderstatus",{"_index":140,"title":{},"body":{"controllers/AdminOrdersController.html":{},"entities/Order.html":{},"interfaces/SalesReportRow.html":{},"classes/UpdateOrderDto.html":{},"miscellaneous/enumerations.html":{}}}],["orderstatus.pending",{"_index":1366,"title":{},"body":{"entities/Order.html":{}}}],["orderstatus.processing",{"_index":1796,"title":{},"body":{"classes/UpdateOrderDto.html":{}}}],["orderstatus})@apiquery({name",{"_index":155,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["orderstrend",{"_index":1745,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["orderstrend[i",{"_index":1756,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["otherwise",{"_index":2295,"title":{},"body":{"license.html":{}}}],["out",{"_index":87,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/OrdersModule.html":{},"modules/ProductsModule.html":{},"classes/UpdateProductDto.html":{},"modules/UsersModule.html":{},"index.html":{},"license.html":{},"overview.html":{}}}],["over",{"_index":203,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["overview",{"_index":2302,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":2053,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":151,"title":{},"body":{"controllers/AdminOrdersController.html":{},"classes/AdminProductQueryDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"interfaces/CustomerReportRow.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"classes/UserQueryDto.html":{},"injectables/UsersService.html":{}}}],["pages",{"_index":693,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{}}}],["paginated",{"_index":697,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{}}}],["paginatedresponse",{"_index":698,"title":{"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{}},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"coverage.html":{}}}],["pagination",{"_index":396,"title":{},"body":{"classes/AdminProductQueryDto.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{}}}],["pagination'})@apiquery({name",{"_index":600,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["paginationmeta",{"_index":689,"title":{"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{}},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"coverage.html":{}}}],["pants",{"_index":1473,"title":{},"body":{"entities/Product.html":{},"miscellaneous/enumerations.html":{}}}],["papa",{"_index":1639,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["papa.unparse(reportdata",{"_index":1672,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["papaparse",{"_index":1640,"title":{},"body":{"interfaces/SalesReportRow.html":{},"dependencies.html":{}}}],["param",{"_index":230,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["param('id",{"_index":304,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminUserController.html":{}}}],["parameters",{"_index":132,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/ProductsService.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"injectables/UsersService.html":{},"classes/ValidationExceptionFilter.html":{}}}],["parentfield",{"_index":1988,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["parentfield}.${error.property",{"_index":1989,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["parse",{"_index":1976,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["parsefloat(item.dailyrevenue",{"_index":1784,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["parsefloat(item[key",{"_index":1758,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["parsefloat(result.totalspent",{"_index":1763,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["parsefloat(salesdata.totalrevenue",{"_index":1564,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["parsefloat(value",{"_index":422,"title":{},"body":{"classes/AdminProductQueryDto.html":{}}}],["parseint(item[key",{"_index":1234,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["parseint(r.count",{"_index":1222,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["parseint(result.count",{"_index":1210,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["parseint(result.ordercount",{"_index":1762,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["parseint(salesdata.unitssold",{"_index":1563,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["parseint(value",{"_index":423,"title":{},"body":{"classes/AdminProductQueryDto.html":{}}}],["parser",{"_index":2066,"title":{},"body":{"dependencies.html":{}}}],["parseuuidpipe",{"_index":626,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["part",{"_index":2203,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":1866,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["partialtype(createuserdto",{"_index":1865,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["particular",{"_index":2282,"title":{},"body":{"license.html":{}}}],["passport",{"_index":1309,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RefreshTokenStrategy.html":{},"dependencies.html":{}}}],["passport's",{"_index":1268,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["passportmodule",{"_index":820,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":1307,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1299,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passreqtocallback",{"_index":1599,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["passthrough",{"_index":787,"title":{},"body":{"controllers/AuthController.html":{}}}],["password",{"_index":731,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomerReportRow.html":{},"classes/LoginDto.html":{},"entities/Users.html":{},"injectables/UsersService.html":{}}}],["password123",{"_index":1091,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{}}}],["password123'})@isnotempty()@isstring",{"_index":1077,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["password123'})@isstring()@isnotempty()@minlength(6",{"_index":1325,"title":{},"body":{"classes/LoginDto.html":{}}}],["patch",{"_index":229,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{}}}],["patch(':id",{"_index":520,"title":{},"body":{"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{}}}],["patch(':id')@apioperation({summary",{"_index":490,"title":{},"body":{"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{}}}],["patch(':id/role",{"_index":652,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["patch(':id/role')@apioperation({summary",{"_index":621,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["patch(':id/status",{"_index":303,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminUserController.html":{}}}],["patch(':id/status')@apioperation({summary",{"_index":222,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminUserController.html":{}}}],["patch(':id/toggle",{"_index":467,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["patch(':id/update",{"_index":496,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["patch('bulk",{"_index":213,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["path",{"_index":1971,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["payload",{"_index":905,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["payload.interface",{"_index":1311,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.interface.ts",{"_index":1287,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["payment",{"_index":936,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{}}}],["paymentdetails",{"_index":1333,"title":{},"body":{"entities/Order.html":{}}}],["paymentmethod",{"_index":922,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{}}}],["paypal",{"_index":963,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{}}}],["pending",{"_index":289,"title":{},"body":{"controllers/AdminOrdersController.html":{},"miscellaneous/enumerations.html":{}}}],["pendingorders",{"_index":287,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["per",{"_index":369,"title":{},"body":{"classes/AdminProductQueryDto.html":{},"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"interfaces/SalesReportRow.html":{}}}],["perfect",{"_index":1003,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["performance",{"_index":456,"title":{},"body":{"controllers/AdminProductsController.html":{},"interfaces/SalesReportRow.html":{}}}],["period",{"_index":278,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["period'})@apiquery({name",{"_index":175,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["period'})@apiresponse({status",{"_index":177,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["permission",{"_index":2240,"title":{},"body":{"license.html":{}}}],["permissions",{"_index":1632,"title":{},"body":{"guards/RolesGuard.html":{}}}],["permit",{"_index":2263,"title":{},"body":{"license.html":{}}}],["person",{"_index":2245,"title":{},"body":{"license.html":{}}}],["persons",{"_index":2264,"title":{},"body":{"license.html":{}}}],["pg",{"_index":2075,"title":{},"body":{"dependencies.html":{}}}],["phone",{"_index":559,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomerReportRow.html":{},"entities/Users.html":{},"injectables/UsersService.html":{}}}],["platform",{"_index":2161,"title":{},"body":{"index.html":{}}}],["please",{"_index":928,"title":{},"body":{"classes/CreateOrderDto.html":{},"injectables/JwtAuthGuard.html":{},"classes/OrderItemDto.html":{},"index.html":{}}}],["plus_size",{"_index":2114,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["pm",{"_index":931,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{}}}],["pocket",{"_index":1814,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["pockets",{"_index":1860,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["popularproducts",{"_index":291,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["port",{"_index":727,"title":{},"body":{"modules/AppModule.html":{}}}],["portions",{"_index":2273,"title":{},"body":{"license.html":{}}}],["possible",{"_index":2156,"title":{},"body":{"index.html":{}}}],["post",{"_index":227,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AuthController.html":{}}}],["post('login",{"_index":785,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":759,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@apioperation({summary",{"_index":439,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["postalcode",{"_index":15,"title":{},"body":{"entities/Address.html":{}}}],["postgres",{"_index":724,"title":{},"body":{"modules/AppModule.html":{}}}],["precision",{"_index":1351,"title":{},"body":{"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{}}}],["prefix",{"_index":111,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"controllers/AuthController.html":{}}}],["premium",{"_index":996,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["prevavgordervalue",{"_index":1749,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["prevend",{"_index":1721,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["prevenddate",{"_index":1179,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["prevorders",{"_index":1728,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["prevorders.length",{"_index":1734,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["prevorders.reduce((sum",{"_index":1736,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["prevstart",{"_index":1715,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["prevstartdate",{"_index":1177,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["prevtotalorders",{"_index":1733,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["prevtotalrevenue",{"_index":1735,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["prevtotalusers",{"_index":1184,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["price",{"_index":376,"title":{},"body":{"classes/AdminProductQueryDto.html":{},"classes/CreateProductDto.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"interfaces/SalesReportRow.html":{},"classes/UpdateProductDto.html":{},"miscellaneous/enumerations.html":{}}}],["pricing",{"_index":1409,"title":{},"body":{"entities/Product.html":{}}}],["primarygeneratedcolumn",{"_index":58,"title":{},"body":{"entities/Address.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"entities/Roles.html":{},"entities/Users.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":35,"title":{},"body":{"entities/Address.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"entities/Users.html":{}}}],["private",{"_index":515,"title":{},"body":{"controllers/AdminProductsController.html":{},"injectables/AuthService.html":{},"interfaces/CustomerReportRow.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"injectables/RefreshTokenStrategy.html":{},"interfaces/SalesReportRow.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["process.env.node_env",{"_index":796,"title":{},"body":{"controllers/AuthController.html":{}}}],["processed",{"_index":1789,"title":{},"body":{"classes/UpdateOrderDto.html":{}}}],["processing",{"_index":2097,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["product",{"_index":333,"title":{"entities/Product.html":{}},"body":{"classes/AdminProductQueryDto.html":{},"controllers/AdminProductsController.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"entities/OrderItem.html":{},"classes/OrderItemDto.html":{},"modules/OrdersModule.html":{},"entities/Product.html":{},"interfaces/ProductPerformanceRow.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"interfaces/SalesReportRow.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateStockDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["product'})@column({type",{"_index":1427,"title":{},"body":{"entities/Product.html":{}}}],["product'})@primarygeneratedcolumn('uuid",{"_index":1434,"title":{},"body":{"entities/Product.html":{}}}],["product.category",{"_index":1561,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"interfaces/SalesReportRow.html":{}}}],["product.dto",{"_index":507,"title":{},"body":{"controllers/AdminProductsController.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["product.dto.ts",{"_index":966,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["product.dto.ts:100",{"_index":1818,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.dto.ts:102",{"_index":1032,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:109",{"_index":1841,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.dto.ts:110",{"_index":977,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:118",{"_index":1020,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["product.dto.ts:126",{"_index":990,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:127",{"_index":1804,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.dto.ts:13",{"_index":1022,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["product.dto.ts:135",{"_index":1016,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:140",{"_index":1820,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.dto.ts:144",{"_index":1017,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:153",{"_index":1014,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:154",{"_index":1837,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.dto.ts:162",{"_index":1018,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["product.dto.ts:170",{"_index":1832,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.dto.ts:178",{"_index":1800,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.dto.ts:186",{"_index":1828,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.dto.ts:194",{"_index":1826,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.dto.ts:202",{"_index":1825,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.dto.ts:21",{"_index":1006,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:22",{"_index":1816,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.dto.ts:31",{"_index":1025,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:33",{"_index":1834,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.dto.ts:41",{"_index":1028,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:43",{"_index":1836,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.dto.ts:50",{"_index":1034,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:54",{"_index":1839,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.dto.ts:58",{"_index":992,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:64",{"_index":1802,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.dto.ts:66",{"_index":1029,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:73",{"_index":1827,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.dto.ts:74",{"_index":995,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:82",{"_index":1829,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.dto.ts:83",{"_index":1012,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:88",{"_index":1008,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:91",{"_index":1823,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.id",{"_index":1559,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["product.images",{"_index":1538,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["product.isbestseller",{"_index":532,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["product.isfeatured",{"_index":528,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["product.isnewarrival",{"_index":530,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["product.isonsale",{"_index":534,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["product.name",{"_index":1543,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["product.price",{"_index":1562,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["product.stockquantity",{"_index":1553,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"interfaces/SalesReportRow.html":{}}}],["productcategory",{"_index":352,"title":{},"body":{"classes/AdminProductQueryDto.html":{},"classes/CreateProductDto.html":{},"entities/Product.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductDto.html":{},"miscellaneous/enumerations.html":{}}}],["productcategory.pants",{"_index":1842,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["productcategory.t_shirts",{"_index":1038,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["productcategory})@column({type",{"_index":1421,"title":{},"body":{"entities/Product.html":{}}}],["productcategory})@isoptional()@isenum(productcategory",{"_index":353,"title":{},"body":{"classes/AdminProductQueryDto.html":{}}}],["productdata",{"_index":1699,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["productdata.length",{"_index":1701,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["productid",{"_index":292,"title":{},"body":{"controllers/AdminOrdersController.html":{},"classes/CreateOrderDto.html":{},"entities/OrderItem.html":{},"classes/OrderItemDto.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["production",{"_index":797,"title":{},"body":{"controllers/AuthController.html":{},"index.html":{}}}],["productperformancerow",{"_index":1487,"title":{"interfaces/ProductPerformanceRow.html":{}},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"coverage.html":{}}}],["productrepository",{"_index":1495,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"interfaces/SalesReportRow.html":{}}}],["products",{"_index":450,"title":{},"body":{"controllers/AdminProductsController.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"interfaces/SalesReportRow.html":{}}}],["products.controller",{"_index":104,"title":{},"body":{"modules/AdminModule.html":{}}}],["products.controller.ts",{"_index":427,"title":{},"body":{"controllers/AdminProductsController.html":{},"coverage.html":{}}}],["products.controller.ts:105",{"_index":503,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["products.controller.ts:114",{"_index":457,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["products.controller.ts:26",{"_index":452,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["products.controller.ts:35",{"_index":448,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["products.controller.ts:45",{"_index":493,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["products.controller.ts:54",{"_index":465,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["products.controller.ts:63",{"_index":479,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["products.controller.ts:73",{"_index":483,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["products.controller.ts:83",{"_index":475,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["products.controller.ts:93",{"_index":487,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["products.service",{"_index":1569,"title":{},"body":{"modules/ProductsModule.html":{}}}],["products/dto/create",{"_index":506,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["products/dto/update",{"_index":508,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["products/entities/product.entity",{"_index":1384,"title":{},"body":{"entities/OrderItem.html":{},"modules/OrdersModule.html":{},"interfaces/SalesReportRow.html":{}}}],["products/products.module",{"_index":102,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/OrdersModule.html":{}}}],["products/products.service",{"_index":505,"title":{},"body":{"controllers/AdminProductsController.html":{},"interfaces/SalesReportRow.html":{}}}],["productsheet",{"_index":1697,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["productsheet.addrows(productdata",{"_index":1704,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["productsheet.columns",{"_index":1702,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["productsmodule",{"_index":83,"title":{"modules/ProductsModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/OrdersModule.html":{},"modules/ProductsModule.html":{},"modules.html":{},"overview.html":{}}}],["productsortby",{"_index":399,"title":{},"body":{"classes/AdminProductQueryDto.html":{},"miscellaneous/enumerations.html":{}}}],["productsortby.created_at",{"_index":400,"title":{},"body":{"classes/AdminProductQueryDto.html":{}}}],["productsservice",{"_index":504,"title":{"injectables/ProductsService.html":{}},"body":{"controllers/AdminProductsController.html":{},"interfaces/ProductPerformanceRow.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"interfaces/SalesReportRow.html":{},"coverage.html":{},"overview.html":{}}}],["profile",{"_index":1084,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["profile.jpg",{"_index":1129,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"entities/Users.html":{},"injectables/UsersService.html":{}}}],["profileimage",{"_index":1061,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/CustomerReportRow.html":{},"entities/Users.html":{},"injectables/UsersService.html":{}}}],["profitable",{"_index":1546,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["progressive",{"_index":2121,"title":{},"body":{"index.html":{}}}],["project",{"_index":2132,"title":{},"body":{"index.html":{}}}],["promise",{"_index":605,"title":{},"body":{"controllers/AdminUserController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/CustomerReportRow.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"interfaces/SalesReportRow.html":{},"injectables/UsersService.html":{}}}],["promise.all",{"_index":911,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/SalesReportRow.html":{}}}],["properties",{"_index":8,"title":{"properties.html":{}},"body":{"entities/Address.html":{},"classes/AdminProductQueryDto.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"controllers/AuthController.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomerReportRow.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDto.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"classes/OrderItemDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"entities/Product.html":{},"interfaces/ProductPerformanceRow.html":{},"entities/Roles.html":{},"interfaces/SalesReportRow.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateStockDto.html":{},"classes/UserQueryDto.html":{},"entities/Users.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"properties.html":{}}}],["property",{"_index":1993,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["protects",{"_index":1251,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["provided",{"_index":2274,"title":{},"body":{"license.html":{}}}],["providers",{"_index":78,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/OrdersModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["public",{"_index":1273,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["publish",{"_index":2257,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":2283,"title":{},"body":{"license.html":{}}}],["quality",{"_index":997,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["quantity",{"_index":382,"title":{},"body":{"classes/AdminProductQueryDto.html":{},"controllers/AdminProductsController.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"entities/OrderItem.html":{},"classes/OrderItemDto.html":{},"entities/Product.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"interfaces/SalesReportRow.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateStockDto.html":{}}}],["quantity'})@apiresponse({status",{"_index":502,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["queries",{"_index":656,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{}}}],["query",{"_index":231,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["query('days",{"_index":540,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["query('enddate",{"_index":268,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{}}}],["query('interval",{"_index":273,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["query('limit",{"_index":264,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["query('page",{"_index":263,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["query('sortby",{"_index":269,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["query('sortorder",{"_index":270,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["query('startdate",{"_index":267,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{}}}],["query('status",{"_index":265,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["query('userid",{"_index":266,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["query.andwhere('product.brand",{"_index":1503,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["query.andwhere('product.category",{"_index":1502,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["query.andwhere('product.isactive",{"_index":1508,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["query.andwhere('product.isbestseller",{"_index":1507,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["query.andwhere('product.isfeatured",{"_index":1504,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["query.andwhere('product.isnewarrival",{"_index":1505,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["query.andwhere('product.isonsale",{"_index":1506,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["query.andwhere('product.name",{"_index":1501,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["query.andwhere('product.price",{"_index":1509,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["query.andwhere('product.rating",{"_index":1511,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["query.andwhere('product.stockquantity",{"_index":1510,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["query.dto",{"_index":511,"title":{},"body":{"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"interfaces/CustomerReportRow.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"injectables/UsersService.html":{}}}],["query.dto.ts",{"_index":334,"title":{},"body":{"classes/AdminProductQueryDto.html":{},"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{},"classes/UserQueryDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["query.dto.ts:101",{"_index":680,"title":{},"body":{"classes/AdminUserQueryDto.html":{}}}],["query.dto.ts:106",{"_index":386,"title":{},"body":{"classes/AdminProductQueryDto.html":{}}}],["query.dto.ts:110",{"_index":677,"title":{},"body":{"classes/AdminUserQueryDto.html":{}}}],["query.dto.ts:113",{"_index":380,"title":{},"body":{"classes/AdminProductQueryDto.html":{}}}],["query.dto.ts:12",{"_index":1876,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["query.dto.ts:120",{"_index":398,"title":{},"body":{"classes/AdminProductQueryDto.html":{},"classes/AdminUserQueryDto.html":{}}}],["query.dto.ts:126",{"_index":668,"title":{},"body":{"classes/AdminUserQueryDto.html":{}}}],["query.dto.ts:127",{"_index":374,"title":{},"body":{"classes/AdminProductQueryDto.html":{}}}],["query.dto.ts:131",{"_index":664,"title":{},"body":{"classes/AdminUserQueryDto.html":{}}}],["query.dto.ts:132",{"_index":403,"title":{},"body":{"classes/AdminProductQueryDto.html":{}}}],["query.dto.ts:136",{"_index":666,"title":{},"body":{"classes/AdminUserQueryDto.html":{}}}],["query.dto.ts:137",{"_index":394,"title":{},"body":{"classes/AdminProductQueryDto.html":{}}}],["query.dto.ts:141",{"_index":670,"title":{},"body":{"classes/AdminUserQueryDto.html":{}}}],["query.dto.ts:146",{"_index":671,"title":{},"body":{"classes/AdminUserQueryDto.html":{}}}],["query.dto.ts:154",{"_index":682,"title":{},"body":{"classes/AdminUserQueryDto.html":{}}}],["query.dto.ts:163",{"_index":684,"title":{},"body":{"classes/AdminUserQueryDto.html":{}}}],["query.dto.ts:17",{"_index":1871,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["query.dto.ts:21",{"_index":1873,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["query.dto.ts:25",{"_index":1875,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["query.dto.ts:31",{"_index":390,"title":{},"body":{"classes/AdminProductQueryDto.html":{}}}],["query.dto.ts:36",{"_index":354,"title":{},"body":{"classes/AdminProductQueryDto.html":{}}}],["query.dto.ts:41",{"_index":351,"title":{},"body":{"classes/AdminProductQueryDto.html":{}}}],["query.dto.ts:47",{"_index":362,"title":{},"body":{"classes/AdminProductQueryDto.html":{}}}],["query.dto.ts:53",{"_index":364,"title":{},"body":{"classes/AdminProductQueryDto.html":{}}}],["query.dto.ts:59",{"_index":366,"title":{},"body":{"classes/AdminProductQueryDto.html":{}}}],["query.dto.ts:65",{"_index":360,"title":{},"body":{"classes/AdminProductQueryDto.html":{}}}],["query.dto.ts:7",{"_index":1877,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["query.dto.ts:71",{"_index":357,"title":{},"body":{"classes/AdminProductQueryDto.html":{}}}],["query.dto.ts:78",{"_index":385,"title":{},"body":{"classes/AdminProductQueryDto.html":{}}}],["query.dto.ts:79",{"_index":674,"title":{},"body":{"classes/AdminUserQueryDto.html":{}}}],["query.dto.ts:85",{"_index":378,"title":{},"body":{"classes/AdminProductQueryDto.html":{}}}],["query.dto.ts:92",{"_index":387,"title":{},"body":{"classes/AdminProductQueryDto.html":{},"classes/AdminUserQueryDto.html":{}}}],["query.dto.ts:99",{"_index":383,"title":{},"body":{"classes/AdminProductQueryDto.html":{}}}],["query.getmanyandcount",{"_index":1513,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["query.skip((page",{"_index":1512,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["querybuilder",{"_index":1154,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["querybuilder.andwhere",{"_index":1157,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["querybuilder.andwhere('roles.name",{"_index":1161,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["querybuilder.andwhere('user.isactive",{"_index":1162,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["querybuilder.getmanyandcount",{"_index":1170,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["querybuilder.orderby(`user.${finalsortby",{"_index":1166,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["querybuilder.skip((page",{"_index":1168,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["querydto",{"_index":453,"title":{},"body":{"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"interfaces/CustomerReportRow.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"injectables/UsersService.html":{}}}],["questions",{"_index":2186,"title":{},"body":{"index.html":{}}}],["rahman",{"_index":2239,"title":{},"body":{"license.html":{}}}],["ranges",{"_index":1711,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["rate",{"_index":1204,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["rating",{"_index":379,"title":{},"body":{"classes/AdminProductQueryDto.html":{},"entities/Product.html":{},"miscellaneous/enumerations.html":{}}}],["read",{"_index":2224,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":261,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/CustomerReportRow.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"injectables/RefreshTokenStrategy.html":{},"interfaces/SalesReportRow.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["ready",{"_index":2148,"title":{},"body":{"index.html":{}}}],["real",{"_index":2200,"title":{},"body":{"index.html":{}}}],["record",{"_index":1030,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/UpdateProductDto.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["reflect",{"_index":2077,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":1258,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["refresh",{"_index":756,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["refresh(@req",{"_index":807,"title":{},"body":{"controllers/AuthController.html":{}}}],["refresh(req",{"_index":774,"title":{},"body":{"controllers/AuthController.html":{}}}],["refresh(userid",{"_index":858,"title":{},"body":{"injectables/AuthService.html":{}}}],["refresh_token",{"_index":791,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["refreshtoken",{"_index":809,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenStrategy.html":{},"entities/Users.html":{}}}],["refreshtokenguard",{"_index":1587,"title":{"injectables/RefreshTokenGuard.html":{}},"body":{"injectables/RefreshTokenGuard.html":{},"coverage.html":{}}}],["refreshtokenmatches",{"_index":901,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokenstrategy",{"_index":816,"title":{"injectables/RefreshTokenStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/RefreshTokenStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["refundamount",{"_index":1334,"title":{},"body":{"entities/Order.html":{},"classes/UpdateOrderDto.html":{}}}],["refunded",{"_index":1791,"title":{},"body":{"classes/UpdateOrderDto.html":{},"miscellaneous/enumerations.html":{}}}],["related",{"_index":1482,"title":{},"body":{"entities/Product.html":{}}}],["relations",{"_index":874,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CustomerReportRow.html":{},"injectables/JwtStrategy.html":{},"interfaces/SalesReportRow.html":{},"injectables/UsersService.html":{}}}],["remove",{"_index":431,"title":{},"body":{"controllers/AdminProductsController.html":{},"injectables/ProductsService.html":{}}}],["remove(@param('id",{"_index":524,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["remove(id",{"_index":458,"title":{},"body":{"controllers/AdminProductsController.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["report",{"_index":129,"title":{},"body":{"controllers/AdminOrdersController.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"interfaces/SalesReportRow.html":{}}}],["report.push",{"_index":1560,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["reportdata",{"_index":1239,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"interfaces/SalesReportRow.html":{},"injectables/UsersService.html":{}}}],["reportdata.push",{"_index":1659,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["repository",{"_index":845,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CustomerReportRow.html":{},"injectables/JwtStrategy.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"interfaces/SalesReportRow.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["representing",{"_index":1288,"title":{},"body":{"interfaces/JwtPayload.html":{},"entities/Product.html":{}}}],["req",{"_index":773,"title":{},"body":{"controllers/AuthController.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["req.cookies.refresh_token",{"_index":1600,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["req.cookies?.refresh_token",{"_index":1598,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["req.user",{"_index":810,"title":{},"body":{"controllers/AuthController.html":{}}}],["request",{"_index":780,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/RefreshTokenStrategy.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["request.method",{"_index":1955,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["request.url",{"_index":1956,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["request.user",{"_index":2314,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requests",{"_index":1328,"title":{},"body":{"classes/LoginDto.html":{}}}],["required",{"_index":152,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/OrderItemDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"miscellaneous/variables.html":{}}}],["required'})@apiresponse({status",{"_index":464,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["requiredroles",{"_index":1614,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredroles.join",{"_index":1633,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredroles.length",{"_index":1618,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredroles.some(role",{"_index":1628,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiring",{"_index":1252,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"index.html":{}}}],["res",{"_index":134,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AuthController.html":{}}}],["res.send(buffer",{"_index":329,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["res.set",{"_index":322,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["reset",{"_index":86,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/OrdersModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resources",{"_index":2180,"title":{},"body":{"index.html":{}}}],["response",{"_index":125,"title":{},"body":{"controllers/AdminOrdersController.html":{},"classes/AdminUserQueryDto.html":{},"controllers/AuthController.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["response.clearcookie('refresh_token",{"_index":804,"title":{},"body":{"controllers/AuthController.html":{}}}],["response.cookie('refresh_token",{"_index":793,"title":{},"body":{"controllers/AuthController.html":{}}}],["response.interface.ts",{"_index":1404,"title":{},"body":{"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"coverage.html":{}}}],["response.status(status).json(errorresponse",{"_index":1973,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["responses",{"_index":701,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{}}}],["restriction",{"_index":2252,"title":{},"body":{"license.html":{}}}],["result.user_email",{"_index":1760,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["result.user_id",{"_index":1759,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["results",{"_index":69,"title":{},"body":{"entities/Address.html":{},"modules/AdminModule.html":{},"controllers/AdminOrdersController.html":{},"classes/AdminProductQueryDto.html":{},"controllers/AdminProductsController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomerReportRow.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"classes/OrderItemDto.html":{},"modules/OrdersModule.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"entities/Product.html":{},"interfaces/ProductPerformanceRow.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"interfaces/SalesReportRow.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateStockDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"entities/Users.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retrieved",{"_index":179,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminUserController.html":{}}}],["retrieves",{"_index":171,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminUserController.html":{}}}],["return",{"_index":271,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/CustomerReportRow.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"interfaces/SalesReportRow.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":135,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/ProductsService.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"injectables/UsersService.html":{},"classes/ValidationExceptionFilter.html":{}}}],["rev",{"_index":1757,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["revenue",{"_index":195,"title":{},"body":{"controllers/AdminOrdersController.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"interfaces/SalesReportRow.html":{}}}],["revenuechangepercent",{"_index":1738,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["revenuedata",{"_index":1764,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["revenuedata.foreach(item",{"_index":1777,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["revenuetrend",{"_index":1747,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["revenuetrend.map((rev",{"_index":1755,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["reverse",{"_index":987,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["reviewcount",{"_index":1415,"title":{},"body":{"entities/Product.html":{}}}],["reviews",{"_index":1456,"title":{},"body":{"entities/Product.html":{}}}],["rights",{"_index":2254,"title":{},"body":{"license.html":{}}}],["rise",{"_index":1855,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["role",{"_index":241,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"interfaces/CustomerReportRow.html":{},"interfaces/JwtPayload.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"entities/Users.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["role'})@apiparam({name",{"_index":622,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["role'})@isoptional()@isenum(role",{"_index":676,"title":{},"body":{"classes/AdminUserQueryDto.html":{}}}],["role.customer",{"_index":1124,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["role.name",{"_index":909,"title":{},"body":{"injectables/AuthService.html":{},"guards/RolesGuard.html":{}}}],["role.users",{"_index":1909,"title":{},"body":{"entities/Users.html":{}}}],["role.users)@jointable",{"_index":1902,"title":{},"body":{"entities/Users.html":{}}}],["roleentity",{"_index":1145,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["roles",{"_index":98,"title":{"entities/Roles.html":{}},"body":{"modules/AdminModule.html":{},"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"injectables/AuthService.html":{},"interfaces/CustomerReportRow.html":{},"injectables/JwtStrategy.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"entities/Users.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles(role.admin",{"_index":259,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{}}}],["roles.entity",{"_index":1906,"title":{},"body":{"entities/Users.html":{}}}],["roles_key",{"_index":1613,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolesguard",{"_index":238,"title":{"guards/RolesGuard.html":{}},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"modules/AuthModule.html":{},"guards/RolesGuard.html":{},"coverage.html":{},"overview.html":{}}}],["rolesrepository",{"_index":1112,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["role})@isoptional()@isenum(role",{"_index":580,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["route",{"_index":1274,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["routes",{"_index":753,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{}}}],["rules",{"_index":590,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"classes/LoginDto.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{}}}],["run",{"_index":2135,"title":{},"body":{"index.html":{}}}],["runs",{"_index":2154,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":2079,"title":{},"body":{"dependencies.html":{}}}],["s",{"_index":1040,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["sale",{"_index":365,"title":{},"body":{"classes/AdminProductQueryDto.html":{},"controllers/AdminProductsController.html":{},"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/UpdateProductDto.html":{}}}],["sale')@apioperation({summary",{"_index":485,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["sale'})@apiresponse({status",{"_index":486,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["saleprice",{"_index":972,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["sales",{"_index":1678,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["salesdata",{"_index":1555,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"interfaces/SalesReportRow.html":{}}}],["salesdata.length",{"_index":1683,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["salesreportrow",{"_index":1634,"title":{"interfaces/SalesReportRow.html":{}},"body":{"interfaces/SalesReportRow.html":{},"coverage.html":{}}}],["salessheet",{"_index":1680,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["salessheet.addrows(salesdata",{"_index":1688,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["salessheet.columns",{"_index":1684,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["samesite",{"_index":798,"title":{},"body":{"controllers/AuthController.html":{}}}],["scalable",{"_index":2126,"title":{},"body":{"index.html":{}}}],["scale",{"_index":1352,"title":{},"body":{"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{}}}],["schema",{"_index":181,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminUserController.html":{},"controllers/AuthController.html":{}}}],["search",{"_index":661,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/CustomerReportRow.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{},"classes/UserQueryDto.html":{},"injectables/UsersService.html":{}}}],["secret",{"_index":833,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["secretorkey",{"_index":1321,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["secure",{"_index":795,"title":{},"body":{"controllers/AuthController.html":{}}}],["select",{"_index":1765,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["select('count(distinct",{"_index":1207,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["select('orderitem.productid",{"_index":1532,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["select('sum(orderitem.quantity",{"_index":1556,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["select(`date_trunc('day",{"_index":1192,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"interfaces/SalesReportRow.html":{},"injectables/UsersService.html":{}}}],["selected",{"_index":950,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{}}}],["sell",{"_index":2261,"title":{},"body":{"license.html":{}}}],["seller",{"_index":359,"title":{},"body":{"classes/AdminProductQueryDto.html":{},"controllers/AdminProductsController.html":{},"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/UpdateProductDto.html":{}}}],["seller')@apioperation({summary",{"_index":468,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["seller'})@apiresponse({status",{"_index":473,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["selling",{"_index":1528,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["server",{"_index":2127,"title":{},"body":{"index.html":{}}}],["service",{"_index":841,"title":{},"body":{"injectables/AuthService.html":{}}}],["set",{"_index":370,"title":{},"body":{"classes/AdminProductQueryDto.html":{},"controllers/AdminUserController.html":{},"interfaces/SalesReportRow.html":{}}}],["set(revenuedata.map(item",{"_index":1775,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["setmetadata(roles_key",{"_index":2315,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setstatus",{"_index":597,"title":{},"body":{"controllers/AdminUserController.html":{},"injectables/UsersService.html":{}}}],["setstatus(id",{"_index":610,"title":{},"body":{"controllers/AdminUserController.html":{},"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["setup",{"_index":1173,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["shall",{"_index":2270,"title":{},"body":{"license.html":{}}}],["sheet",{"_index":1679,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["shipped",{"_index":290,"title":{},"body":{"controllers/AdminOrdersController.html":{},"miscellaneous/enumerations.html":{}}}],["shippedorders",{"_index":285,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["shirt",{"_index":999,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["shirt'})@isstring()@isnotempty",{"_index":1021,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["shirts",{"_index":1472,"title":{},"body":{"entities/Product.html":{},"miscellaneous/enumerations.html":{}}}],["shoes",{"_index":1474,"title":{},"body":{"entities/Product.html":{},"miscellaneous/enumerations.html":{}}}],["side",{"_index":988,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{},"index.html":{}}}],["signoptions",{"_index":835,"title":{},"body":{"modules/AuthModule.html":{}}}],["simple",{"_index":2170,"title":{},"body":{"index.html":{}}}],["single",{"_index":163,"title":{},"body":{"controllers/AdminOrdersController.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["size",{"_index":951,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{}}}],["sizes",{"_index":973,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/UpdateProductDto.html":{}}}],["skip",{"_index":1138,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["skirts",{"_index":2102,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["slim",{"_index":1809,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["software",{"_index":2248,"title":{},"body":{"license.html":{}}}],["sold",{"_index":1490,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["sort",{"_index":392,"title":{},"body":{"classes/AdminProductQueryDto.html":{},"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{}}}],["sortby",{"_index":143,"title":{},"body":{"controllers/AdminOrdersController.html":{},"classes/AdminProductQueryDto.html":{},"classes/AdminUserQueryDto.html":{},"interfaces/CustomerReportRow.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"injectables/UsersService.html":{}}}],["sortorder",{"_index":144,"title":{},"body":{"controllers/AdminOrdersController.html":{},"classes/AdminUserQueryDto.html":{},"interfaces/CustomerReportRow.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{},"injectables/UsersService.html":{}}}],["sortorder.touppercase",{"_index":1167,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["source",{"_index":4,"title":{},"body":{"entities/Address.html":{},"modules/AdminModule.html":{},"controllers/AdminOrdersController.html":{},"classes/AdminProductQueryDto.html":{},"controllers/AdminProductsController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomerReportRow.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"classes/OrderItemDto.html":{},"modules/OrdersModule.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"entities/Product.html":{},"interfaces/ProductPerformanceRow.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"interfaces/SalesReportRow.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateStockDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"entities/Users.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"index.html":{}}}],["specifications",{"_index":974,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/UpdateProductDto.html":{}}}],["specifying",{"_index":2317,"title":{},"body":{"miscellaneous/variables.html":{}}}],["spent",{"_index":1096,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["sponsors",{"_index":2219,"title":{},"body":{"index.html":{}}}],["sports",{"_index":1478,"title":{},"body":{"entities/Product.html":{},"miscellaneous/enumerations.html":{}}}],["sportwear",{"_index":2107,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../admin",{"_index":2087,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../current",{"_index":2309,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":2118,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../order",{"_index":2088,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../product",{"_index":2092,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../product.entity.ts",{"_index":2091,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../roles.decorator.ts",{"_index":2310,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../roles.enum.ts",{"_index":2094,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../roles.guard.ts",{"_index":2311,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/admin/admin.module.ts",{"_index":88,"title":{},"body":{"modules/AdminModule.html":{}}}],["src/admin/controllers/admin",{"_index":109,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"coverage.html":{}}}],["src/admin/interfaces/paginated",{"_index":1403,"title":{},"body":{"interfaces/PaginatedResponse.html":{},"interfaces/PaginationMeta.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":713,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":750,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:47",{"_index":767,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:65",{"_index":772,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:78",{"_index":776,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":817,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":840,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:111",{"_index":861,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:118",{"_index":852,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:23",{"_index":849,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:40",{"_index":853,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:85",{"_index":857,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:89",{"_index":859,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/decorators/current",{"_index":2024,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/roles.decorator",{"_index":633,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["src/auth/decorators/roles.decorator.ts",{"_index":2029,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dto/login.dto.ts",{"_index":1322,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/auth/dto/login.dto.ts:20",{"_index":1324,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/login.dto.ts:33",{"_index":1326,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/guards/jwt",{"_index":631,"title":{},"body":{"controllers/AdminUserController.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guards/refresh",{"_index":1588,"title":{},"body":{"injectables/RefreshTokenGuard.html":{},"coverage.html":{}}}],["src/auth/guards/roles.guard",{"_index":632,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["src/auth/guards/roles.guard.ts",{"_index":1608,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/guards/roles.guard.ts:11",{"_index":1611,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/guards/roles.guard.ts:8",{"_index":1610,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/interfaces/jwt",{"_index":1286,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts",{"_index":1294,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts:19",{"_index":1302,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/jwt.strategy.ts:42",{"_index":1304,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/refresh",{"_index":1590,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{},"coverage.html":{}}}],["src/common/exceptions/validation",{"_index":1937,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":2035,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/orders/dto/create",{"_index":919,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{},"coverage.html":{}}}],["src/orders/dto/update",{"_index":1786,"title":{},"body":{"classes/UpdateOrderDto.html":{},"coverage.html":{}}}],["src/orders/entities/order",{"_index":1369,"title":{},"body":{"entities/OrderItem.html":{},"coverage.html":{}}}],["src/orders/entities/order.entity",{"_index":1109,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"interfaces/ProductPerformanceRow.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["src/orders/entities/order.entity.ts",{"_index":1331,"title":{},"body":{"entities/Order.html":{},"coverage.html":{}}}],["src/orders/entities/order.entity.ts:12",{"_index":1359,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/entities/order.entity.ts:16",{"_index":1358,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/entities/order.entity.ts:19",{"_index":1354,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/entities/order.entity.ts:22",{"_index":1355,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/entities/order.entity.ts:25",{"_index":1353,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/entities/order.entity.ts:28",{"_index":1347,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/entities/order.entity.ts:31",{"_index":1337,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/entities/order.entity.ts:34",{"_index":1349,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/entities/order.entity.ts:42",{"_index":1340,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/entities/order.entity.ts:52",{"_index":1346,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/entities/order.entity.ts:55",{"_index":1338,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/entities/order.entity.ts:58",{"_index":1356,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/entities/order.entity.ts:9",{"_index":1341,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/enums/order",{"_index":2096,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/orders/orders.module.ts",{"_index":1397,"title":{},"body":{"modules/OrdersModule.html":{}}}],["src/orders/orders.service.ts",{"_index":1635,"title":{},"body":{"interfaces/SalesReportRow.html":{},"coverage.html":{}}}],["src/products/dto/admin",{"_index":332,"title":{},"body":{"classes/AdminProductQueryDto.html":{},"controllers/AdminProductsController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/products/dto/create",{"_index":965,"title":{},"body":{"classes/CreateProductDto.html":{},"coverage.html":{}}}],["src/products/dto/update",{"_index":1798,"title":{},"body":{"classes/UpdateProductDto.html":{},"classes/UpdateStockDto.html":{},"coverage.html":{}}}],["src/products/entities/product.entity.ts",{"_index":1405,"title":{},"body":{"entities/Product.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/products/entities/product.entity.ts:100",{"_index":1462,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:104",{"_index":1419,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:108",{"_index":1446,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:112",{"_index":1420,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:116",{"_index":1444,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:120",{"_index":1442,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:124",{"_index":1445,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:128",{"_index":1426,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:132",{"_index":1465,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:135",{"_index":1450,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:31",{"_index":1435,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:35",{"_index":1448,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:39",{"_index":1428,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:43",{"_index":1452,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:47",{"_index":1431,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:51",{"_index":1463,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:59",{"_index":1422,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:63",{"_index":1459,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:67",{"_index":1424,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:71",{"_index":1438,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:75",{"_index":1440,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:79",{"_index":1443,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:83",{"_index":1468,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:87",{"_index":1455,"title":{},"body":{"entities/Product.html":{}}}],["src/products/entities/product.entity.ts:91",{"_index":1458,"title":{},"body":{"entities/Product.html":{}}}],["src/products/enums/product",{"_index":2100,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/products/products.module.ts",{"_index":1568,"title":{},"body":{"modules/ProductsModule.html":{}}}],["src/products/products.service.ts",{"_index":1488,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"coverage.html":{}}}],["src/products/products.service.ts:117",{"_index":1576,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/products.service.ts:125",{"_index":1585,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/products.service.ts:131",{"_index":1584,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/products.service.ts:136",{"_index":1580,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/products.service.ts:143",{"_index":1581,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/products.service.ts:150",{"_index":1578,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/products.service.ts:157",{"_index":1582,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/products.service.ts:164",{"_index":1579,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/products.service.ts:171",{"_index":1583,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/products.service.ts:22",{"_index":1573,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/products.service.ts:231",{"_index":1586,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/products.service.ts:237",{"_index":1577,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/products.service.ts:32",{"_index":1574,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/products.service.ts:37",{"_index":1575,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/users/dto/admin",{"_index":546,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{},"coverage.html":{}}}],["src/users/dto/create",{"_index":1060,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":1864,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/user",{"_index":1867,"title":{},"body":{"classes/UserQueryDto.html":{},"coverage.html":{}}}],["src/users/entities/address.entity.ts",{"_index":6,"title":{},"body":{"entities/Address.html":{},"coverage.html":{}}}],["src/users/entities/address.entity.ts:15",{"_index":36,"title":{},"body":{"entities/Address.html":{}}}],["src/users/entities/address.entity.ts:18",{"_index":48,"title":{},"body":{"entities/Address.html":{}}}],["src/users/entities/address.entity.ts:21",{"_index":30,"title":{},"body":{"entities/Address.html":{}}}],["src/users/entities/address.entity.ts:24",{"_index":47,"title":{},"body":{"entities/Address.html":{}}}],["src/users/entities/address.entity.ts:27",{"_index":46,"title":{},"body":{"entities/Address.html":{}}}],["src/users/entities/address.entity.ts:30",{"_index":31,"title":{},"body":{"entities/Address.html":{}}}],["src/users/entities/address.entity.ts:33",{"_index":40,"title":{},"body":{"entities/Address.html":{}}}],["src/users/entities/address.entity.ts:36",{"_index":44,"title":{},"body":{"entities/Address.html":{}}}],["src/users/entities/address.entity.ts:39",{"_index":56,"title":{},"body":{"entities/Address.html":{}}}],["src/users/entities/address.entity.ts:43",{"_index":54,"title":{},"body":{"entities/Address.html":{}}}],["src/users/entities/address.entity.ts:46",{"_index":34,"title":{},"body":{"entities/Address.html":{}}}],["src/users/entities/address.entity.ts:49",{"_index":50,"title":{},"body":{"entities/Address.html":{}}}],["src/users/entities/roles.entity",{"_index":99,"title":{},"body":{"modules/AdminModule.html":{}}}],["src/users/entities/roles.entity.ts",{"_index":1601,"title":{},"body":{"entities/Roles.html":{},"coverage.html":{}}}],["src/users/entities/roles.entity.ts:15",{"_index":1603,"title":{},"body":{"entities/Roles.html":{}}}],["src/users/entities/roles.entity.ts:18",{"_index":1605,"title":{},"body":{"entities/Roles.html":{}}}],["src/users/entities/roles.entity.ts:8",{"_index":1602,"title":{},"body":{"entities/Roles.html":{}}}],["src/users/entities/users.entity",{"_index":97,"title":{},"body":{"modules/AdminModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"entities/Roles.html":{}}}],["src/users/entities/users.entity.ts",{"_index":1880,"title":{},"body":{"entities/Users.html":{},"coverage.html":{}}}],["src/users/entities/users.entity.ts:18",{"_index":1890,"title":{},"body":{"entities/Users.html":{}}}],["src/users/entities/users.entity.ts:21",{"_index":1889,"title":{},"body":{"entities/Users.html":{}}}],["src/users/entities/users.entity.ts:24",{"_index":1895,"title":{},"body":{"entities/Users.html":{}}}],["src/users/entities/users.entity.ts:27",{"_index":1886,"title":{},"body":{"entities/Users.html":{}}}],["src/users/entities/users.entity.ts:35",{"_index":1888,"title":{},"body":{"entities/Users.html":{}}}],["src/users/entities/users.entity.ts:38",{"_index":1899,"title":{},"body":{"entities/Users.html":{}}}],["src/users/entities/users.entity.ts:41",{"_index":1898,"title":{},"body":{"entities/Users.html":{}}}],["src/users/entities/users.entity.ts:45",{"_index":1903,"title":{},"body":{"entities/Users.html":{}}}],["src/users/entities/users.entity.ts:48",{"_index":1897,"title":{},"body":{"entities/Users.html":{}}}],["src/users/entities/users.entity.ts:51",{"_index":1883,"title":{},"body":{"entities/Users.html":{}}}],["src/users/entities/users.entity.ts:54",{"_index":1891,"title":{},"body":{"entities/Users.html":{}}}],["src/users/entities/users.entity.ts:57",{"_index":1892,"title":{},"body":{"entities/Users.html":{}}}],["src/users/entities/users.entity.ts:60",{"_index":1893,"title":{},"body":{"entities/Users.html":{}}}],["src/users/entities/users.entity.ts:63",{"_index":1901,"title":{},"body":{"entities/Users.html":{}}}],["src/users/entities/users.entity.ts:71",{"_index":1900,"title":{},"body":{"entities/Users.html":{}}}],["src/users/entities/users.entity.ts:74",{"_index":1884,"title":{},"body":{"entities/Users.html":{}}}],["src/users/entities/users.entity.ts:77",{"_index":1904,"title":{},"body":{"entities/Users.html":{}}}],["src/users/entities/users.entity.ts:80",{"_index":1894,"title":{},"body":{"entities/Users.html":{}}}],["src/users/enums/order",{"_index":1878,"title":{},"body":{"classes/UserQueryDto.html":{},"miscellaneous/enumerations.html":{}}}],["src/users/enums/roles.enum",{"_index":584,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{}}}],["src/users/enums/roles.enum.ts",{"_index":2115,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/users/users.module",{"_index":106,"title":{},"body":{"modules/AdminModule.html":{}}}],["src/users/users.module.ts",{"_index":1913,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service",{"_index":628,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["src/users/users.service.ts",{"_index":1094,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:109",{"_index":1928,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:123",{"_index":1933,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:141",{"_index":1934,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:160",{"_index":1923,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:178",{"_index":1927,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:226",{"_index":1931,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:284",{"_index":1925,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:296",{"_index":1929,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:319",{"_index":1932,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:32",{"_index":1922,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:324",{"_index":1935,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:45",{"_index":1924,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:74",{"_index":1930,"title":{},"body":{"injectables/UsersService.html":{}}}],["start",{"_index":174,"title":{},"body":{"controllers/AdminOrdersController.html":{},"interfaces/SalesReportRow.html":{},"index.html":{}}}],["start.gettime",{"_index":1718,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["start:dev",{"_index":2139,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":2140,"title":{},"body":{"index.html":{}}}],["startdate",{"_index":141,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"interfaces/CustomerReportRow.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"interfaces/SalesReportRow.html":{},"injectables/UsersService.html":{}}}],["started",{"_index":2120,"title":{"index.html":{},"license.html":{}},"body":{}}],["starter",{"_index":2131,"title":{},"body":{"index.html":{}}}],["startofday",{"_index":252,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"interfaces/CustomerReportRow.html":{},"interfaces/SalesReportRow.html":{},"injectables/UsersService.html":{}}}],["startofday(from",{"_index":1237,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"interfaces/SalesReportRow.html":{},"injectables/UsersService.html":{}}}],["startofday(item.date).toisostring",{"_index":1233,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"interfaces/SalesReportRow.html":{},"injectables/UsersService.html":{}}}],["startofday(startdate",{"_index":1713,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["startofday(subdays(end",{"_index":1714,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["startofday(subdays(enddate",{"_index":1175,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"interfaces/SalesReportRow.html":{},"injectables/UsersService.html":{}}}],["startofday(subdays(now",{"_index":543,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["startofday(subdays(startdate",{"_index":1178,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["state",{"_index":16,"title":{},"body":{"entities/Address.html":{}}}],["statements",{"_index":2014,"title":{},"body":{"coverage.html":{}}}],["statistics",{"_index":172,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["stats",{"_index":1181,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["status",{"_index":139,"title":{},"body":{"controllers/AdminOrdersController.html":{},"classes/AdminProductQueryDto.html":{},"controllers/AdminProductsController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"controllers/AuthController.html":{},"entities/Order.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{},"interfaces/SalesReportRow.html":{},"classes/UpdateOrderDto.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["status')@apioperation({summary",{"_index":214,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["status'})@apiparam({name",{"_index":611,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["status'})@isoptional()@isboolean",{"_index":569,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["status'})@isoptional()@isboolean()@transform",{"_index":356,"title":{},"body":{"classes/AdminProductQueryDto.html":{}}}],["status'})@isoptional()@type(undefined)@isboolean",{"_index":667,"title":{},"body":{"classes/AdminUserQueryDto.html":{}}}],["status.enum",{"_index":244,"title":{},"body":{"controllers/AdminOrdersController.html":{},"entities/Order.html":{},"interfaces/SalesReportRow.html":{},"classes/UpdateOrderDto.html":{}}}],["status.enum.ts",{"_index":2090,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["statuscode",{"_index":1969,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["stay",{"_index":2206,"title":{},"body":{"index.html":{}}}],["steps",{"_index":2152,"title":{},"body":{"index.html":{}}}],["stock",{"_index":381,"title":{},"body":{"classes/AdminProductQueryDto.html":{},"controllers/AdminProductsController.html":{},"classes/CreateProductDto.html":{},"entities/Product.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"interfaces/SalesReportRow.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateStockDto.html":{}}}],["stock')@apioperation({summary",{"_index":497,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["stock.dto",{"_index":509,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["stock.dto.ts",{"_index":1861,"title":{},"body":{"classes/UpdateStockDto.html":{},"coverage.html":{}}}],["stock.dto.ts:12",{"_index":1863,"title":{},"body":{"classes/UpdateStockDto.html":{}}}],["stock_quantity",{"_index":415,"title":{},"body":{"classes/AdminProductQueryDto.html":{},"miscellaneous/enumerations.html":{}}}],["stockquantity",{"_index":416,"title":{},"body":{"classes/AdminProductQueryDto.html":{},"entities/Product.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateStockDto.html":{},"miscellaneous/enumerations.html":{}}}],["stores",{"_index":1481,"title":{},"body":{"entities/Product.html":{}}}],["storing",{"_index":2319,"title":{},"body":{"miscellaneous/variables.html":{}}}],["straightforward",{"_index":2167,"title":{},"body":{"index.html":{}}}],["strategies/jwt.strategy",{"_index":821,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/refresh",{"_index":827,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":1295,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["street",{"_index":17,"title":{},"body":{"entities/Address.html":{}}}],["stretch",{"_index":1811,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["strict",{"_index":799,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{}}}],["string",{"_index":23,"title":{},"body":{"entities/Address.html":{},"controllers/AdminOrdersController.html":{},"classes/AdminProductQueryDto.html":{},"controllers/AdminProductsController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomerReportRow.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDto.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"classes/OrderItemDto.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{},"entities/Product.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"interfaces/SalesReportRow.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UserQueryDto.html":{},"entities/Users.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["string})@apiquery({name",{"_index":156,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["structure",{"_index":588,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDto.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{}}}],["style",{"_index":1053,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["styling",{"_index":1815,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["sub",{"_index":808,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["subdays",{"_index":251,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"interfaces/CustomerReportRow.html":{},"interfaces/SalesReportRow.html":{},"injectables/UsersService.html":{}}}],["subdays(end",{"_index":1722,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["subdays(start",{"_index":1716,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["subject",{"_index":1292,"title":{},"body":{"interfaces/JwtPayload.html":{},"license.html":{}}}],["sublicense",{"_index":2259,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":2272,"title":{},"body":{"license.html":{}}}],["successful",{"_index":762,"title":{},"body":{"controllers/AuthController.html":{}}}],["successfully",{"_index":180,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"controllers/AuthController.html":{}}}],["successfully'})@apiresponse({status",{"_index":223,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{}}}],["sufficient",{"_index":1631,"title":{},"body":{"guards/RolesGuard.html":{}}}],["suits",{"_index":2108,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["sum",{"_index":1244,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"interfaces/SalesReportRow.html":{},"injectables/UsersService.html":{}}}],["sum(\"totalamount",{"_index":1742,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["sum(orderitem.total",{"_index":1768,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["summary",{"_index":169,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"controllers/AuthController.html":{},"interfaces/SalesReportRow.html":{}}}],["super",{"_index":1271,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["super.canactivate(context",{"_index":1280,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["support",{"_index":2187,"title":{},"body":{"index.html":{},"modules.html":{}}}],["sure",{"_index":1621,"title":{},"body":{"guards/RolesGuard.html":{}}}],["svg",{"_index":2300,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":2081,"title":{},"body":{"dependencies.html":{}}}],["sweaters",{"_index":2103,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["synchronize",{"_index":737,"title":{},"body":{"modules/AppModule.html":{}}}],["system",{"_index":1408,"title":{},"body":{"entities/Product.html":{}}}],["t",{"_index":703,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"classes/CreateProductDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{}}}],["t_shirts",{"_index":1471,"title":{},"body":{"entities/Product.html":{},"miscellaneous/enumerations.html":{}}}],["table",{"_index":2052,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2051,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":1139,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["template",{"_index":702,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{}}}],["term",{"_index":678,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{}}}],["test",{"_index":2143,"title":{},"body":{"index.html":{}}}],["test:covdeployment",{"_index":2146,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":2145,"title":{},"body":{"index.html":{}}}],["tests",{"_index":2141,"title":{},"body":{"index.html":{}}}],["text",{"_index":1336,"title":{},"body":{"entities/Order.html":{},"entities/Product.html":{}}}],["thanks",{"_index":2218,"title":{},"body":{"index.html":{}}}],["then(result",{"_index":1209,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["this.authservice.login(logindto",{"_index":792,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.logout(req.user.id",{"_index":803,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.refresh",{"_index":811,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.filltrend(activecustomerscurrentperiodraw",{"_index":1227,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["this.filltrend(currenttrendraw",{"_index":1746,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["this.filltrend(newuserstrendraw",{"_index":1201,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["this.findone(id",{"_index":1142,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"injectables/UsersService.html":{}}}],["this.formatnestedvalidationerrors(messages",{"_index":1967,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["this.formatvalidationerrors(messages",{"_index":1965,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["this.generatetokens(user",{"_index":886,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.getsalesreportdata",{"_index":1682,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["this.jwtconfiguration.accesstokensecret",{"_index":913,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtconfiguration.accesstokenttl}s",{"_index":914,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtconfiguration.refreshtokensecret",{"_index":916,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtconfiguration.refreshtokenttl}s",{"_index":917,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.signasync",{"_index":915,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.signasync(payload",{"_index":912,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.error",{"_index":1954,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["this.orderitemrepository",{"_index":1530,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"interfaces/SalesReportRow.html":{}}}],["this.orderrepository.createquerybuilder(\"order",{"_index":1206,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["this.orderrepository.createquerybuilder(\"order\").select('count(distinct",{"_index":1218,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["this.orderrepository.createquerybuilder('order",{"_index":1213,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"interfaces/SalesReportRow.html":{},"injectables/UsersService.html":{}}}],["this.orderrepository.find",{"_index":1656,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["this.orderrepository.save(updatedorders",{"_index":1654,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["this.ordersservice.findall(page",{"_index":272,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["this.ordersservice.findone(id",{"_index":312,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["this.ordersservice.generatemasterreport",{"_index":318,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["this.ordersservice.getcustomeranalytics(startdate",{"_index":276,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["this.ordersservice.getorderanalytics(startdate",{"_index":299,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["this.ordersservice.getrevenueanalytics(startdate",{"_index":274,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["this.ordersservice.getrevenuebreakdown(days",{"_index":302,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["this.ordersservice.updatebulkstatus(orderids",{"_index":309,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["this.ordersservice.updatestatus(id",{"_index":307,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["this.productrepository",{"_index":1550,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["this.productrepository.create(createproductdto",{"_index":1498,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["this.productrepository.createquerybuilder('product",{"_index":1500,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["this.productrepository.find",{"_index":1519,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["this.productrepository.findone",{"_index":1514,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"interfaces/SalesReportRow.html":{}}}],["this.productrepository.remove(product",{"_index":1517,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["this.productrepository.save(product",{"_index":1499,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["this.productsservice.create(createproductdto",{"_index":519,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["this.productsservice.findall(querydto",{"_index":517,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["this.productsservice.findone(id",{"_index":527,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["this.productsservice.generateproductperformancereport",{"_index":1700,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["this.productsservice.getproductanalytics(startdate",{"_index":544,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["this.productsservice.remove(id",{"_index":525,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["this.productsservice.update(id",{"_index":522,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["this.productsservice.updatestock(id",{"_index":537,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["this.reflector.getallandoverride('ispublic",{"_index":1276,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.reflector.getallandoverride(roles_key",{"_index":1615,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.rolesrepository.findone",{"_index":1123,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["this.updaterefreshtoken(user.id",{"_index":887,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersrepository.count",{"_index":1183,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.create",{"_index":1127,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.createquerybuilder('user",{"_index":1155,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.find",{"_index":1238,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.findandcount",{"_index":1136,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.findone",{"_index":872,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CustomerReportRow.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.save(newuser",{"_index":1130,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.save(user",{"_index":885,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.update(id",{"_index":1247,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.update(userid",{"_index":896,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findall(querydto",{"_index":642,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["this.usersservice.findone(id",{"_index":644,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["this.usersservice.generatecustomerreport",{"_index":1692,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["this.usersservice.setstatus(id",{"_index":651,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["this.usersservice.update(id",{"_index":646,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["this.usersservice.updateuserrole(id",{"_index":655,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["throw",{"_index":875,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CustomerReportRow.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"interfaces/SalesReportRow.html":{},"injectables/UsersService.html":{}}}],["throws",{"_index":870,"title":{},"body":{"injectables/AuthService.html":{}}}],["time",{"_index":300,"title":{},"body":{"controllers/AdminOrdersController.html":{},"injectables/AuthService.html":{},"index.html":{}}}],["time'})@apiquery({name",{"_index":204,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["times",{"_index":1466,"title":{},"body":{"entities/Product.html":{}}}],["timestamp",{"_index":1291,"title":{},"body":{"interfaces/JwtPayload.html":{},"entities/Users.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["toggle",{"_index":469,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["togglebestseller",{"_index":432,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["togglebestseller(@param('id",{"_index":531,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["togglebestseller(id",{"_index":466,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["toggled",{"_index":474,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["togglefeatured",{"_index":433,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["togglefeatured(@param('id",{"_index":526,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["togglefeatured(id",{"_index":476,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["togglenewarrival",{"_index":434,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["togglenewarrival(@param('id",{"_index":529,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["togglenewarrival(id",{"_index":480,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["toggleonsale",{"_index":435,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["toggleonsale(@param('id",{"_index":533,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["toggleonsale(id",{"_index":484,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["toggles",{"_index":470,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["token",{"_index":764,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["token.guard.ts",{"_index":1589,"title":{},"body":{"injectables/RefreshTokenGuard.html":{},"coverage.html":{}}}],["token.strategy",{"_index":828,"title":{},"body":{"modules/AuthModule.html":{}}}],["token.strategy.ts",{"_index":1591,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{},"coverage.html":{}}}],["token.strategy.ts:12",{"_index":1592,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["token.strategy.ts:32",{"_index":1594,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["tokens",{"_index":855,"title":{},"body":{"injectables/AuthService.html":{}}}],["tokens.refresh_token",{"_index":902,"title":{},"body":{"injectables/AuthService.html":{}}}],["tort",{"_index":2294,"title":{},"body":{"license.html":{}}}],["total",{"_index":692,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/CustomerReportRow.html":{},"entities/OrderItem.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"interfaces/SalesReportRow.html":{},"injectables/UsersService.html":{}}}],["totalamount",{"_index":1335,"title":{},"body":{"entities/Order.html":{}}}],["totalorders",{"_index":280,"title":{},"body":{"controllers/AdminOrdersController.html":{},"interfaces/CustomerReportRow.html":{},"interfaces/SalesReportRow.html":{},"injectables/UsersService.html":{}}}],["totalpages",{"_index":694,"title":{},"body":{"classes/AdminUserQueryDto.html":{},"interfaces/CustomerReportRow.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"injectables/UsersService.html":{}}}],["totalpurchasingusers",{"_index":1205,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["totalquantity",{"_index":293,"title":{},"body":{"controllers/AdminOrdersController.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["totalrevenue",{"_index":281,"title":{},"body":{"controllers/AdminOrdersController.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"interfaces/SalesReportRow.html":{}}}],["totalspent",{"_index":1242,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"interfaces/SalesReportRow.html":{},"injectables/UsersService.html":{}}}],["totalusers",{"_index":1182,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["totaluserschangepercent",{"_index":1186,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["totaluserstrend",{"_index":1200,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["touch",{"_index":2226,"title":{},"body":{"index.html":{}}}],["transactionid",{"_index":1367,"title":{},"body":{"entities/Order.html":{}}}],["transfer",{"_index":549,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"classes/LoginDto.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{}}}],["transform",{"_index":411,"title":{},"body":{"classes/AdminProductQueryDto.html":{},"classes/CreateProductDto.html":{}}}],["transformer",{"_index":412,"title":{},"body":{"classes/AdminProductQueryDto.html":{},"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/OrderItemDto.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{},"dependencies.html":{}}}],["trend",{"_index":1188,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"interfaces/SalesReportRow.html":{},"injectables/UsersService.html":{}}}],["trendarr",{"_index":1926,"title":{},"body":{"injectables/UsersService.html":{}}}],["trendarr.map(item",{"_index":1232,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"interfaces/SalesReportRow.html":{},"injectables/UsersService.html":{}}}],["trendmap",{"_index":1230,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"interfaces/SalesReportRow.html":{},"injectables/UsersService.html":{}}}],["trends",{"_index":1740,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["trim",{"_index":1666,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["true",{"_index":43,"title":{},"body":{"entities/Address.html":{},"controllers/AdminOrdersController.html":{},"classes/AdminProductQueryDto.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"entities/Order.html":{},"classes/OrderItemDto.html":{},"entities/Product.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"injectables/RefreshTokenStrategy.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"classes/UpdateProductDto.html":{},"entities/Users.html":{}}}],["true})@column({length",{"_index":1418,"title":{},"body":{"entities/Product.html":{}}}],["true})@column({type",{"_index":1430,"title":{},"body":{"entities/Product.html":{}}}],["true})@isboolean()@isoptional",{"_index":1824,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["true})@isoptional",{"_index":1803,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["true})@type(undefined",{"_index":925,"title":{},"body":{"classes/CreateOrderDto.html":{}}}],["try",{"_index":871,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["tshirt.jpg",{"_index":1010,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["tumble",{"_index":982,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["twitter",{"_index":2232,"title":{},"body":{"index.html":{}}}],["type",{"_index":21,"title":{},"body":{"entities/Address.html":{},"controllers/AdminOrdersController.html":{},"classes/AdminProductQueryDto.html":{},"controllers/AdminProductsController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomerReportRow.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"classes/OrderItemDto.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationMeta-1.html":{},"entities/Product.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"injectables/RefreshTokenStrategy.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"interfaces/SalesReportRow.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateStockDto.html":{},"classes/UserQueryDto.html":{},"entities/Users.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeof",{"_index":1960,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["typeorm",{"_index":62,"title":{},"body":{"entities/Address.html":{},"injectables/AuthService.html":{},"interfaces/CustomerReportRow.html":{},"injectables/JwtStrategy.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"entities/Roles.html":{},"interfaces/SalesReportRow.html":{},"entities/Users.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":95,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/OrdersModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([order",{"_index":1402,"title":{},"body":{"modules/OrdersModule.html":{}}}],["typeormmodule.forfeature([product",{"_index":1570,"title":{},"body":{"modules/ProductsModule.html":{}}}],["typeormmodule.forfeature([users",{"_index":107,"title":{},"body":{"modules/AdminModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":722,"title":{},"body":{"modules/AppModule.html":{}}}],["types/bcrypt",{"_index":2060,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":2130,"title":{},"body":{"index.html":{}}}],["typically",{"_index":1293,"title":{},"body":{"interfaces/JwtPayload.html":{}}}],["ui",{"_index":2082,"title":{},"body":{"dependencies.html":{}}}],["unauthorized",{"_index":640,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["unauthorized'})@apiresponse({status",{"_index":603,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["unauthorizedexception",{"_index":862,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["unauthorizedexception('access",{"_index":899,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('insufficient",{"_index":1281,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["unauthorizedexception('invalid",{"_index":876,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('user",{"_index":882,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["undefined",{"_index":158,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"classes/CreateOrderDto.html":{},"interfaces/CustomerReportRow.html":{},"entities/Order.html":{},"entities/Product.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["undefined})@apiresponse({status",{"_index":614,"title":{},"body":{"controllers/AdminUserController.html":{},"controllers/AuthController.html":{}}}],["undefined})@column('varchar",{"_index":1423,"title":{},"body":{"entities/Product.html":{}}}],["undefined})@column({type",{"_index":1437,"title":{},"body":{"entities/Product.html":{}}}],["undefined})@isarray()@isstring({each",{"_index":994,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["undefined})@isarray()@isurl",{"_index":1819,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["undefined})@isarray()@validatenested({each",{"_index":924,"title":{},"body":{"classes/CreateOrderDto.html":{}}}],["undefined})@isenum(productcategory",{"_index":991,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["undefined})@isobject()@isoptional",{"_index":1031,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["undefined})@isoptional()@isenum(orderdirection",{"_index":393,"title":{},"body":{"classes/AdminProductQueryDto.html":{}}}],["undefined})@isoptional()@isenum(productsortby",{"_index":402,"title":{},"body":{"classes/AdminProductQueryDto.html":{}}}],["undefined})@isoptional()@isstring",{"_index":681,"title":{},"body":{"classes/AdminUserQueryDto.html":{}}}],["undefined})@isstring()@isnotempty",{"_index":939,"title":{},"body":{"classes/CreateOrderDto.html":{}}}],["underwear",{"_index":2106,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["unique",{"_index":1432,"title":{},"body":{"entities/Product.html":{},"entities/Roles.html":{},"entities/Users.html":{}}}],["unit",{"_index":2142,"title":{},"body":{"index.html":{}}}],["units",{"_index":1489,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["unitssold",{"_index":1557,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["unknown",{"_index":210,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/ProductsService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["unlicensed",{"_index":2308,"title":{},"body":{"properties.html":{}}}],["update",{"_index":215,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"injectables/AuthService.html":{},"interfaces/CustomerReportRow.html":{},"injectables/ProductsService.html":{},"injectables/UsersService.html":{}}}],["update(@param('id",{"_index":521,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["update(id",{"_index":488,"title":{},"body":{"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"interfaces/CustomerReportRow.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"injectables/UsersService.html":{}}}],["updatebulkstatus",{"_index":122,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["updatebulkstatus(orderids",{"_index":211,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["updated",{"_index":218,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"entities/Product.html":{}}}],["updated'})@updatedatecolumn",{"_index":1464,"title":{},"body":{"entities/Product.html":{}}}],["updated_at",{"_index":418,"title":{},"body":{"classes/AdminProductQueryDto.html":{},"miscellaneous/enumerations.html":{}}}],["updatedat",{"_index":18,"title":{},"body":{"entities/Address.html":{},"classes/AdminProductQueryDto.html":{},"entities/Order.html":{},"entities/Product.html":{},"entities/Users.html":{},"miscellaneous/enumerations.html":{}}}],["updatedatecolumn",{"_index":49,"title":{},"body":{"entities/Address.html":{},"entities/Order.html":{},"entities/Product.html":{},"entities/Users.html":{}}}],["updatedto",{"_index":617,"title":{},"body":{"controllers/AdminUserController.html":{},"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["updatedto.role",{"_index":1144,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["updateorderdto",{"_index":1638,"title":{"classes/UpdateOrderDto.html":{}},"body":{"interfaces/SalesReportRow.html":{},"classes/UpdateOrderDto.html":{},"coverage.html":{}}}],["updateproductdto",{"_index":489,"title":{"classes/UpdateProductDto.html":{}},"body":{"controllers/AdminProductsController.html":{},"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["updateproductdto})@apiresponse({status",{"_index":492,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["updateprofileimage",{"_index":1920,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateprofileimage(id",{"_index":1148,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["updaterefreshtoken",{"_index":843,"title":{},"body":{"injectables/AuthService.html":{}}}],["updaterefreshtoken(userid",{"_index":860,"title":{},"body":{"injectables/AuthService.html":{}}}],["updaterole",{"_index":598,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["updaterole(id",{"_index":620,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["updates",{"_index":491,"title":{},"body":{"controllers/AdminProductsController.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"index.html":{}}}],["updatestatus",{"_index":123,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["updatestatus(id",{"_index":221,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["updatestock",{"_index":436,"title":{},"body":{"controllers/AdminProductsController.html":{},"injectables/ProductsService.html":{}}}],["updatestock(@param('id",{"_index":536,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["updatestock(id",{"_index":494,"title":{},"body":{"controllers/AdminProductsController.html":{},"injectables/ProductsService.html":{}}}],["updatestockdto",{"_index":495,"title":{"classes/UpdateStockDto.html":{}},"body":{"controllers/AdminProductsController.html":{},"classes/UpdateStockDto.html":{},"coverage.html":{}}}],["updatestockdto.stockquantity",{"_index":538,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["updatestockdto})@apiresponse({status",{"_index":499,"title":{},"body":{"controllers/AdminProductsController.html":{}}}],["updateuserdto",{"_index":645,"title":{"classes/UpdateUserDto.html":{}},"body":{"controllers/AdminUserController.html":{},"interfaces/CustomerReportRow.html":{},"classes/UpdateUserDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updateuserrole",{"_index":1921,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuserrole(id",{"_index":1248,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["updating",{"_index":551,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{}}}],["url",{"_index":1007,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateProductDto.html":{}}}],["urls",{"_index":1436,"title":{},"body":{"entities/Product.html":{},"classes/UpdateProductDto.html":{}}}],["use",{"_index":1119,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"license.html":{}}}],["usefactory",{"_index":723,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["useguards",{"_index":232,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{},"controllers/AuthController.html":{}}}],["useguards(authguard('jwt",{"_index":801,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(jwtauthguard",{"_index":258,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"controllers/AdminUserController.html":{}}}],["user",{"_index":19,"title":{},"body":{"entities/Address.html":{},"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomerReportRow.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Order.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"interfaces/SalesReportRow.html":{},"entities/Users.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user's",{"_index":562,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AdminUserController.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDto.html":{}}}],["user'})@apiresponse({status",{"_index":618,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["user.addresses",{"_index":67,"title":{},"body":{"entities/Address.html":{}}}],["user.addresses)@joincolumn({name",{"_index":53,"title":{},"body":{"entities/Address.html":{}}}],["user.controller",{"_index":101,"title":{},"body":{"modules/AdminModule.html":{}}}],["user.controller.ts",{"_index":592,"title":{},"body":{"controllers/AdminUserController.html":{},"coverage.html":{}}}],["user.controller.ts:129",{"_index":616,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["user.controller.ts:164",{"_index":623,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["user.controller.ts:58",{"_index":604,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["user.controller.ts:76",{"_index":609,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["user.controller.ts:95",{"_index":619,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["user.createdat",{"_index":1246,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["user.decorator.ts",{"_index":2025,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":630,"title":{},"body":{"controllers/AdminUserController.html":{},"interfaces/CustomerReportRow.html":{},"classes/UpdateUserDto.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":547,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:18",{"_index":1073,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:21",{"_index":568,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["user.dto.ts:27",{"_index":1076,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:30",{"_index":577,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["user.dto.ts:35",{"_index":1069,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:40",{"_index":561,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["user.dto.ts:43",{"_index":1071,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:49",{"_index":565,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["user.dto.ts:55",{"_index":1083,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:58",{"_index":579,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["user.dto.ts:63",{"_index":1078,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:67",{"_index":581,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["user.dto.ts:72",{"_index":1086,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:76",{"_index":570,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["user.dto.ts:85",{"_index":572,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["user.dto.ts:94",{"_index":575,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["user.email",{"_index":907,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["user.email.split('@')[0",{"_index":889,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.firstname",{"_index":1158,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["user.id",{"_index":906,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["user.isactive",{"_index":881,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["user.lastloginat",{"_index":884,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.lastname",{"_index":1160,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["user.orders",{"_index":1365,"title":{},"body":{"entities/Order.html":{}}}],["user.orders)@joincolumn({name",{"_index":1357,"title":{},"body":{"entities/Order.html":{}}}],["user.orders.length",{"_index":1241,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["user.orders.reduce((sum",{"_index":1243,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["user.password",{"_index":880,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["user.profileimage",{"_index":1149,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["user.refreshtoken",{"_index":898,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.roles",{"_index":1147,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"injectables/UsersService.html":{}}}],["user.roles.length",{"_index":1623,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user.roles.map((role",{"_index":908,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.roles.map(role",{"_index":1626,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user@example.com",{"_index":1329,"title":{},"body":{"classes/LoginDto.html":{}}}],["user@example.com'})@isemail()@isnotempty",{"_index":1323,"title":{},"body":{"classes/LoginDto.html":{}}}],["userid",{"_index":20,"title":{},"body":{"entities/Address.html":{},"controllers/AdminOrdersController.html":{},"injectables/AuthService.html":{},"interfaces/CustomerReportRow.html":{},"entities/Order.html":{},"interfaces/SalesReportRow.html":{},"injectables/UsersService.html":{}}}],["userid\")').where",{"_index":1219,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["username",{"_index":729,"title":{},"body":{"modules/AppModule.html":{}}}],["userquerydto",{"_index":1104,"title":{"classes/UserQueryDto.html":{}},"body":{"interfaces/CustomerReportRow.html":{},"classes/UserQueryDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["userrepository",{"_index":1643,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["userroles",{"_index":1625,"title":{},"body":{"guards/RolesGuard.html":{}}}],["userroles.includes(role",{"_index":1629,"title":{},"body":{"guards/RolesGuard.html":{}}}],["users",{"_index":51,"title":{"entities/Users.html":{}},"body":{"entities/Address.html":{},"modules/AdminModule.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserQueryDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/CustomerReportRow.html":{},"injectables/JwtStrategy.html":{},"entities/Order.html":{},"modules/OrdersModule.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"interfaces/SalesReportRow.html":{},"entities/Users.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users.entity",{"_index":63,"title":{},"body":{"entities/Address.html":{}}}],["users.map(user",{"_index":1240,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["users.service",{"_index":1914,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/dto/admin",{"_index":629,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["users/entities/address.entity",{"_index":1401,"title":{},"body":{"modules/OrdersModule.html":{},"interfaces/SalesReportRow.html":{}}}],["users/entities/users.entity",{"_index":1361,"title":{},"body":{"entities/Order.html":{},"modules/OrdersModule.html":{},"interfaces/SalesReportRow.html":{}}}],["users/enums/roles.enum",{"_index":242,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{},"guards/RolesGuard.html":{}}}],["users/users.module",{"_index":718,"title":{},"body":{"modules/AppModule.html":{},"modules/OrdersModule.html":{}}}],["users/users.service",{"_index":1642,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["usersmodule",{"_index":84,"title":{"modules/UsersModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/OrdersModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":850,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CustomerReportRow.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["usersservice",{"_index":627,"title":{"injectables/UsersService.html":{}},"body":{"controllers/AdminUserController.html":{},"interfaces/CustomerReportRow.html":{},"interfaces/SalesReportRow.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":1313,"title":{},"body":{"injectables/JwtStrategy.html":{},"index.html":{}}}],["uuid",{"_index":55,"title":{},"body":{"entities/Address.html":{},"controllers/AdminUserController.html":{},"entities/Order.html":{},"entities/OrderItem.html":{}}}],["uuid'})@apibody({schema",{"_index":613,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["valid",{"_index":1082,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{}}}],["validate",{"_index":1300,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["validate(payload",{"_index":1303,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(req",{"_index":1593,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["validated",{"_index":1306,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validatenested",{"_index":943,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/OrderItemDto.html":{}}}],["validates",{"_index":1298,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validation",{"_index":589,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"injectables/JwtAuthGuard.html":{},"classes/LoginDto.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["validationerror",{"_index":1941,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["validationerroritem",{"_index":1936,"title":{"interfaces/ValidationErrorItem.html":{}},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"coverage.html":{}}}],["validationerrors",{"_index":1959,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["validationexceptionfilter",{"_index":1943,"title":{"classes/ValidationExceptionFilter.html":{}},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"coverage.html":{}}}],["validator",{"_index":410,"title":{},"body":{"classes/AdminProductQueryDto.html":{},"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/OrderItemDto.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateStockDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{},"dependencies.html":{}}}],["validsortfields",{"_index":1163,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["validsortfields.includes(sortby",{"_index":1165,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["value",{"_index":197,"title":{},"body":{"controllers/AdminOrdersController.html":{},"classes/AdminProductQueryDto.html":{},"classes/AdminUserQueryDto.html":{},"classes/CreateProductDto.html":{},"interfaces/SalesReportRow.html":{},"classes/UserQueryDto.html":{},"classes/ValidationExceptionFilter.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["varchar",{"_index":26,"title":{},"body":{"entities/Address.html":{},"entities/Users.html":{}}}],["variable",{"_index":2026,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1317,"title":{"miscellaneous/variables.html":{}},"body":{"injectables/JwtStrategy.html":{},"injectables/RefreshTokenStrategy.html":{},"miscellaneous/variables.html":{}}}],["verification",{"_index":571,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/AdminUserQueryDto.html":{},"interfaces/PaginatedResponse-1.html":{},"interfaces/PaginationMeta-1.html":{}}}],["version",{"_index":2306,"title":{},"body":{"properties.html":{}}}],["video",{"_index":2194,"title":{},"body":{"index.html":{}}}],["view",{"_index":262,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["view)'})@apiquery({name",{"_index":150,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["viewcount",{"_index":1416,"title":{},"body":{"entities/Product.html":{}}}],["viewed",{"_index":1467,"title":{},"body":{"entities/Product.html":{}}}],["visit",{"_index":2184,"title":{},"body":{"index.html":{}}}],["visitors",{"_index":1189,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["visualize",{"_index":2197,"title":{},"body":{"index.html":{}}}],["void",{"_index":2009,"title":{},"body":{"classes/ValidationExceptionFilter.html":{}}}],["warranties",{"_index":2279,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":2275,"title":{},"body":{"license.html":{}}}],["wash",{"_index":961,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/OrderItemDto.html":{},"classes/UpdateProductDto.html":{}}}],["watch",{"_index":2137,"title":{},"body":{"index.html":{}}}],["wear",{"_index":1037,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["wear.'})@isstring()@isnotempty",{"_index":1005,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["website",{"_index":2230,"title":{},"body":{"index.html":{}}}],["week",{"_index":191,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["weight",{"_index":1050,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["welcome",{"_index":890,"title":{},"body":{"injectables/AuthService.html":{}}}],["where('order.createdat",{"_index":1772,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["where('orderitem.productid",{"_index":1558,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["where('product.stockquantity",{"_index":1552,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["where(`\"createdat",{"_index":1195,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"interfaces/SalesReportRow.html":{},"injectables/UsersService.html":{}}}],["where(where.createdat",{"_index":1539,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["where.createdat",{"_index":1525,"title":{},"body":{"interfaces/ProductPerformanceRow.html":{},"injectables/ProductsService.html":{}}}],["wherecondition",{"_index":1134,"title":{},"body":{"interfaces/CustomerReportRow.html":{},"injectables/UsersService.html":{}}}],["wherecurrent",{"_index":1723,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["whereprevious",{"_index":1725,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["whether",{"_index":471,"title":{},"body":{"controllers/AdminProductsController.html":{},"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/UpdateProductDto.html":{},"license.html":{}}}],["white",{"_index":1045,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["width",{"_index":1687,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["without",{"_index":2251,"title":{},"body":{"license.html":{}}}],["workbook",{"_index":1674,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["workbook.addworksheet('customer",{"_index":1690,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["workbook.addworksheet('product",{"_index":1698,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["workbook.addworksheet('sales",{"_index":1681,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["workbook.created",{"_index":1677,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["workbook.creator",{"_index":1676,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["workbook.xlsx.writebuffer",{"_index":1705,"title":{},"body":{"interfaces/SalesReportRow.html":{}}}],["working",{"_index":2183,"title":{},"body":{"index.html":{}}}],["wrapping",{"_index":933,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{}}}],["x",{"_index":2209,"title":{},"body":{"index.html":{}}}],["xl",{"_index":1042,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["xlsx",{"_index":130,"title":{},"body":{"controllers/AdminOrdersController.html":{}}}],["xs",{"_index":1039,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["xxl",{"_index":1043,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["yes",{"_index":160,"title":{},"body":{"controllers/AdminOrdersController.html":{},"controllers/AdminProductsController.html":{},"injectables/ProductsService.html":{}}}],["you'd",{"_index":2222,"title":{},"body":{"index.html":{}}}],["you're",{"_index":2147,"title":{},"body":{"index.html":{}}}],["yyyy",{"_index":1063,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/SalesReportRow.html":{}}}],["z0",{"_index":1981,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["za",{"_index":1980,"title":{},"body":{"interfaces/ValidationErrorItem.html":{},"classes/ValidationExceptionFilter.html":{}}}],["zip",{"_index":1859,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["zoom",{"_index":85,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/OrdersModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"entities/Address.html":{"url":"entities/Address.html","title":"entity - Address","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Address\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/address.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                city\n                            \n                            \n                                    \n                                country\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                isDefault\n                            \n                            \n                                    \n                                label\n                            \n                            \n                                    \n                                postalCode\n                            \n                            \n                                    \n                                state\n                            \n                            \n                                    \n                                street\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    \n                                user\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        city\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 100})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/address.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 100})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/address.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/address.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/address.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isDefault\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'boolean', default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/address.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        label\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/address.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        postalCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 20})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/address.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 100})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/address.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        street\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/address.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/address.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Users\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.addresses)@JoinColumn({name: 'userId'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/address.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'uuid'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/address.entity.ts:39\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  ManyToOne,\n  CreateDateColumn,\n  UpdateDateColumn,\n  JoinColumn,\n} from 'typeorm';\nimport { Users } from './users.entity';\n\n@Entity('addresses')\nexport class Address {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({ type: 'varchar', length: 255 })\n  street: string;\n\n  @Column({ type: 'varchar', length: 100 })\n  city: string;\n\n  @Column({ type: 'varchar', length: 100 })\n  state: string;\n\n  @Column({ type: 'varchar', length: 20 })\n  postalCode: string;\n\n  @Column({ type: 'varchar', length: 100 })\n  country: string;\n\n  @Column({ type: 'boolean', default: false })\n  isDefault: boolean;\n\n  @Column({ type: 'varchar', length: 255, nullable: true })\n  label: string;\n\n  @Column({ type: 'uuid' })\n  userId: string;\n\n  @ManyToOne(() => Users, user => user.addresses)\n  @JoinColumn({ name: 'userId' })\n  user: Users;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n} \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AdminModule.html":{"url":"modules/AdminModule.html","title":"module - AdminModule","body":"\n                   \n\n\n\n\n    Modules\n    AdminModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AdminModule\n\n\n\ncluster_AdminModule_imports\n\n\n\n\nOrdersModule\n\nOrdersModule\n\n\n\nAdminModule\n\nAdminModule\n\nAdminModule -->\n\nOrdersModule->AdminModule\n\n\n\n\n\nProductsModule\n\nProductsModule\n\nAdminModule -->\n\nProductsModule->AdminModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAdminModule -->\n\nUsersModule->AdminModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/admin/admin.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            AdminUserController\n                        \n                        \n                            AdminProductsController\n                        \n                        \n                            AdminOrdersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            OrdersModule\n                        \n                        \n                            ProductsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Users } from 'src/users/entities/users.entity';\nimport { Roles } from 'src/users/entities/roles.entity';\nimport { AdminUserController } from './controllers/admin-user.controller';\nimport { ProductsModule } from '../products/products.module';\nimport { OrdersModule } from '../orders/orders.module';\nimport { AdminProductsController } from './controllers/admin-products.controller';\nimport { AdminOrdersController } from './controllers/admin-orders.controller';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Users, Roles]),\n    ProductsModule,\n    OrdersModule,\n    UsersModule,\n  ],\n  controllers: [AdminUserController, AdminProductsController, AdminOrdersController],\n})\nexport class AdminModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AdminOrdersController.html":{"url":"controllers/AdminOrdersController.html","title":"controller - AdminOrdersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AdminOrdersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/controllers/admin-orders.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                admin/orders\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                downloadMasterReport\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                getAnalyticsSummary\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                getCustomerAnalytics\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                getRevenueAnalytics\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getRevenueBreakdown\n                            \n                            \n                                    \n                                    \n                                    \n                                updateBulkStatus\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                updateStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        downloadMasterReport\n                        \n                    \n                \n            \n            \n                \n                        \n                    downloadMasterReport(res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('report/download')@ApiOperation({summary: 'Download a master report as XLSX'})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/controllers/admin-orders.controller.ts:129\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(page?: number, limit?: number, status?: OrderStatus, userId?: string, startDate?: Date, endDate?: Date, sortBy?: string, sortOrder?: \"ASC\" | \"DESC\")\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Get all orders (admin view)'})@ApiQuery({name: 'page', required: false, type: Number})@ApiQuery({name: 'limit', required: false, type: Number})@ApiQuery({name: 'status', required: false, enum: OrderStatus})@ApiQuery({name: 'userId', required: false, type: String})@ApiQuery({name: 'startDate', required: false, type: Date})@ApiQuery({name: 'endDate', required: false, type: Date})@ApiQuery({name: 'sortBy', required: false, type: String})@ApiQuery({name: 'sortOrder', required: false, enum: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/controllers/admin-orders.controller.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                status\n                                            \n                                                            OrderStatus\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                startDate\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                endDate\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                sortBy\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                sortOrder\n                                            \n                                                        \"ASC\" | \"DESC\"\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({summary: 'Get a single order by ID (admin only)'})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/controllers/admin-orders.controller.ts:123\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        getAnalyticsSummary\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAnalyticsSummary(startDate?: Date, endDate?: Date)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('analytics/summary')@ApiOperation({summary: 'Get order analytics summary (admin)', description: 'Retrieves summary statistics about all orders for admin.'})@ApiQuery({name: 'startDate', required: false, type: Date, description: 'Start date for analytics period'})@ApiQuery({name: 'endDate', required: false, type: Date, description: 'End date for analytics period'})@ApiResponse({status: 200, description: 'Analytics summary retrieved successfully', schema: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/controllers/admin-orders.controller.ts:84\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                startDate\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                endDate\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        getCustomerAnalytics\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCustomerAnalytics(startDate?: Date, endDate?: Date)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('analytics/customer')@ApiOperation({summary: 'Get customer order analytics'})@ApiQuery({name: 'startDate', required: false, type: Date})@ApiQuery({name: 'endDate', required: false, type: Date})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/controllers/admin-orders.controller.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                startDate\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                endDate\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        getRevenueAnalytics\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRevenueAnalytics(startDate: Date, endDate: Date, interval: \"day\" | \"week\" | \"month\")\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('analytics/revenue')@ApiOperation({summary: 'Get detailed revenue analytics'})@ApiQuery({name: 'startDate', required: true, type: Date})@ApiQuery({name: 'endDate', required: true, type: Date})@ApiQuery({name: 'interval', required: false, enum: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/controllers/admin-orders.controller.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                startDate\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                endDate\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                interval\n                                            \n                                                        \"day\" | \"week\" | \"month\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'day'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getRevenueBreakdown\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRevenueBreakdown(days?: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('analytics/revenue-breakdown')@ApiOperation({summary: 'Get revenue breakdown by category over time'})@ApiQuery({name: 'days', required: false, type: Number, description: 'Number of days to look back (default: 7)'})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/controllers/admin-orders.controller.ts:94\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                days\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        updateBulkStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateBulkStatus(orderIds: string[], status: OrderStatus, adminNotes?: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('bulk-status')@ApiOperation({summary: 'Update multiple orders status (admin only)'})@ApiResponse({status: 200, description: 'Orders status updated successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/controllers/admin-orders.controller.ts:113\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                orderIds\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                status\n                                            \n                                                            OrderStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                adminNotes\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(id: string, status: OrderStatus, adminNotes?: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/status')@ApiOperation({summary: 'Update order status (admin only)'})@ApiResponse({status: 200, description: 'Order status updated successfully'})@ApiResponse({status: 404, description: 'Order not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/controllers/admin-orders.controller.ts:102\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                status\n                                            \n                                                            OrderStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                adminNotes\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Query, UseGuards, Res } from '@nestjs/common';\nimport { OrdersService } from '../../orders/orders.service';\nimport { JwtAuthGuard } from '../../auth/guards/jwt-auth.guard';\nimport { RolesGuard } from '../../auth/guards/roles.guard';\nimport { Roles } from '../../auth/decorators/roles.decorator';\nimport { Role } from '../../users/enums/roles.enum';\nimport { OrderStatus } from '../../orders/enums/order-status.enum';\nimport { ApiTags, ApiOperation, ApiResponse, ApiQuery, ApiBearerAuth } from '@nestjs/swagger';\nimport { subDays, startOfDay, endOfDay } from 'date-fns';\nimport { Response } from 'express';\n\n@ApiTags('G. Admin - Orders')\n@ApiBearerAuth()\n@Controller('admin/orders')\n@UseGuards(JwtAuthGuard, RolesGuard)\n@Roles(Role.ADMIN)\nexport class AdminOrdersController {\n  constructor(private readonly ordersService: OrdersService) {}\n\n  @Get()\n  @ApiOperation({ summary: 'Get all orders (admin view)' })\n  @ApiQuery({ name: 'page', required: false, type: Number })\n  @ApiQuery({ name: 'limit', required: false, type: Number })\n  @ApiQuery({ name: 'status', required: false, enum: OrderStatus })\n  @ApiQuery({ name: 'userId', required: false, type: String })\n  @ApiQuery({ name: 'startDate', required: false, type: Date })\n  @ApiQuery({ name: 'endDate', required: false, type: Date })\n  @ApiQuery({ name: 'sortBy', required: false, type: String })\n  @ApiQuery({ name: 'sortOrder', required: false, enum: ['ASC', 'DESC'] })\n  findAll(\n    @Query('page') page?: number,\n    @Query('limit') limit?: number,\n    @Query('status') status?: OrderStatus,\n    @Query('userId') userId?: string,\n    @Query('startDate') startDate?: Date,\n    @Query('endDate') endDate?: Date,\n    @Query('sortBy') sortBy?: string,\n    @Query('sortOrder') sortOrder?: 'ASC' | 'DESC',\n  ) {\n    return this.ordersService.findAll(page, limit, status, startDate, endDate, userId, sortBy, sortOrder);\n  }\n\n  @Get('analytics/revenue')\n  @ApiOperation({ summary: 'Get detailed revenue analytics' })\n  @ApiQuery({ name: 'startDate', required: true, type: Date })\n  @ApiQuery({ name: 'endDate', required: true, type: Date })\n  @ApiQuery({ name: 'interval', required: false, enum: ['day', 'week', 'month'] })\n  getRevenueAnalytics(\n    @Query('startDate') startDate: Date,\n    @Query('endDate') endDate: Date,\n    @Query('interval') interval: 'day' | 'week' | 'month' = 'day',\n  ) {\n    return this.ordersService.getRevenueAnalytics(startDate, endDate, interval);\n  }\n\n  @Get('analytics/customer')\n  @ApiOperation({ summary: 'Get customer order analytics' })\n  @ApiQuery({ name: 'startDate', required: false, type: Date })\n  @ApiQuery({ name: 'endDate', required: false, type: Date })\n  getCustomerAnalytics(\n    @Query('startDate') startDate?: Date,\n    @Query('endDate') endDate?: Date,\n  ) {\n    return this.ordersService.getCustomerAnalytics(startDate, endDate);\n  }\n\n  @Get('analytics/summary')\n  @ApiOperation({ summary: 'Get order analytics summary (admin)', description: 'Retrieves summary statistics about all orders for admin.' })\n  @ApiQuery({ name: 'startDate', required: false, type: Date, description: 'Start date for analytics period' })\n  @ApiQuery({ name: 'endDate', required: false, type: Date, description: 'End date for analytics period' })\n  @ApiResponse({ status: 200, description: 'Analytics summary retrieved successfully', schema: { example: {\n    totalOrders: 100,\n    totalRevenue: 9999.99,\n    averageOrderValue: 99.99,\n    shippedOrders: 25,\n    pendingOrders: 20,\n    ordersByStatus: { PENDING: 20, SHIPPED: 25 },\n    popularProducts: [\n      { productId: '...', totalquantity: '13' }\n    ],\n    startDate: '2024-06-14T18:00:00.000Z',\n    endDate: '2024-06-21T17:59:59.999Z'\n  }}})\n  getAnalyticsSummary(\n    @Query('startDate') startDate?: Date,\n    @Query('endDate') endDate?: Date,\n  ) {\n    return this.ordersService.getOrderAnalytics(startDate, endDate);\n  }\n\n  @Get('analytics/revenue-breakdown')\n  @ApiOperation({ summary: 'Get revenue breakdown by category over time' })\n  @ApiQuery({ name: 'days', required: false, type: Number, description: 'Number of days to look back (default: 7)' })\n  async getRevenueBreakdown(@Query('days') days?: number) {\n    return this.ordersService.getRevenueBreakdown(days);\n  }\n\n  @Patch(':id/status')\n  @ApiOperation({ summary: 'Update order status (admin only)' })\n  @ApiResponse({ status: 200, description: 'Order status updated successfully' })\n  @ApiResponse({ status: 404, description: 'Order not found' })\n  updateStatus(\n    @Param('id') id: string,\n    @Body('status') status: OrderStatus,\n    @Body('adminNotes') adminNotes?: string,\n  ) {\n    return this.ordersService.updateStatus(id, status, adminNotes);\n  }\n\n  @Patch('bulk-status')\n  @ApiOperation({ summary: 'Update multiple orders status (admin only)' })\n  @ApiResponse({ status: 200, description: 'Orders status updated successfully' })\n  updateBulkStatus(\n    @Body('orderIds') orderIds: string[],\n    @Body('status') status: OrderStatus,\n    @Body('adminNotes') adminNotes?: string,\n  ) {\n    return this.ordersService.updateBulkStatus(orderIds, status, adminNotes);\n  }\n\n  @Get(':id')\n  @ApiOperation({ summary: 'Get a single order by ID (admin only)' })\n  findOne(@Param('id') id: string) {\n    return this.ordersService.findOne(id);\n  }\n\n  @Get('report/download')\n  @ApiOperation({ summary: 'Download a master report as XLSX' })\n  async downloadMasterReport(@Res() res: Response) {\n    const buffer = await this.ordersService.generateMasterReport();\n    const filename = `master-report-${new Date().toISOString()}.xlsx`;\n    res.set({\n      'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n      'Content-Disposition': `attachment; filename=${filename}`,\n    });\n    res.send(buffer);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AdminProductQueryDto.html":{"url":"classes/AdminProductQueryDto.html","title":"class - AdminProductQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AdminProductQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/dto/admin-product-query.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                brand\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                category\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                isActive\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                isBestSeller\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                isFeatured\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                isNewArrival\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                isOnSale\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                maxPrice\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                maxRating\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                maxStock\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                minPrice\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                minRating\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                minStock\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                orderDirection\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                sortBy\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        brand\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filter by brand'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/admin-product-query.dto.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ProductCategory\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filter by product category', enum: ProductCategory})@IsOptional()@IsEnum(ProductCategory)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/admin-product-query.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filter by active status'})@IsOptional()@IsBoolean()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/admin-product-query.dto.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        isBestSeller\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filter by best-seller status'})@IsOptional()@IsBoolean()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/admin-product-query.dto.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        isFeatured\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filter by featured status'})@IsOptional()@IsBoolean()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/admin-product-query.dto.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        isNewArrival\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filter by new arrival status'})@IsOptional()@IsBoolean()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/admin-product-query.dto.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        isOnSale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filter by on-sale status'})@IsOptional()@IsBoolean()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/admin-product-query.dto.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of items per page. Set to 0 to fetch all items.', default: 10})@IsOptional()@IsNumber()@Min(0)@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/admin-product-query.dto.ts:127\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        maxPrice\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Maximum price filter'})@IsOptional()@IsNumber()@Min(0)@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/admin-product-query.dto.ts:85\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        maxRating\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Maximum rating filter'})@IsOptional()@IsNumber()@Min(0)@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/admin-product-query.dto.ts:113\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        maxStock\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Maximum stock quantity filter'})@IsOptional()@IsNumber()@Min(0)@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/admin-product-query.dto.ts:99\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        minPrice\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Minimum price filter'})@IsOptional()@IsNumber()@Min(0)@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/admin-product-query.dto.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        minRating\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Minimum rating filter'})@IsOptional()@IsNumber()@Min(0)@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/admin-product-query.dto.ts:106\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        minStock\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Minimum stock quantity filter'})@IsOptional()@IsNumber()@Min(0)@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/admin-product-query.dto.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filter by product name (case-insensitive)'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/admin-product-query.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirection\n\n                    \n                \n                \n                    \n                        Default value : OrderDirection.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Sort order', enum: OrderDirection, default: undefined})@IsOptional()@IsEnum(OrderDirection)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/admin-product-query.dto.ts:137\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Page number for pagination', default: 1})@IsOptional()@IsNumber()@Min(1)@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/admin-product-query.dto.ts:120\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        sortBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ProductSortBy\n\n                    \n                \n                \n                    \n                        Default value : ProductSortBy.CREATED_AT\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Field to sort by', enum: ProductSortBy, default: undefined})@IsOptional()@IsEnum(ProductSortBy)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/admin-product-query.dto.ts:132\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsOptional,\n  IsString,\n  IsNumber,\n  IsBoolean,\n  Min,\n  IsEnum,\n} from 'class-validator';\nimport { Transform } from 'class-transformer';\nimport { ProductCategory } from '../entities/product.entity';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\n\nexport enum ProductSortBy {\n  NAME = 'name',\n  PRICE = 'price',\n  STOCK_QUANTITY = 'stockQuantity',\n  CREATED_AT = 'createdAt',\n  UPDATED_AT = 'updatedAt',\n  RATING = 'rating',\n}\n\nexport enum OrderDirection {\n  ASC = 'ASC',\n  DESC = 'DESC',\n}\n\nexport class AdminProductQueryDto {\n  @ApiPropertyOptional({ description: 'Filter by product name (case-insensitive)' })\n  @IsOptional()\n  @IsString()\n  name?: string;\n\n  @ApiPropertyOptional({ description: 'Filter by product category', enum: ProductCategory })\n  @IsOptional()\n  @IsEnum(ProductCategory)\n  category?: ProductCategory;\n\n  @ApiPropertyOptional({ description: 'Filter by brand' })\n  @IsOptional()\n  @IsString()\n  brand?: string;\n\n  @ApiPropertyOptional({ description: 'Filter by featured status' })\n  @IsOptional()\n  @IsBoolean()\n  @Transform(({ value }) => value === 'true' || value === true)\n  isFeatured?: boolean;\n\n  @ApiPropertyOptional({ description: 'Filter by new arrival status' })\n  @IsOptional()\n  @IsBoolean()\n  @Transform(({ value }) => value === 'true' || value === true)\n  isNewArrival?: boolean;\n\n  @ApiPropertyOptional({ description: 'Filter by on-sale status' })\n  @IsOptional()\n  @IsBoolean()\n  @Transform(({ value }) => value === 'true' || value === true)\n  isOnSale?: boolean;\n\n  @ApiPropertyOptional({ description: 'Filter by best-seller status' })\n  @IsOptional()\n  @IsBoolean()\n  @Transform(({ value }) => value === 'true' || value === true)\n  isBestSeller?: boolean;\n\n  @ApiPropertyOptional({ description: 'Filter by active status' })\n  @IsOptional()\n  @IsBoolean()\n  @Transform(({ value }) => value === 'true' || value === true)\n  isActive?: boolean;\n\n  @ApiPropertyOptional({ description: 'Minimum price filter' })\n  @IsOptional()\n  @IsNumber()\n  @Min(0)\n  @Transform(({ value }) => parseFloat(value))\n  minPrice?: number;\n\n  @ApiPropertyOptional({ description: 'Maximum price filter' })\n  @IsOptional()\n  @IsNumber()\n  @Min(0)\n  @Transform(({ value }) => parseFloat(value))\n  maxPrice?: number;\n\n  @ApiPropertyOptional({ description: 'Minimum stock quantity filter' })\n  @IsOptional()\n  @IsNumber()\n  @Min(0)\n  @Transform(({ value }) => parseInt(value, 10))\n  minStock?: number;\n\n  @ApiPropertyOptional({ description: 'Maximum stock quantity filter' })\n  @IsOptional()\n  @IsNumber()\n  @Min(0)\n  @Transform(({ value }) => parseInt(value, 10))\n  maxStock?: number;\n\n  @ApiPropertyOptional({ description: 'Minimum rating filter' })\n  @IsOptional()\n  @IsNumber()\n  @Min(0)\n  @Transform(({ value }) => parseFloat(value))\n  minRating?: number;\n\n  @ApiPropertyOptional({ description: 'Maximum rating filter' })\n  @IsOptional()\n  @IsNumber()\n  @Min(0)\n  @Transform(({ value }) => parseFloat(value))\n  maxRating?: number;\n\n  @ApiPropertyOptional({ description: 'Page number for pagination', default: 1 })\n  @IsOptional()\n  @IsNumber()\n  @Min(1)\n  @Transform(({ value }) => parseInt(value, 10))\n  page?: number = 1;\n\n  @ApiPropertyOptional({ description: 'Number of items per page. Set to 0 to fetch all items.', default: 10 })\n  @IsOptional()\n  @IsNumber()\n  @Min(0)\n  @Transform(({ value }) => parseInt(value, 10))\n  limit?: number = 10;\n\n  @ApiPropertyOptional({ description: 'Field to sort by', enum: ProductSortBy, default: ProductSortBy.CREATED_AT })\n  @IsOptional()\n  @IsEnum(ProductSortBy)\n  sortBy?: ProductSortBy = ProductSortBy.CREATED_AT;\n\n  @ApiPropertyOptional({ description: 'Sort order', enum: OrderDirection, default: OrderDirection.DESC })\n  @IsOptional()\n  @IsEnum(OrderDirection)\n  orderDirection?: OrderDirection = OrderDirection.DESC;\n} \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AdminProductsController.html":{"url":"controllers/AdminProductsController.html","title":"controller - AdminProductsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AdminProductsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/controllers/admin-products.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                admin/products\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                getProductAnalytics\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                toggleBestSeller\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                toggleFeatured\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                toggleNewArrival\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                toggleOnSale\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                update\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                updateStock\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createProductDto: CreateProductDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Create a new product', description: 'Creates a new product. (Admin only)'})@ApiBody({type: CreateProductDto})@ApiResponse({status: 201, description: 'Product created successfully'})@ApiResponse({status: 403, description: 'Forbidden - Admin access required'})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/controllers/admin-products.controller.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createProductDto\n                                            \n                                                            CreateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(queryDto: AdminProductQueryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Get all products with filtering and pagination'})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/controllers/admin-products.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryDto\n                                            \n                                                            AdminProductQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        getProductAnalytics\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProductAnalytics(days?: number, startDate?: Date, endDate?: Date)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('analytics')@ApiOperation({summary: 'Get product performance analytics'})@ApiQuery({name: 'days', required: false, type: Number})@ApiQuery({name: 'startDate', required: false, type: Date})@ApiQuery({name: 'endDate', required: false, type: Date})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/controllers/admin-products.controller.ts:114\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                days\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                startDate\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                endDate\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOperation({summary: 'Delete a product', description: 'Deletes an existing product. (Admin only)'})@ApiResponse({status: 200, description: 'Product deleted successfully'})@ApiResponse({status: 403, description: 'Forbidden - Admin access required'})@ApiResponse({status: 404, description: 'Product not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/controllers/admin-products.controller.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        toggleBestSeller\n                        \n                    \n                \n            \n            \n                \n                        \n                    toggleBestSeller(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/toggle-best-seller')@ApiOperation({summary: 'Toggle best seller status', description: 'Toggles whether a product is marked as best seller'})@ApiResponse({status: 200, description: 'Best seller status toggled successfully'})@ApiResponse({status: 403, description: 'Forbidden - Admin access required'})@ApiResponse({status: 404, description: 'Product not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/controllers/admin-products.controller.ts:83\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        toggleFeatured\n                        \n                    \n                \n            \n            \n                \n                        \n                    toggleFeatured(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/toggle-featured')@ApiOperation({summary: 'Toggle featured status', description: 'Toggles whether a product is featured or not'})@ApiResponse({status: 200, description: 'Featured status toggled successfully'})@ApiResponse({status: 403, description: 'Forbidden - Admin access required'})@ApiResponse({status: 404, description: 'Product not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/controllers/admin-products.controller.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        toggleNewArrival\n                        \n                    \n                \n            \n            \n                \n                        \n                    toggleNewArrival(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/toggle-new-arrival')@ApiOperation({summary: 'Toggle new arrival status', description: 'Toggles whether a product is marked as new arrival'})@ApiResponse({status: 200, description: 'New arrival status toggled successfully'})@ApiResponse({status: 403, description: 'Forbidden - Admin access required'})@ApiResponse({status: 404, description: 'Product not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/controllers/admin-products.controller.ts:73\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        toggleOnSale\n                        \n                    \n                \n            \n            \n                \n                        \n                    toggleOnSale(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/toggle-on-sale')@ApiOperation({summary: 'Toggle on sale status', description: 'Toggles whether a product is on sale'})@ApiResponse({status: 200, description: 'On sale status toggled successfully'})@ApiResponse({status: 403, description: 'Forbidden - Admin access required'})@ApiResponse({status: 404, description: 'Product not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/controllers/admin-products.controller.ts:93\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateProductDto: UpdateProductDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@ApiOperation({summary: 'Update a product', description: 'Updates an existing product. (Admin only)'})@ApiBody({type: UpdateProductDto})@ApiResponse({status: 200, description: 'Product updated successfully'})@ApiResponse({status: 403, description: 'Forbidden - Admin access required'})@ApiResponse({status: 404, description: 'Product not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/controllers/admin-products.controller.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateProductDto\n                                            \n                                                            UpdateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        updateStock\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStock(id: string, updateStockDto: UpdateStockDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/update-stock')@ApiOperation({summary: 'Update product stock', description: 'Updates the stock quantity of a product. Stock cannot be negative.'})@ApiBody({type: UpdateStockDto})@ApiResponse({status: 200, description: 'Stock updated successfully'})@ApiResponse({status: 400, description: 'Invalid stock quantity'})@ApiResponse({status: 403, description: 'Forbidden - Admin access required'})@ApiResponse({status: 404, description: 'Product not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/controllers/admin-products.controller.ts:105\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateStockDto\n                                            \n                                                            UpdateStockDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Patch, Delete, Body, Param, UseGuards, Get, Query } from '@nestjs/common';\nimport { ProductsService } from '../../products/products.service';\nimport { CreateProductDto } from '../../products/dto/create-product.dto';\nimport { UpdateProductDto } from '../../products/dto/update-product.dto';\nimport { UpdateStockDto } from '../../products/dto/update-stock.dto';\nimport { JwtAuthGuard } from '../../auth/guards/jwt-auth.guard';\nimport { RolesGuard } from '../../auth/guards/roles.guard';\nimport { Roles } from '../../auth/decorators/roles.decorator';\nimport { Role } from '../../users/enums/roles.enum';\nimport { ApiTags, ApiBearerAuth, ApiOperation, ApiResponse, ApiBody, ApiQuery } from '@nestjs/swagger';\nimport { subDays, startOfDay, endOfDay } from 'date-fns';\nimport { AdminProductQueryDto } from 'src/products/dto/admin-product-query.dto';\n\n@ApiTags('F. Admin - Products')\n@ApiBearerAuth()\n@Controller('admin/products')\n@UseGuards(JwtAuthGuard, RolesGuard)\n@Roles(Role.ADMIN)\nexport class AdminProductsController {\n  constructor(\n    private readonly productsService: ProductsService,\n  ) {}\n\n  @Get()\n  @ApiOperation({ summary: 'Get all products with filtering and pagination' })\n  findAll(@Query() queryDto: AdminProductQueryDto) {\n    return this.productsService.findAll(queryDto);\n  }\n\n  @Post()\n  @ApiOperation({ summary: 'Create a new product', description: 'Creates a new product. (Admin only)' })\n  @ApiBody({ type: CreateProductDto })\n  @ApiResponse({ status: 201, description: 'Product created successfully' })\n  @ApiResponse({ status: 403, description: 'Forbidden - Admin access required' })\n  create(@Body() createProductDto: CreateProductDto) {\n    return this.productsService.create(createProductDto);\n  }\n\n  @Patch(':id')\n  @ApiOperation({ summary: 'Update a product', description: 'Updates an existing product. (Admin only)' })\n  @ApiBody({ type: UpdateProductDto })\n  @ApiResponse({ status: 200, description: 'Product updated successfully' })\n  @ApiResponse({ status: 403, description: 'Forbidden - Admin access required' })\n  @ApiResponse({ status: 404, description: 'Product not found' })\n  update(@Param('id') id: string, @Body() updateProductDto: UpdateProductDto) {\n    return this.productsService.update(id, updateProductDto);\n  }\n\n  @Delete(':id')\n  @ApiOperation({ summary: 'Delete a product', description: 'Deletes an existing product. (Admin only)' })\n  @ApiResponse({ status: 200, description: 'Product deleted successfully' })\n  @ApiResponse({ status: 403, description: 'Forbidden - Admin access required' })\n  @ApiResponse({ status: 404, description: 'Product not found' })\n  remove(@Param('id') id: string) {\n    return this.productsService.remove(id);\n  }\n\n  @Patch(':id/toggle-featured')\n  @ApiOperation({ summary: 'Toggle featured status', description: 'Toggles whether a product is featured or not' })\n  @ApiResponse({ status: 200, description: 'Featured status toggled successfully' })\n  @ApiResponse({ status: 403, description: 'Forbidden - Admin access required' })\n  @ApiResponse({ status: 404, description: 'Product not found' })\n  async toggleFeatured(@Param('id') id: string) {\n    const product = await this.productsService.findOne(id);\n    return this.productsService.update(id, { isFeatured: !product.isFeatured });\n  }\n\n  @Patch(':id/toggle-new-arrival')\n  @ApiOperation({ summary: 'Toggle new arrival status', description: 'Toggles whether a product is marked as new arrival' })\n  @ApiResponse({ status: 200, description: 'New arrival status toggled successfully' })\n  @ApiResponse({ status: 403, description: 'Forbidden - Admin access required' })\n  @ApiResponse({ status: 404, description: 'Product not found' })\n  async toggleNewArrival(@Param('id') id: string) {\n    const product = await this.productsService.findOne(id);\n    return this.productsService.update(id, { isNewArrival: !product.isNewArrival });\n  }\n\n  @Patch(':id/toggle-best-seller')\n  @ApiOperation({ summary: 'Toggle best seller status', description: 'Toggles whether a product is marked as best seller' })\n  @ApiResponse({ status: 200, description: 'Best seller status toggled successfully' })\n  @ApiResponse({ status: 403, description: 'Forbidden - Admin access required' })\n  @ApiResponse({ status: 404, description: 'Product not found' })\n  async toggleBestSeller(@Param('id') id: string) {\n    const product = await this.productsService.findOne(id);\n    return this.productsService.update(id, { isBestSeller: !product.isBestSeller });\n  }\n\n  @Patch(':id/toggle-on-sale')\n  @ApiOperation({ summary: 'Toggle on sale status', description: 'Toggles whether a product is on sale' })\n  @ApiResponse({ status: 200, description: 'On sale status toggled successfully' })\n  @ApiResponse({ status: 403, description: 'Forbidden - Admin access required' })\n  @ApiResponse({ status: 404, description: 'Product not found' })\n  async toggleOnSale(@Param('id') id: string) {\n    const product = await this.productsService.findOne(id);\n    return this.productsService.update(id, { isOnSale: !product.isOnSale });\n  }\n\n  @Patch(':id/update-stock')\n  @ApiOperation({ summary: 'Update product stock', description: 'Updates the stock quantity of a product. Stock cannot be negative.' })\n  @ApiBody({ type: UpdateStockDto })\n  @ApiResponse({ status: 200, description: 'Stock updated successfully' })\n  @ApiResponse({ status: 400, description: 'Invalid stock quantity' })\n  @ApiResponse({ status: 403, description: 'Forbidden - Admin access required' })\n  @ApiResponse({ status: 404, description: 'Product not found' })\n  async updateStock(@Param('id') id: string, @Body() updateStockDto: UpdateStockDto) {\n    return this.productsService.updateStock(id, updateStockDto.stockQuantity);\n  }\n\n  @Get('analytics')\n  @ApiOperation({ summary: 'Get product performance analytics' })\n  @ApiQuery({ name: 'days', required: false, type: Number })\n  @ApiQuery({ name: 'startDate', required: false, type: Date })\n  @ApiQuery({ name: 'endDate', required: false, type: Date })\n  getProductAnalytics(\n    @Query('days') days?: number,\n    @Query('startDate') startDate?: Date,\n    @Query('endDate') endDate?: Date,\n  ) {\n    if (days) {\n      const now = new Date();\n      endDate = endOfDay(now);\n      startDate = startOfDay(subDays(now, days - 1));\n    }\n    return this.productsService.getProductAnalytics(startDate, endDate);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AdminUpdateUserDto.html":{"url":"classes/AdminUpdateUserDto.html","title":"class - AdminUpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AdminUpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/admin-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object for updating user information by admin.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                dob\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                isActive\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                isEmailVerified\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                isPhoneVerified\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                phone\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        dob\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User date of birth'})@IsOptional()@Type(undefined)@IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/admin-user.dto.ts:40\n                        \n                    \n\n            \n                \n                    User's date of birth.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User email address'})@IsOptional()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/admin-user.dto.ts:49\n                        \n                    \n\n            \n                \n                    User's email address.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User first name'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/admin-user.dto.ts:21\n                        \n                    \n\n            \n                \n                    User's first name.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User active status'})@IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/admin-user.dto.ts:76\n                        \n                    \n\n            \n                \n                    User's active status.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        isEmailVerified\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User email verification status'})@IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/admin-user.dto.ts:85\n                        \n                    \n\n            \n                \n                    User's email verification status.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        isPhoneVerified\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User phone verification status', example: true, required: false})@IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/admin-user.dto.ts:94\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User last name'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/admin-user.dto.ts:30\n                        \n                    \n\n            \n                \n                    User's last name.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User phone number'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/admin-user.dto.ts:58\n                        \n                    \n\n            \n                \n                    User's phone number.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User role', enum: Role})@IsOptional()@IsEnum(Role)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/admin-user.dto.ts:67\n                        \n                    \n\n            \n                \n                    User's role.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsBoolean, IsEmail, IsEnum, IsOptional, IsString, IsUUID } from 'class-validator';\nimport { Role } from 'src/users/enums/roles.enum';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\nimport { IsDate } from 'class-validator';\n\n/**\n * Data Transfer Object for updating user information by admin.\n * @class AdminUpdateUserDto\n * @description Defines the structure and validation rules for admin user updates.\n */\nexport class AdminUpdateUserDto {\n  /**\n   * User's first name.\n   * @type {string}\n   */\n  @ApiPropertyOptional({ description: 'User first name' })\n  @IsOptional()\n  @IsString()\n  firstName?: string;\n\n  /**\n   * User's last name.\n   * @type {string}\n   */\n  @ApiPropertyOptional({ description: 'User last name' })\n  @IsOptional()\n  @IsString()\n  lastName?: string;\n\n  /**\n   * User's date of birth.\n   * @type {Date}\n   */\n  @ApiPropertyOptional({ description: 'User date of birth' })\n  @IsOptional()\n  @Type(() => Date)\n  @IsDate()\n  dob?: Date;\n\n  /**\n   * User's email address.\n   * @type {string}\n   */\n  @ApiPropertyOptional({ description: 'User email address' })\n  @IsOptional()\n  @IsEmail()\n  email?: string;\n\n  /**\n   * User's phone number.\n   * @type {string}\n   */\n  @ApiPropertyOptional({ description: 'User phone number' })\n  @IsOptional()\n  @IsString()\n  phone?: string;\n\n  /**\n   * User's role.\n   * @type {Role}\n   */\n  @ApiPropertyOptional({ description: 'User role', enum: Role })\n  @IsOptional()\n  @IsEnum(Role)\n  role?: Role;\n\n  /**\n   * User's active status.\n   * @type {boolean}\n   */\n  @ApiPropertyOptional({ description: 'User active status' })\n  @IsOptional()\n  @IsBoolean()\n  isActive?: boolean;\n\n  /**\n   * User's email verification status.\n   * @type {boolean}\n   */\n  @ApiPropertyOptional({ description: 'User email verification status' })\n  @IsOptional()\n  @IsBoolean()\n  isEmailVerified?: boolean;\n\n  @ApiProperty({\n    description: 'User phone verification status',\n    example: true,\n    required: false\n  })\n  @IsOptional()\n  @IsBoolean()\n  isPhoneVerified?: boolean;\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AdminUserController.html":{"url":"controllers/AdminUserController.html","title":"controller - AdminUserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AdminUserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/controllers/admin-user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                admin/users\n            \n\n\n            \n                Description\n            \n            \n                Controller handling admin user management operations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                setStatus\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                update\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                updateRole\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(queryDto: AdminUserQueryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Get all users with filtering and pagination'})@ApiQuery({name: 'page', required: false, type: Number})@ApiQuery({name: 'limit', required: false, type: Number})@ApiResponse({status: undefined, description: 'List of users retrieved successfully'})@ApiResponse({status: undefined, description: 'Unauthorized'})@ApiResponse({status: undefined, description: 'Forbidden'})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/controllers/admin-user.controller.ts:58\n                        \n                    \n\n\n            \n                \n                        Retrieves all users with optional filtering and pagination.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryDto\n                                            \n                                                            AdminUserQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Promise> - Users and pagination metadata\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({summary: 'Get a user by ID'})@ApiResponse({status: undefined, description: 'User retrieved successfully'})@ApiResponse({status: undefined, description: 'Unauthorized'})@ApiResponse({status: undefined, description: 'Forbidden'})@ApiResponse({status: undefined, description: 'User not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/controllers/admin-user.controller.ts:76\n                        \n                    \n\n\n            \n                \n                        Retrieves a user by ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser ID\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Promise - The found user\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        setStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    setStatus(id: string, isActive: boolean)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/status')@ApiOperation({summary: 'Set user active status'})@ApiParam({name: 'id', description: 'User ID', type: 'string', format: 'uuid'})@ApiBody({schema: undefined})@ApiResponse({status: undefined, description: 'User status updated successfully'})@ApiResponse({status: undefined, description: 'User not found'})@HttpCode(HttpStatus.OK)\n                \n            \n\n                    \n                        \n                            Defined in src/admin/controllers/admin-user.controller.ts:129\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                isActive\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateDto: AdminUpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@ApiOperation({summary: 'Update a user'})@ApiResponse({status: undefined, description: 'User updated successfully'})@ApiResponse({status: undefined, description: 'Unauthorized'})@ApiResponse({status: undefined, description: 'Forbidden'})@ApiResponse({status: undefined, description: 'User not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/controllers/admin-user.controller.ts:95\n                        \n                    \n\n\n            \n                \n                        Updates a user's information.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser ID\n\n\n                                            \n                                        \n                                        \n                                                updateDto\n                                            \n                                                            AdminUpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Promise - The updated user\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        updateRole\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateRole(id: string, role: Role)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/role')@ApiOperation({summary: 'Update user role'})@ApiParam({name: 'id', description: 'User ID', type: 'string', format: 'uuid'})@ApiBody({schema: undefined})@ApiResponse({status: undefined, description: 'User role updated successfully'})@ApiResponse({status: undefined, description: 'User not found'})@HttpCode(HttpStatus.OK)\n                \n            \n\n                    \n                        \n                            Defined in src/admin/controllers/admin-user.controller.ts:164\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                role\n                                            \n                                                            Role\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        // admin-user.controller.ts\nimport {\n  Controller,\n  Get,\n  Patch,\n  Param,\n  Body,\n  Query,\n  UseGuards,\n  HttpStatus,\n  HttpCode,\n  ParseUUIDPipe,\n} from '@nestjs/common';\nimport { UsersService } from 'src/users/users.service';\nimport { AdminUpdateUserDto } from '../../users/dto/admin-user.dto';\nimport { AdminUserQueryDto } from '../../users/dto/admin-user-query.dto';\nimport { JwtAuthGuard } from 'src/auth/guards/jwt-auth.guard';\nimport { RolesGuard } from 'src/auth/guards/roles.guard';\nimport { Roles } from 'src/auth/decorators/roles.decorator';\nimport { Role } from 'src/users/enums/roles.enum';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiSecurity,\n  ApiParam,\n  ApiBody,\n  ApiQuery,\n  ApiBearerAuth,\n} from '@nestjs/swagger';\n\n/**\n * Controller handling admin user management operations.\n */\n@ApiTags('E. Admin - User Management')\n@ApiBearerAuth()\n@Controller('admin/users')\n@UseGuards(JwtAuthGuard, RolesGuard)\n@Roles(Role.ADMIN)\nexport class AdminUserController {\n  constructor(private readonly usersService: UsersService) {}\n\n  /**\n   * Retrieves all users with optional filtering and pagination.\n   * @param query - Query parameters for filtering and pagination\n   * @returns Promise> - Users and pagination metadata\n   */\n  @Get()\n  @ApiOperation({ summary: 'Get all users with filtering and pagination' })\n  @ApiQuery({ name: 'page', required: false, type: Number })\n  @ApiQuery({ name: 'limit', required: false, type: Number })\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'List of users retrieved successfully',\n  })\n  @ApiResponse({ status: HttpStatus.UNAUTHORIZED, description: 'Unauthorized' })\n  @ApiResponse({ status: HttpStatus.FORBIDDEN, description: 'Forbidden' })\n  async findAll(@Query() queryDto: AdminUserQueryDto) {\n    return this.usersService.findAll(queryDto);\n  }\n\n  /**\n   * Retrieves a user by ID.\n   * @param id - User ID\n   * @returns Promise - The found user\n   */\n  @Get(':id')\n  @ApiOperation({ summary: 'Get a user by ID' })\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'User retrieved successfully',\n  })\n  @ApiResponse({ status: HttpStatus.UNAUTHORIZED, description: 'Unauthorized' })\n  @ApiResponse({ status: HttpStatus.FORBIDDEN, description: 'Forbidden' })\n  @ApiResponse({ status: HttpStatus.NOT_FOUND, description: 'User not found' })\n  async findOne(@Param('id', ParseUUIDPipe) id: string) {\n    return this.usersService.findOne(id);\n  }\n\n  /**\n   * Updates a user's information.\n   * @param id - User ID\n   * @param updateUserDto - Data for updating the user\n   * @returns Promise - The updated user\n   */\n  @Patch(':id')\n  @ApiOperation({ summary: 'Update a user' })\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'User updated successfully',\n  })\n  @ApiResponse({ status: HttpStatus.UNAUTHORIZED, description: 'Unauthorized' })\n  @ApiResponse({ status: HttpStatus.FORBIDDEN, description: 'Forbidden' })\n  @ApiResponse({ status: HttpStatus.NOT_FOUND, description: 'User not found' })\n  async update(\n    @Param('id', ParseUUIDPipe) id: string,\n    @Body() updateDto: AdminUpdateUserDto,\n  ) {\n    return this.usersService.update(id, updateDto);\n  }\n\n  @Patch(':id/status')\n  @ApiOperation({ summary: 'Set user active status' })\n  @ApiParam({\n    name: 'id',\n    description: 'User ID',\n    type: 'string',\n    format: 'uuid',\n  })\n  @ApiBody({\n    schema: {\n      type: 'object',\n      properties: {\n        isActive: {\n          type: 'boolean',\n          description: 'Set to true to activate the user, false to deactivate',\n          example: true,\n        },\n      },\n      required: ['isActive'],\n    },\n  })\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'User status updated successfully',\n  })\n  @ApiResponse({ status: HttpStatus.NOT_FOUND, description: 'User not found' })\n  @HttpCode(HttpStatus.OK)\n  async setStatus(\n    @Param('id', ParseUUIDPipe) id: string,\n    @Body('isActive') isActive: boolean,\n  ) {\n    return this.usersService.setStatus(id, isActive);\n  }\n\n  @Patch(':id/role')\n  @ApiOperation({ summary: 'Update user role' })\n  @ApiParam({\n    name: 'id',\n    description: 'User ID',\n    type: 'string',\n    format: 'uuid',\n  })\n  @ApiBody({\n    schema: {\n      type: 'object',\n      properties: {\n        role: {\n          type: 'string',\n          enum: Object.values(Role),\n          description: 'New role for the user',\n          example: 'ADMIN',\n        },\n      },\n      required: ['role'],\n    },\n  })\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'User role updated successfully',\n  })\n  @ApiResponse({ status: HttpStatus.NOT_FOUND, description: 'User not found' })\n  @HttpCode(HttpStatus.OK)\n  async updateRole(\n    @Param('id', ParseUUIDPipe) id: string,\n    @Body('role') role: Role,\n  ) {\n    return this.usersService.updateUserRole(id, role);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AdminUserQueryDto.html":{"url":"classes/AdminUserQueryDto.html","title":"class - AdminUserQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AdminUserQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/admin-user-query.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object for admin user queries.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                createdAfter\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                createdBefore\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                isActive\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                isEmailVerified\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                lastLoginAfter\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                lastLoginBefore\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                role\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                search\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                sortBy\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                sortOrder\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        createdAfter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filter by creation date (after)'})@IsOptional()@IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/admin-user-query.dto.ts:131\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        createdBefore\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filter by creation date (before)'})@IsOptional()@IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/admin-user-query.dto.ts:136\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filter by active status'})@IsOptional()@Type(undefined)@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/admin-user-query.dto.ts:120\n                        \n                    \n\n            \n                \n                    Active status filter.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        isEmailVerified\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filter by email verification status'})@IsOptional()@Type(undefined)@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/admin-user-query.dto.ts:126\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        lastLoginAfter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filter by last login date (after)'})@IsOptional()@IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/admin-user-query.dto.ts:141\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        lastLoginBefore\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filter by last login date (before)'})@IsOptional()@IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/admin-user-query.dto.ts:146\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of items per page', default: 10})@IsOptional()@Type(undefined)@IsInt()@Min(1)@Max(100)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/admin-user-query.dto.ts:92\n                        \n                    \n\n            \n                \n                    Number of items per page.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Page number', default: 1})@IsOptional()@Type(undefined)@IsInt()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/admin-user-query.dto.ts:79\n                        \n                    \n\n            \n                \n                    Page number for pagination.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: Role, description: 'Filter by user role'})@IsOptional()@IsEnum(Role)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/admin-user-query.dto.ts:110\n                        \n                    \n\n            \n                \n                    Role filter for users.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        search\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Search term for firstName, lastName, or email'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/admin-user-query.dto.ts:101\n                        \n                    \n\n            \n                \n                    Search term for filtering users.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        sortBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Sort by field', enum: undefined})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/admin-user-query.dto.ts:154\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        sortOrder\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"asc\" | \"desc\"\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Sort order', enum: undefined, default: 'desc'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/admin-user-query.dto.ts:163\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { IsOptional, IsString, IsBoolean, IsDateString, IsEnum, IsInt, Min, Max } from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { Role } from '../../users/enums/roles.enum';\n\n/**\n * Interface for pagination metadata.\n * @interface PaginationMeta\n * @description Contains information about the current page and total results.\n */\nexport interface PaginationMeta {\n  /**\n   * Total number of items\n   * @type {number}\n   */\n  total: number;\n\n  /**\n   * Current page number\n   * @type {number}\n   */\n  page: number;\n\n  /**\n   * Number of items per page\n   * @type {number}\n   */\n  limit: number;\n\n  /**\n   * Total number of pages\n   * @type {number}\n   */\n  totalPages: number;\n\n  /**\n   * Optional message associated with the pagination metadata\n   * @type {string}\n   */\n  message?: string;\n}\n\n/**\n * Interface for paginated response data.\n * @interface PaginatedResponse\n * @description Generic interface for paginated API responses.\n * @template T - The type of items in the response\n */\nexport interface PaginatedResponse {\n  /**\n   * Array of items for the current page\n   * @type {T[]}\n   */\n  items: T[];\n\n  /**\n   * Pagination metadata\n   * @type {PaginationMeta}\n   */\n  meta: PaginationMeta;\n}\n\n/**\n * Data Transfer Object for admin user queries.\n * @class AdminUserQueryDto\n * @description Defines the structure and validation rules for admin user queries.\n */\nexport class AdminUserQueryDto {\n  /**\n   * Page number for pagination.\n   * @type {number}\n   * @default 1\n   */\n  @ApiPropertyOptional({ description: 'Page number', default: 1 })\n  @IsOptional()\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  page?: number = 1;\n\n  /**\n   * Number of items per page.\n   * @type {number}\n   * @default 10\n   */\n  @ApiPropertyOptional({ description: 'Number of items per page', default: 10 })\n  @IsOptional()\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @Max(100)\n  limit?: number = 10;\n\n  /**\n   * Search term for filtering users.\n   * @type {string}\n   */\n  @ApiPropertyOptional({ description: 'Search term for firstName, lastName, or email' })\n  @IsOptional()\n  @IsString()\n  search?: string;\n\n  /**\n   * Role filter for users.\n   * @type {Role}\n   */\n  @ApiPropertyOptional({ enum: Role, description: 'Filter by user role' })\n  @IsOptional()\n  @IsEnum(Role)\n  role?: Role;\n\n  /**\n   * Active status filter.\n   * @type {boolean}\n   */\n  @ApiPropertyOptional({ description: 'Filter by active status' })\n  @IsOptional()\n  @Type(() => Boolean)\n  @IsBoolean()\n  isActive?: boolean;\n\n  @ApiPropertyOptional({ description: 'Filter by email verification status' })\n  @IsOptional()\n  @Type(() => Boolean)\n  @IsBoolean()\n  isEmailVerified?: boolean;\n\n  @ApiPropertyOptional({ description: 'Filter by creation date (after)' })\n  @IsOptional()\n  @IsDateString()\n  createdAfter?: string;\n\n  @ApiPropertyOptional({ description: 'Filter by creation date (before)' })\n  @IsOptional()\n  @IsDateString()\n  createdBefore?: string;\n\n  @ApiPropertyOptional({ description: 'Filter by last login date (after)' })\n  @IsOptional()\n  @IsDateString()\n  lastLoginAfter?: string;\n\n  @ApiPropertyOptional({ description: 'Filter by last login date (before)' })\n  @IsOptional()\n  @IsDateString()\n  lastLoginBefore?: string;\n\n  @ApiPropertyOptional({ \n    description: 'Sort by field',\n    enum: ['createdAt', 'lastLoginAt', 'firstName', 'lastName', 'email', 'role']\n  })\n  @IsOptional()\n  @IsString()\n  sortBy?: string;\n\n  @ApiPropertyOptional({ \n    description: 'Sort order',\n    enum: ['asc', 'desc'],\n    default: 'desc'\n  })\n  @IsOptional()\n  @IsString()\n  sortOrder?: 'asc' | 'desc';\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAdminModule\n\nAdminModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAdminModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nOrdersModule\n\nOrdersModule\n\nAppModule -->\n\nOrdersModule->AppModule\n\n\n\n\n\nProductsModule\n\nProductsModule\n\nAppModule -->\n\nProductsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AdminModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            OrdersModule\n                        \n                        \n                            ProductsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AuthModule } from './auth/auth.module';\nimport { UsersModule } from './users/users.module';\nimport { ProductsModule } from './products/products.module';\nimport { OrdersModule } from './orders/orders.module';\nimport { AdminModule } from './admin/admin.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        host: configService.get('dbHost'),\n        port: +configService.get('dbPort'),\n        username: configService.get('dbUser'),\n        password: configService.get('dbPassword'),\n        database: configService.get('dbName'),\n        entities: [__dirname + '/**/*.entity{.ts,.js}'],\n        synchronize: false,\n        logging: false,\n        logger: 'advanced-console',\n        maxQueryExecutionTime: 1000,\n        extra: {\n          maxQueryExecutionTime: 1000,\n          logSchemaSync: false,\n          application_name: 'elevate_admin'\n        }\n      }),\n      inject: [ConfigService],\n    }),\n    AuthModule,\n    UsersModule,\n    ProductsModule,\n    OrdersModule,\n    AdminModule,\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n            \n                Description\n            \n            \n                Controller handling authentication routes including login.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                logout\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                refresh\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginDto: LoginDto, response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'User login'})@ApiBody({type: LoginDto})@ApiResponse({status: 200, description: 'Login successful, returns JWT token', schema: undefined})@ApiResponse({status: 401, description: 'Invalid credentials'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:47\n                        \n                    \n\n\n            \n                \n                        Authenticates a user and returns a JWT token.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser login credentials\n\n\n                                            \n                                        \n                                        \n                                                response\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Promise - JWT token for authenticated user\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                        \n                    logout(req, response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('logout')@UseGuards(undefined)@HttpCode(HttpStatus.OK)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                response\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        refresh\n                        \n                    \n                \n            \n            \n                \n                        \n                    refresh(req, response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('refresh')@UseGuards(undefined)@HttpCode(HttpStatus.OK)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:78\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                response\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        // src/auth/auth.controller.ts\nimport {\n  Controller,\n  Post,\n  Body,\n  HttpCode,\n  HttpStatus,\n  Res,\n  Req,\n  Get,\n  UseGuards,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { LoginDto } from './dto/login.dto';\nimport { ApiTags, ApiOperation, ApiResponse, ApiBody } from '@nestjs/swagger';\nimport { Response, Request } from 'express';\nimport { AuthGuard } from '@nestjs/passport';\n\n/**\n * Controller handling authentication routes including login.\n */\n@ApiTags('A. Authentication')\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  /**\n   * Authenticates a user and returns a JWT token.\n   * @param loginDto - User login credentials\n   * @returns Promise - JWT token for authenticated user\n   */\n  @Post('login')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'User login' })\n  @ApiBody({ type: LoginDto })\n  @ApiResponse({\n    status: 200,\n    description: 'Login successful, returns JWT token',\n    schema: {\n      type: 'object',\n      properties: {\n        access_token: { type: 'string' },\n      },\n    },\n  })\n  @ApiResponse({ status: 401, description: 'Invalid credentials' })\n  async login(\n    @Body() loginDto: LoginDto,\n    @Res({ passthrough: true }) response: Response,\n  ) {\n    console.log('Login attempt with DTO:', loginDto);\n    const { access_token, refresh_token, message } =\n      await this.authService.login(loginDto);\n    response.cookie('refresh_token', refresh_token, {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: 'strict',\n    });\n    return { access_token, message };\n  }\n\n  @Get('logout')\n  @UseGuards(AuthGuard('jwt'))\n  @HttpCode(HttpStatus.OK)\n  async logout(@Req() req, @Res({ passthrough: true }) response: Response) {\n    await this.authService.logout(req.user.id);\n    response.clearCookie('refresh_token', {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: 'strict',\n    });\n    return { message: 'Logged out successfully' };\n  }\n\n  @Get('refresh')\n  @UseGuards(AuthGuard('jwt-refresh'))\n  @HttpCode(HttpStatus.OK)\n  async refresh(@Req() req, @Res({ passthrough: true }) response: Response) {\n    const { sub, refreshToken } = req.user;\n    const { access_token, refresh_token } = await this.authService.refresh(\n      sub,\n      refreshToken,\n    );\n    response.cookie('refresh_token', refresh_token, {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: 'strict',\n    });\n    return { access_token };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nJwtAuthGuard \n\nJwtAuthGuard \n\n\n\nRolesGuard \n\nRolesGuard \n\n\n\nAuthModule\n\nAuthModule\n\nJwtAuthGuard  -->\n\nAuthModule->JwtAuthGuard \n\n\n\nRolesGuard  -->\n\nAuthModule->RolesGuard \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtAuthGuard\n\nJwtAuthGuard\n\nAuthModule -->\n\nJwtAuthGuard->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nRefreshTokenStrategy\n\nRefreshTokenStrategy\n\nAuthModule -->\n\nRefreshTokenStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtAuthGuard\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            RefreshTokenStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            JwtAuthGuard\n                        \n                        \n                            RolesGuard\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtStrategy } from './strategies/jwt.strategy';\nimport { JwtAuthGuard } from './guards/jwt-auth.guard';\nimport { RolesGuard } from './guards/roles.guard';\nimport { ConfigService } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Users } from 'src/users/entities/users.entity';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { ConfigModule } from '@nestjs/config';\nimport jwtConfig from './config/jwt.config';\nimport { RefreshTokenStrategy } from './strategies/refresh-token.strategy';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Users]),\n    PassportModule,\n    ConfigModule.forFeature(jwtConfig),\n    JwtModule.registerAsync({\n      imports: [ConfigModule.forFeature(jwtConfig)],\n      inject: [jwtConfig.KEY],\n      useFactory: async (config: any) => ({\n        secret: config.accessTokenSecret,\n        signOptions: {\n          expiresIn: `${config.accessTokenTTL}s`,\n        },\n      }),\n    }),\n  ],\n  controllers: [AuthController],\n  providers: [\n    JwtStrategy,\n    JwtAuthGuard,\n    RolesGuard,\n    AuthService,\n    RefreshTokenStrategy,\n  ],\n  exports: [JwtModule, JwtAuthGuard, RolesGuard],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service handling authentication operations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                generateTokens\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                refresh\n                            \n                            \n                                    Private\n                                    Async\n                                updateRefreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, jwtService: JwtService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        generateTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateTokens(user: Users)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:118\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            Users\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginDto: LoginDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:40\n                        \n                    \n\n\n            \n                \n                        Authenticates a user and generates a JWT token.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser login credentials\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Promise - JWT tokens for authenticated user\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                        \n                    logout(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:85\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        refresh\n                        \n                    \n                \n            \n            \n                \n                        \n                    refresh(userId: string, refreshToken: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:89\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                refreshToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        updateRefreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateRefreshToken(userId: string, refreshToken: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:111\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                refreshToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  UnauthorizedException,\n  InternalServerErrorException,\n  Inject,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Users } from 'src/users/entities/users.entity';\nimport * as bcrypt from 'bcrypt';\nimport { JwtService } from '@nestjs/jwt';\nimport { LoginDto } from './dto/login.dto';\nimport { ConfigType } from '@nestjs/config';\nimport jwtConfig from './config/jwt.config';\n\n/**\n * Service handling authentication operations.\n * @class AuthService\n * @description Manages user authentication, including login and token generation.\n */\n@Injectable()\nexport class AuthService {\n  constructor(\n    @InjectRepository(Users)\n    private readonly usersRepository: Repository,\n\n    private readonly jwtService: JwtService,\n\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType,\n  ) {}\n\n  /**\n   * Authenticates a user and generates a JWT token.\n   * @param loginDto - User login credentials\n   * @returns Promise - JWT tokens for authenticated user\n   * @throws UnauthorizedException - If credentials are invalid\n   */\n  async login(loginDto: LoginDto) {\n    try {\n      const user = await this.usersRepository.findOne({\n        where: { email: loginDto.email },\n        relations: ['roles'],\n      });\n\n      if (!user) {\n        throw new UnauthorizedException('Invalid credentials');\n      }\n\n      const isPasswordValid = await bcrypt.compare(\n        loginDto.password,\n        user.password,\n      );\n      if (!isPasswordValid) {\n        throw new UnauthorizedException('Invalid credentials');\n      }\n\n      if (!user.isActive) {\n        throw new UnauthorizedException('User is inactive');\n      }\n\n      // Update last login time\n      user.lastLoginAt = new Date();\n      await this.usersRepository.save(user);\n\n      const { access_token, refresh_token } = await this.generateTokens(user);\n      await this.updateRefreshToken(user.id, refresh_token);\n\n      const nameFromEmail = user.email.split('@')[0];\n\n      return {\n        access_token,\n        refresh_token,\n        message: `Welcome ${nameFromEmail}`,\n      };\n    } catch (error) {\n      if (error instanceof UnauthorizedException) {\n        throw error;\n      }\n      throw new InternalServerErrorException('Error during login');\n    }\n  }\n\n  async logout(userId: string) {\n    await this.usersRepository.update(userId, { refreshToken: null });\n  }\n\n  async refresh(userId: string, refreshToken: string) {\n    const user = await this.usersRepository.findOne({\n      where: { id: userId },\n      relations: ['roles'],\n    });\n    if (!user || !user.refreshToken || !user.isActive) {\n      throw new UnauthorizedException('Access Denied');\n    }\n\n    const refreshTokenMatches = await bcrypt.compare(\n      refreshToken,\n      user.refreshToken,\n    );\n    if (!refreshTokenMatches) {\n      throw new UnauthorizedException('Access Denied');\n    }\n\n    const tokens = await this.generateTokens(user);\n    await this.updateRefreshToken(user.id, tokens.refresh_token);\n    return tokens;\n  }\n\n  private async updateRefreshToken(userId: string, refreshToken: string) {\n    const hashedRefreshToken = await bcrypt.hash(refreshToken, 10);\n    await this.usersRepository.update(userId, {\n      refreshToken: hashedRefreshToken,\n    });\n  }\n\n  private async generateTokens(user: Users) {\n    const payload = {\n      sub: user.id,\n      email: user.email,\n      roles: user.roles.map((role) => role.name),\n    };\n\n    const [accessToken, refreshToken] = await Promise.all([\n      this.jwtService.signAsync(payload, {\n        secret: this.jwtConfiguration.accessTokenSecret,\n        expiresIn: `${this.jwtConfiguration.accessTokenTTL}s`,\n      }),\n      this.jwtService.signAsync(\n        { sub: user.id },\n        {\n          secret: this.jwtConfiguration.refreshTokenSecret,\n          expiresIn: `${this.jwtConfiguration.refreshTokenTTL}s`,\n        },\n      ),\n    ]);\n\n    return { access_token: accessToken, refresh_token: refreshToken };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateOrderDto.html":{"url":"classes/CreateOrderDto.html","title":"class - CreateOrderDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateOrderDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/orders/dto/create-order.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                items\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                notes\n                            \n                            \n                                    \n                                    \n                                    \n                                paymentMethod\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        items\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderItemDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'List of items in the order', type: undefined, example: undefined})@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/dto/create-order.dto.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        notes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Additional notes for the order', example: 'Please deliver after 5 PM. Gift wrapping required.', required: false})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/dto/create-order.dto.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        paymentMethod\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Payment method for the order', example: 'CREDIT_CARD', enum: undefined})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/dto/create-order.dto.ts:71\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsArray, IsUUID, IsNumber, IsString, ValidateNested, IsOptional } from 'class-validator';\nimport { Type } from 'class-transformer';\n\nexport class OrderItemDto {\n  @ApiProperty({\n    description: 'ID of the product to order',\n    example: '123e4567-e89b-12d3-a456-426614174000'\n  })\n  @IsUUID()\n  productId: string;\n\n  @ApiProperty({\n    description: 'Quantity of the product to order',\n    example: 2,\n    minimum: 1\n  })\n  @IsNumber()\n  quantity: number;\n\n  @ApiProperty({\n    description: 'Selected size of the clothing item',\n    example: 'M',\n    required: false\n  })\n  @IsString()\n  @IsOptional()\n  size?: string;\n\n  @ApiProperty({\n    description: 'Selected color of the clothing item',\n    example: 'Navy Blue',\n    required: false\n  })\n  @IsString()\n  @IsOptional()\n  color?: string;\n}\n\nexport class CreateOrderDto {\n  @ApiProperty({\n    description: 'List of items in the order',\n    type: [OrderItemDto],\n    example: [\n      {\n        productId: '123e4567-e89b-12d3-a456-426614174000',\n        quantity: 2,\n        size: 'M',\n        color: 'Navy Blue'\n      },\n      {\n        productId: '123e4567-e89b-12d3-a456-426614174001',\n        quantity: 1,\n        size: '32',\n        color: 'Dark Wash'\n      }\n    ]\n  })\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => OrderItemDto)\n  items: OrderItemDto[];\n\n  @ApiProperty({\n    description: 'Payment method for the order',\n    example: 'CREDIT_CARD',\n    enum: ['CREDIT_CARD', 'PAYPAL', 'CASH_ON_DELIVERY']\n  })\n  @IsString()\n  @IsNotEmpty()\n  paymentMethod: string;\n\n  @ApiProperty({\n    description: 'Additional notes for the order',\n    example: 'Please deliver after 5 PM. Gift wrapping required.',\n    required: false\n  })\n  @IsString()\n  @IsOptional()\n  notes?: string;\n} \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateProductDto.html":{"url":"classes/CreateProductDto.html","title":"class - CreateProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/dto/create-product.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                brand\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                careInstructions\n                            \n                            \n                                    \n                                    \n                                category\n                            \n                            \n                                    \n                                    \n                                    \n                                colors\n                            \n                            \n                                    \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                image\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                imageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                isBestSeller\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                isFeatured\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                isNewArrival\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                isOnSale\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                material\n                            \n                            \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                price\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                salePrice\n                            \n                            \n                                    \n                                    \n                                    \n                                sizes\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                specifications\n                            \n                            \n                                    \n                                    \n                                    \n                                stock\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        brand\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Product brand', example: 'Elevate Fashion'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/create-product.dto.ts:110\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        careInstructions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Care instructions', example: 'Machine wash cold, tumble dry low. Do not bleach. Iron on reverse side if needed.'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/create-product.dto.ts:126\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ProductCategory\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Category of the product', enum: ProductCategory, example: undefined})@IsEnum(ProductCategory)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/create-product.dto.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        colors\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Available colors', example: undefined})@IsArray()@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/create-product.dto.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description of the product', example: 'Premium quality cotton t-shirt with a comfortable classic fit. Perfect for everyday wear.'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/create-product.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Image URL of the product', required: false})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/create-product.dto.ts:88\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        imageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'URL of the product image', example: 'https://example.com/images/classic-fit-tshirt.jpg', required: false})@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/create-product.dto.ts:83\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        isBestSeller\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Whether the product is a best seller', default: false})@IsBoolean()@IsOptional()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/create-product.dto.ts:153\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        isFeatured\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Whether the product is featured', example: false, required: false})@IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/create-product.dto.ts:135\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        isNewArrival\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Whether the product is a new arrival', default: false})@IsBoolean()@IsOptional()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/create-product.dto.ts:144\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        isOnSale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Whether the product is on sale', example: false, required: false})@IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/create-product.dto.ts:162\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        material\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Product material', example: '100% Premium Cotton'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/create-product.dto.ts:118\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Name of the product', example: 'Classic Fit Cotton T-Shirt'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/create-product.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Price of the product', example: 29.99, minimum: 0})@IsNumber()@Min(0)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/create-product.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        salePrice\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Sale price of the product (if on sale)', example: 24.99, required: false})@IsNumber()@Min(0)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/create-product.dto.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        sizes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Available sizes', example: undefined})@IsArray()@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/create-product.dto.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        specifications\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Product specifications', example: undefined})@IsObject()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/create-product.dto.ts:102\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        stock\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Stock quantity of the product', example: 100, minimum: 0})@IsNumber()@Min(0)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/create-product.dto.ts:50\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, IsNumber, IsEnum, IsArray, IsOptional, IsBoolean, IsUrl, Min, Max, IsObject, ValidateNested } from 'class-validator';\nimport { Transform, Type } from 'class-transformer';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { ProductCategory } from '../entities/product.entity';\n\nexport class CreateProductDto {\n  @ApiProperty({\n    description: 'Name of the product',\n    example: 'Classic Fit Cotton T-Shirt'\n  })\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n\n  @ApiProperty({\n    description: 'Description of the product',\n    example: 'Premium quality cotton t-shirt with a comfortable classic fit. Perfect for everyday wear.'\n  })\n  @IsString()\n  @IsNotEmpty()\n  description: string;\n\n  @ApiProperty({\n    description: 'Price of the product',\n    example: 29.99,\n    minimum: 0\n  })\n  @IsNumber()\n  @Min(0)\n  @IsOptional()\n  price: number;\n\n  @ApiProperty({\n    description: 'Sale price of the product (if on sale)',\n    example: 24.99,\n    required: false\n  })\n  @IsNumber()\n  @Min(0)\n  @IsOptional()\n  salePrice?: number;\n\n  @ApiProperty({\n    description: 'Stock quantity of the product',\n    example: 100,\n    minimum: 0\n  })\n  @IsNumber()\n  @Min(0)\n  stock: number;\n\n  @ApiProperty({\n    description: 'Category of the product',\n    enum: ProductCategory,\n    example: ProductCategory.T_SHIRTS\n  })\n  @IsEnum(ProductCategory)\n  category: ProductCategory;\n\n  @ApiProperty({\n    description: 'Available sizes',\n    example: ['XS', 'S', 'M', 'L', 'XL', 'XXL']\n  })\n  @IsArray()\n  @IsString({ each: true })\n  sizes: string[];\n\n  @ApiProperty({\n    description: 'Available colors',\n    example: ['Black', 'White', 'Navy', 'Burgundy', 'Forest Green']\n  })\n  @IsArray()\n  @IsString({ each: true })\n  colors: string[];\n\n  @ApiProperty({\n    description: 'URL of the product image',\n    example: 'https://example.com/images/classic-fit-tshirt.jpg',\n    required: false\n  })\n  @IsUrl()\n  @IsOptional()\n  imageUrl?: string;\n\n  @ApiProperty({ description: 'Image URL of the product', required: false })\n  @IsString()\n  @IsOptional()\n  image?: string;\n\n  @ApiPropertyOptional({\n    description: 'Product specifications',\n    example: { \n      'Fabric': '100% Premium Cotton', \n      'Fit': 'Classic Fit',\n      'Weight': '180 GSM',\n      'Style': 'Casual',\n      'Neck': 'Crew Neck'\n    }\n  })\n  @IsObject()\n  @IsOptional()\n  specifications?: Record;\n\n  @ApiPropertyOptional({\n    description: 'Product brand',\n    example: 'Elevate Fashion'\n  })\n  @IsString()\n  @IsOptional()\n  brand?: string;\n\n  @ApiPropertyOptional({\n    description: 'Product material',\n    example: '100% Premium Cotton'\n  })\n  @IsString()\n  @IsOptional()\n  material?: string;\n\n  @ApiPropertyOptional({\n    description: 'Care instructions',\n    example: 'Machine wash cold, tumble dry low. Do not bleach. Iron on reverse side if needed.'\n  })\n  @IsString()\n  @IsOptional()\n  careInstructions?: string;\n\n  @ApiPropertyOptional({\n    description: 'Whether the product is featured',\n    example: false,\n    required: false\n  })\n  @IsBoolean()\n  @IsOptional()\n  isFeatured?: boolean;\n\n  @ApiPropertyOptional({\n    description: 'Whether the product is a new arrival',\n    default: false\n  })\n  @IsBoolean()\n  @IsOptional()\n  @Transform(({ value }) => value === 'true')\n  isNewArrival?: boolean;\n\n  @ApiPropertyOptional({\n    description: 'Whether the product is a best seller',\n    default: false\n  })\n  @IsBoolean()\n  @IsOptional()\n  @Transform(({ value }) => value === 'true')\n  isBestSeller?: boolean;\n\n  @ApiPropertyOptional({\n    description: 'Whether the product is on sale',\n    example: false,\n    required: false\n  })\n  @IsBoolean()\n  @IsOptional()\n  isOnSale?: boolean;\n} \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                dob\n                            \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                phone\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                profileImage\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        dob\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Date of birth in ISO format (YYYY-MM-DD)', example: '1990-01-01'})@IsNotEmpty()@IsDateString({strict: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User email address', example: 'john.doe@example.com'})@IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User first name', example: 'John'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User last name', example: 'Doe', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User password', example: 'password123'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User phone number (Bangladeshi format)', example: '+8801712345678', required: false})@IsOptional()@IsString()@IsPhoneNumber('BD', {message: 'Phone number must be a valid Bangladeshi phone number'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        profileImage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'URL to user profile image', example: 'https://example.com/profile.jpg', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:72\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsDateString,\n  IsPhoneNumber,\n} from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateUserDto {\n  @ApiProperty({\n    description: 'User first name',\n    example: 'John'\n  })\n  @IsNotEmpty()\n  @IsString()\n  firstName: string;\n\n  @ApiProperty({\n    description: 'User last name',\n    example: 'Doe',\n    required: false\n  })\n  @IsOptional()\n  @IsString()\n  lastName?: string;\n\n  @ApiProperty({\n    description: 'Date of birth in ISO format (YYYY-MM-DD)',\n    example: '1990-01-01'\n  })\n  @IsNotEmpty()\n  @IsDateString({ strict: true })\n  dob: string;\n\n  @ApiProperty({\n    description: 'User email address',\n    example: 'john.doe@example.com'\n  })\n  @IsNotEmpty()\n  @IsEmail()\n  email: string;\n\n  @ApiProperty({\n    description: 'User phone number (Bangladeshi format)',\n    example: '+8801712345678',\n    required: false\n  })\n  @IsOptional()\n  @IsString()\n  @IsPhoneNumber('BD', {\n    message: 'Phone number must be a valid Bangladeshi phone number',\n  })\n  phone?: string;\n\n  @ApiProperty({\n    description: 'User password',\n    example: 'password123'\n  })\n  @IsNotEmpty()\n  @IsString()\n  password: string;\n\n  @ApiProperty({\n    description: 'URL to user profile image',\n    example: 'https://example.com/profile.jpg',\n    required: false\n  })\n  @IsOptional()\n  @IsString()\n  profileImage?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CustomerReportRow.html":{"url":"interfaces/CustomerReportRow.html","title":"interface - CustomerReportRow","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CustomerReportRow\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            Customer ID\n                                        \n                                \n                                \n                                        \n                                            Email\n                                        \n                                \n                                \n                                        \n                                            First Name\n                                        \n                                \n                                \n                                        \n                                            Joined On\n                                        \n                                \n                                \n                                        \n                                            Last Name\n                                        \n                                \n                                \n                                        \n                                            Total Orders\n                                        \n                                \n                                \n                                        \n                                            Total Spent\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        Customer ID\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        Customer ID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        Email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        First Name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        First Name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Joined On\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        Joined On:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Last Name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        Last Name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Total Orders\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        Total Orders:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Total Spent\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        Total Spent:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  BadRequestException,\n  InternalServerErrorException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, Like, Between, LessThan } from 'typeorm';\nimport { Users } from './entities/users.entity';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport * as bcrypt from 'bcrypt';\nimport { UserQueryDto } from './dto/user-query.dto';\nimport { Roles } from './entities/roles.entity';\nimport { Role } from './enums/roles.enum';\nimport { subDays, endOfDay, startOfDay, addDays } from 'date-fns';\nimport { Order } from 'src/orders/entities/order.entity';\nimport { AdminUpdateUserDto } from './dto/admin-user.dto';\nimport { AdminUserQueryDto } from './dto/admin-user-query.dto';\n\ninterface CustomerReportRow {\n  'Customer ID': string;\n  'First Name': string;\n  'Last Name': string;\n  'Email': string;\n  'Total Orders': number;\n  'Total Spent': number;\n  'Joined On': Date;\n}\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectRepository(Users)\n    private readonly usersRepository: Repository,\n\n    @InjectRepository(Roles)\n    private readonly rolesRepository: Repository,\n\n    @InjectRepository(Order)\n    private readonly orderRepository: Repository,\n  ) {}\n\n  // Create a new user\n  async create(createUserDto: CreateUserDto): Promise {\n    const { email, phone } = createUserDto;\n\n    const existingUser = await this.usersRepository.findOne({\n      where: [{ email }, { phone }],\n    });\n\n    if (existingUser) {\n      throw new BadRequestException('Email or Phone number already in use.');\n    }\n\n    const hashedPassword = await bcrypt.hash(createUserDto.password, 10);\n\n    const defaultRole = await this.rolesRepository.findOne({ where: { name: Role.CUSTOMER } });\n    if (!defaultRole) {\n      throw new Error('Default role not found');\n    }\n\n    const newUser = this.usersRepository.create({\n      ...createUserDto,\n      password: hashedPassword,\n      profileImage: createUserDto.profileImage || 'profile.jpg',\n      roles: [defaultRole],\n    });\n\n    return this.usersRepository.save(newUser);\n  }\n\n  // Get a list of users\n  async getAllUsers(userQueryDto: UserQueryDto): Promise {\n    const {\n      search,\n      page = 1,\n      limit = 10,\n      order_by = 'id',\n      order_direction = 'ASC',\n    } = userQueryDto;\n\n    const whereCondition = search\n      ? [\n          { email: Like(`%${search}%`) },\n          { phone: Like(`%${search}%`) },\n          { firstName: Like(`%${search}%`) },\n          { lastName: Like(`%${search}%`) },\n        ]\n      : undefined;\n\n    const [users, total] = await this.usersRepository.findAndCount({\n      where: whereCondition,\n      order: {\n        [order_by]: order_direction.toUpperCase() === 'DESC' ? 'DESC' : 'ASC',\n      },\n      skip: (page - 1) * limit,\n      take: limit,\n    });\n\n    if (total === 0) {\n      throw new NotFoundException('No users found.');\n    }\n\n    return users;\n  }\n\n  // Get user by ID\n  async findOne(id: string): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { id },\n      relations: ['roles'],\n    });\n\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found.`);\n    }\n\n    return user;\n  }\n\n  // Update user\n  async update(id: string, updateDto: AdminUpdateUserDto): Promise {\n    const user = await this.findOne(id);\n    Object.assign(user, updateDto);\n\n    if (updateDto.role) {\n      const roleEntity = await this.rolesRepository.findOne({\n        where: { name: updateDto.role },\n      });\n      if (!roleEntity) {\n        throw new BadRequestException(`Role ${updateDto.role} not found`);\n      }\n      user.roles = [roleEntity];\n    }\n\n    return this.usersRepository.save(user);\n  }\n\n  // Update profile image\n  async updateProfileImage(id: string, profileImage: string): Promise {\n    const user = await this.usersRepository.findOne({ where: { id } });\n\n    if (!user) {\n      throw new NotFoundException(\n        `Cannot update image: User with ID ${id} not found.`,\n      );\n    }\n\n    user.profileImage = profileImage;\n\n    try {\n      return await this.usersRepository.save(user);\n    } catch (error) {\n      throw new InternalServerErrorException('Failed to update profile image.');\n    }\n  }\n\n  // Change user password\n  async changePassword(id: string, password: string): Promise {\n    const user = await this.usersRepository.findOne({ where: { id } });\n\n    if (!user) {\n      throw new NotFoundException(\n        `Cannot change password: User with ID ${id} not found.`,\n      );\n    }\n\n    user.password = await bcrypt.hash(password, 10);\n\n    try {\n      return await this.usersRepository.save(user);\n    } catch (error) {\n      throw new InternalServerErrorException('Failed to change password.');\n    }\n  }\n\n  async findAll(queryDto: AdminUserQueryDto): Promise {\n    const {\n      page = 1,\n      limit = 10,\n      search,\n      role,\n      isActive,\n      sortBy = 'createdAt',\n      sortOrder = 'desc',\n    } = queryDto;\n\n    const queryBuilder = this.usersRepository.createQueryBuilder('user')\n      .leftJoinAndSelect('user.roles', 'roles');\n\n    if (search) {\n      queryBuilder.andWhere(\n        '(user.firstName ILIKE :search OR user.lastName ILIKE :search OR user.email ILIKE :search)',\n        { search: `%${search}%` },\n      );\n    }\n\n    if (role) {\n      queryBuilder.andWhere('roles.name = :role', { role });\n    }\n\n    if (isActive !== undefined) {\n      queryBuilder.andWhere('user.isActive = :isActive', { isActive });\n    }\n\n    const validSortFields = ['createdAt', 'lastLoginAt', 'firstName', 'lastName', 'email'];\n    const finalSortBy = validSortFields.includes(sortBy) ? sortBy : 'createdAt';\n    queryBuilder.orderBy(`user.${finalSortBy}`, sortOrder.toUpperCase() as 'ASC' | 'DESC');\n    \n    queryBuilder.skip((page - 1) * limit).take(limit);\n\n    const [items, total] = await queryBuilder.getManyAndCount();\n\n    return {\n      items,\n      meta: {\n        total,\n        page,\n        limit,\n        totalPages: Math.ceil(total / limit),\n      },\n    };\n  }\n\n  async getUserAnalytics() {\n    // 1. Date setup\n    const endDate = endOfDay(new Date());\n    const startDate = startOfDay(subDays(endDate, 6)); // Last 7 days\n    const prevStartDate = startOfDay(subDays(startDate, 7));\n    const prevEndDate = endOfDay(subDays(startDate, 1));\n\n    // 2. Total user stats\n    const totalUsers = await this.usersRepository.count();\n    const prevTotalUsers = await this.usersRepository.count({ where: { createdAt: LessThan(startDate) } });\n    const totalUsersChangePercent = prevTotalUsers > 0 ? ((totalUsers - prevTotalUsers) / prevTotalUsers) * 100 : (totalUsers > 0 ? 100 : 0);\n\n    // 3. New user trend (for Total Visitors chart)\n    const getDailyNewUsers = (from: Date, to: Date) => {\n        return this.usersRepository.createQueryBuilder('user')\n            .select(`DATE_TRUNC('day', \"createdAt\") as date, COUNT(id) as count`)\n            .where(`\"createdAt\" BETWEEN :from AND :to`, { from, to })\n            .groupBy('date')\n            .getRawMany();\n    };\n\n    const newUsersTrendRaw = await getDailyNewUsers(startDate, endDate);\n    const totalUsersTrend = this.fillTrend(newUsersTrendRaw, startDate, endDate, 'count');\n\n    // 4. Conversion Rate stats\n    const totalPurchasingUsers = await this.orderRepository.createQueryBuilder(\"order\")\n        .select('COUNT(DISTINCT \"userId\")')\n        .getRawOne()\n        .then(result => parseInt(result.count, 10) || 0);\n    \n    const conversionRate = totalUsers > 0 ? (totalPurchasingUsers / totalUsers) * 100 : 0;\n    \n    // 5. Conversion rate change and trend\n    const getDailyActiveCustomers = (from: Date, to: Date) => {\n        return this.orderRepository.createQueryBuilder('order')\n            .select(`DATE_TRUNC('day', \"createdAt\") as date, COUNT(DISTINCT \"userId\") as count`)\n            .where(`\"createdAt\" BETWEEN :from AND :to`, { from, to })\n            .groupBy('date')\n            .getRawMany();\n    }\n    const activeCustomersCurrentPeriodRaw = await getDailyActiveCustomers(startDate, endDate);\n    \n    const activeCustomersCurrentPeriod = await this.orderRepository.createQueryBuilder(\"order\").select('COUNT(DISTINCT \"userId\")').where({ createdAt: Between(startDate, endDate) }).getRawOne().then(r => parseInt(r.count, 10) || 0);\n    const activeCustomersPrevPeriod = await this.orderRepository.createQueryBuilder(\"order\").select('COUNT(DISTINCT \"userId\")').where({ createdAt: Between(prevStartDate, prevEndDate) }).getRawOne().then(r => parseInt(r.count, 10) || 0);\n    \n    const conversionRateChangePercent = activeCustomersPrevPeriod > 0 ? ((activeCustomersCurrentPeriod - activeCustomersPrevPeriod) / activeCustomersPrevPeriod) * 100 : (activeCustomersCurrentPeriod > 0 ? 100 : 0);\n    const conversionRateTrend = this.fillTrend(activeCustomersCurrentPeriodRaw, startDate, endDate, 'count');\n\n    return {\n        totalUsers,\n        totalUsersChangePercent,\n        totalUsersTrend,\n        conversionRate,\n        conversionRateChangePercent,\n        conversionRateTrend,\n    };\n  }\n\n  private fillTrend(trendArr: any[], from: Date, to: Date, key: string): number[] {\n    const trendMap = new Map(\n      trendArr.map(item => [startOfDay(item.date).toISOString(), parseInt(item[key], 10) || 0])\n    );\n    const filledTrend: number[] = [];\n    for (let d = startOfDay(from); d  {\n    const users = await this.usersRepository.find({\n      relations: ['orders'],\n    });\n\n    const reportData: CustomerReportRow[] = users.map(user => {\n      const totalOrders = user.orders.length;\n      const totalSpent = user.orders.reduce((sum, order) => sum + order.totalAmount, 0);\n\n      return {\n        'Customer ID': user.id,\n        'First Name': user.firstName,\n        'Last Name': user.lastName || '',\n        'Email': user.email,\n        'Total Orders': totalOrders,\n        'Total Spent': totalSpent,\n        'Joined On': user.createdAt,\n      };\n    });\n\n    return reportData;\n  }\n\n  async setStatus(id: string, isActive: boolean): Promise {\n    await this.usersRepository.update(id, { isActive });\n    return this.findOne(id);\n  }\n\n  async updateUserRole(id: string, role: Role): Promise {\n    const user = await this.findOne(id);\n    const roleEntity = await this.rolesRepository.findOne({\n      where: { name: role },\n    });\n    if (!roleEntity) {\n      throw new BadRequestException(`Role ${role} not found`);\n    }\n    user.roles = [roleEntity];\n    return this.usersRepository.save(user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt-auth.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                JWT Authentication Guard.\nProtects routes by requiring a valid JWT token in the request.\n\n            \n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/jwt-auth.guard.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/jwt-auth.guard.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(err: any, user: any, info: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/jwt-auth.guard.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                err\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                info\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  ExecutionContext,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { JwtService } from '@nestjs/jwt';\nimport { Reflector } from '@nestjs/core';\n\n/**\n * JWT Authentication Guard.\n * @class JwtAuthGuard\n * @description Extends Passport's AuthGuard to implement JWT-based authentication.\n * Protects routes by requiring a valid JWT token in the request.\n */\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly reflector: Reflector,\n  ) {\n    super();\n  }\n\n  canActivate(context: ExecutionContext) {\n    // Check for public route metadata\n    const isPublic = this.reflector.getAllAndOverride('isPublic', [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    if (isPublic) {\n      return true;\n    }\n\n    // Continue with JWT validation\n    return super.canActivate(context);\n  }\n\n  handleRequest(err: any, user: any, info: any) {\n    if (err || !user) {\n      throw new UnauthorizedException('Insufficient authority. Please log in with appropriate credentials.');\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayload.html":{"url":"interfaces/JwtPayload.html","title":"interface - JwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interfaces/jwt-payload.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface representing the JWT payload structure.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            exp\n                                        \n                                \n                                \n                                        \n                                            role\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    User's email address\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        exp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        exp:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Token expiration timestamp\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        role:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    User's role\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Subject - typically the user ID\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface JwtPayload {\n  /**\n   * Subject - typically the user ID\n   * @type {string}\n   */\n  sub: string;\n\n  /**\n   * User's email address\n   * @type {string}\n   */\n  email: string;\n\n  /**\n   * User's role\n   * @type {string}\n   */\n  role: string;\n\n  /**\n   * Token expiration timestamp\n   * @type {number}\n   */\n  exp?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                JWT Strategy for handling authentication.\nExtracts JWT from request headers and validates the token.\n\n            \n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtConfiguration: ConfigType<>, usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt.strategy.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: JwtPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategies/jwt.strategy.ts:42\n                        \n                    \n\n\n            \n                \n                        Validates the JWT payload.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            JwtPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe JWT payload containing user information\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The validated payload\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException, Inject } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { ConfigType } from '@nestjs/config';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Users } from 'src/users/entities/users.entity';\nimport { JwtPayload } from '../interfaces/jwt-payload.interface';  // Import JwtPayload interface\nimport jwtConfig from '../config/jwt.config';\n\n/**\n * JWT Strategy for handling authentication.\n * @class JwtStrategy\n * @description Implements JWT-based authentication strategy using Passport.\n * Extracts JWT from request headers and validates the token.\n */\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType,\n    @InjectRepository(Users)\n    private readonly usersRepository: Repository,\n  ) {\n    const secret = jwtConfiguration.accessTokenSecret;\n    if (!secret) {\n      throw new Error('JWT_ACCESS_TOKEN_SECRET is not defined in the environment variables');\n    }\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: secret,\n    });\n  }\n\n  /**\n   * Validates the JWT payload.\n   * @param payload - The JWT payload containing user information\n   * @returns The validated payload\n   */\n  async validate(payload: JwtPayload) {  // Use the JwtPayload type\n    const { sub: id } = payload;\n    \n    const user = await this.usersRepository.findOne({\n      where: { id },\n      relations: ['roles'],\n    });\n\n    if (!user) {\n      throw new UnauthorizedException('User not found');\n    }\n\n    if (!user.isActive) {\n      throw new UnauthorizedException('User is inactive');\n    }\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object for user login.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User email address', example: 'user@example.com'})@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:20\n                        \n                    \n\n            \n                \n                    User's email address.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User password', example: 'password123'})@IsString()@IsNotEmpty()@MinLength(6)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:33\n                        \n                    \n\n            \n                \n                    User's password.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsString, MinLength } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\n/**\n * Data Transfer Object for user login.\n * @class LoginDto\n * @description Defines the structure and validation rules for login requests.\n */\nexport class LoginDto {\n  /**\n   * User's email address.\n   * @type {string}\n   */\n  @ApiProperty({\n    description: 'User email address',\n    example: 'user@example.com',\n  })\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  /**\n   * User's password.\n   * @type {string}\n   */\n  @ApiProperty({\n    description: 'User password',\n    example: 'password123',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(6)\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Order.html":{"url":"entities/Order.html","title":"entity - Order","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Order\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/orders/entities/order.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                adminNotes\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                history\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                items\n                            \n                            \n                                    \n                                notes\n                            \n                            \n                                    \n                                paymentDetails\n                            \n                            \n                                    \n                                refundAmount\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                totalAmount\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    \n                                user\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        adminNotes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/entities/order.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/entities/order.entity.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        history\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'jsonb', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/entities/order.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/entities/order.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        items\n                        \n                    \n                \n            \n                \n                    \n                        Type :     OrderItem[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, orderItem => orderItem.order, {cascade: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/entities/order.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        notes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/entities/order.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        paymentDetails\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'jsonb', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/entities/order.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        refundAmount\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'decimal', precision: 10, scale: 2, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/entities/order.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: OrderStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/entities/order.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        totalAmount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'decimal', precision: 10, scale: 2, default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/entities/order.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/entities/order.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Users\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.orders)@JoinColumn({name: 'userId'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/entities/order.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'uuid'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/entities/order.entity.ts:12\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, PrimaryGeneratedColumn, Column, CreateDateColumn, UpdateDateColumn, ManyToOne, OneToMany, JoinColumn } from 'typeorm';\nimport { Users } from '../../users/entities/users.entity';\nimport { OrderItem } from './order-item.entity';\nimport { OrderStatus } from '../enums/order-status.enum';\n\n@Entity('orders')\nexport class Order {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({ type: 'uuid' })\n  userId: string;\n\n  @ManyToOne(() => Users, user => user.orders)\n  @JoinColumn({ name: 'userId' })\n  user: Users;\n\n  @Column({ type: 'enum', enum: OrderStatus, default: OrderStatus.PENDING })\n  status: OrderStatus;\n\n  @Column({ type: 'decimal', precision: 10, scale: 2, default: 0 })\n  totalAmount: number;\n\n  @Column({ type: 'decimal', precision: 10, scale: 2, nullable: true })\n  refundAmount: number | null;\n\n  @Column({ type: 'text', nullable: true })\n  notes: string | null;\n\n  @Column({ type: 'text', nullable: true })\n  adminNotes: string | null;\n\n  @Column({ type: 'jsonb', nullable: true })\n  paymentDetails: {\n    method: string;\n    transactionId: string;\n    status: string;\n    amount: number;\n  } | null;\n\n  @Column({ type: 'jsonb', nullable: true })\n  history: Array | null;\n\n  @OneToMany(() => OrderItem, orderItem => orderItem.order, {\n    cascade: true,\n  })\n  items: OrderItem[];\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n} \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/OrderItem.html":{"url":"entities/OrderItem.html","title":"entity - OrderItem","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  OrderItem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/orders/entities/order-item.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                order\n                            \n                            \n                                    \n                                orderId\n                            \n                            \n                                    \n                                price\n                            \n                            \n                                    \n                                    \n                                product\n                            \n                            \n                                    \n                                productId\n                            \n                            \n                                    \n                                quantity\n                            \n                            \n                                    \n                                total\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/entities/order-item.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        order\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Order\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, order => order.items)@JoinColumn({name: 'orderId'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/entities/order-item.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        orderId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'uuid'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/entities/order-item.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'decimal', precision: 10, scale: 2})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/entities/order-item.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        product\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Product\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined)@JoinColumn({name: 'productId'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/entities/order-item.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        productId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'uuid'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/entities/order-item.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        quantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'int'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/entities/order-item.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        total\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'decimal', precision: 10, scale: 2})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/entities/order-item.entity.ts:31\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, PrimaryGeneratedColumn, Column, ManyToOne, JoinColumn } from 'typeorm';\nimport { Order } from './order.entity';\nimport { Product } from '../../products/entities/product.entity';\n\n@Entity('order_items')\nexport class OrderItem {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({ type: 'uuid' })\n  orderId: string;\n\n  @Column({ type: 'uuid' })\n  productId: string;\n\n  @ManyToOne(() => Order, (order) => order.items)\n  @JoinColumn({ name: 'orderId' })\n  order: Order;\n\n  @ManyToOne(() => Product)\n  @JoinColumn({ name: 'productId' })\n  product: Product;\n\n  @Column({ type: 'int' })\n  quantity: number;\n\n  @Column({ type: 'decimal', precision: 10, scale: 2 })\n  price: number;\n\n  @Column({ type: 'decimal', precision: 10, scale: 2 })\n  total: number;\n} \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OrderItemDto.html":{"url":"classes/OrderItemDto.html","title":"class - OrderItemDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OrderItemDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/orders/dto/create-order.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                color\n                            \n                            \n                                    \n                                    \n                                productId\n                            \n                            \n                                    \n                                    \n                                quantity\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                size\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        color\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Selected color of the clothing item', example: 'Navy Blue', required: false})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/dto/create-order.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        productId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'ID of the product to order', example: '123e4567-e89b-12d3-a456-426614174000'})@IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/dto/create-order.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        quantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Quantity of the product to order', example: 2, minimum: 1})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/dto/create-order.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        size\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Selected size of the clothing item', example: 'M', required: false})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/dto/create-order.dto.ts:28\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsArray, IsUUID, IsNumber, IsString, ValidateNested, IsOptional } from 'class-validator';\nimport { Type } from 'class-transformer';\n\nexport class OrderItemDto {\n  @ApiProperty({\n    description: 'ID of the product to order',\n    example: '123e4567-e89b-12d3-a456-426614174000'\n  })\n  @IsUUID()\n  productId: string;\n\n  @ApiProperty({\n    description: 'Quantity of the product to order',\n    example: 2,\n    minimum: 1\n  })\n  @IsNumber()\n  quantity: number;\n\n  @ApiProperty({\n    description: 'Selected size of the clothing item',\n    example: 'M',\n    required: false\n  })\n  @IsString()\n  @IsOptional()\n  size?: string;\n\n  @ApiProperty({\n    description: 'Selected color of the clothing item',\n    example: 'Navy Blue',\n    required: false\n  })\n  @IsString()\n  @IsOptional()\n  color?: string;\n}\n\nexport class CreateOrderDto {\n  @ApiProperty({\n    description: 'List of items in the order',\n    type: [OrderItemDto],\n    example: [\n      {\n        productId: '123e4567-e89b-12d3-a456-426614174000',\n        quantity: 2,\n        size: 'M',\n        color: 'Navy Blue'\n      },\n      {\n        productId: '123e4567-e89b-12d3-a456-426614174001',\n        quantity: 1,\n        size: '32',\n        color: 'Dark Wash'\n      }\n    ]\n  })\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => OrderItemDto)\n  items: OrderItemDto[];\n\n  @ApiProperty({\n    description: 'Payment method for the order',\n    example: 'CREDIT_CARD',\n    enum: ['CREDIT_CARD', 'PAYPAL', 'CASH_ON_DELIVERY']\n  })\n  @IsString()\n  @IsNotEmpty()\n  paymentMethod: string;\n\n  @ApiProperty({\n    description: 'Additional notes for the order',\n    example: 'Please deliver after 5 PM. Gift wrapping required.',\n    required: false\n  })\n  @IsString()\n  @IsOptional()\n  notes?: string;\n} \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/OrdersModule.html":{"url":"modules/OrdersModule.html","title":"module - OrdersModule","body":"\n                   \n\n\n\n\n    Modules\n    OrdersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_OrdersModule\n\n\n\ncluster_OrdersModule_imports\n\n\n\ncluster_OrdersModule_providers\n\n\n\ncluster_OrdersModule_exports\n\n\n\n\nProductsModule\n\nProductsModule\n\n\n\nOrdersModule\n\nOrdersModule\n\nOrdersModule -->\n\nProductsModule->OrdersModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nOrdersModule -->\n\nUsersModule->OrdersModule\n\n\n\n\n\nOrdersService \n\nOrdersService \n\nOrdersService  -->\n\nOrdersModule->OrdersService \n\n\n\n\n\nOrdersService\n\nOrdersService\n\nOrdersModule -->\n\nOrdersService->OrdersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/orders/orders.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            OrdersService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ProductsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            OrdersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { OrdersService } from './orders.service';\nimport { Order } from './entities/order.entity';\nimport { OrderItem } from './entities/order-item.entity';\nimport { Product } from '../products/entities/product.entity';\nimport { Users } from '../users/entities/users.entity';\nimport { Address } from '../users/entities/address.entity';\nimport { ProductsModule } from '../products/products.module';\nimport { UsersModule } from '../users/users.module';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Order, OrderItem, Product, Users, Address]),\n    ProductsModule,\n    UsersModule,\n  ],\n  providers: [OrdersService],\n  exports: [OrdersService],\n})\nexport class OrdersModule {} \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PaginatedResponse.html":{"url":"interfaces/PaginatedResponse.html","title":"interface - PaginatedResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PaginatedResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/interfaces/paginated-response.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface for paginated response data.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            meta\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Array of items for the current page\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        meta\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        meta:         PaginationMeta\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PaginationMeta\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Pagination metadata\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface PaginationMeta {\n  /**\n   * Total number of items\n   * @type {number}\n   */\n  total: number;\n\n  /**\n   * Current page number\n   * @type {number}\n   */\n  page: number;\n\n  /**\n   * Number of items per page\n   * @type {number}\n   */\n  limit: number;\n\n  /**\n   * Total number of pages\n   * @type {number}\n   */\n  totalPages: number;\n}\n\n/**\n * Interface for paginated response data.\n * @interface PaginatedResponse\n * @description Generic interface for paginated API responses.\n * @template T - The type of items in the response\n */\nexport interface PaginatedResponse {\n  /**\n   * Array of items for the current page\n   * @type {T[]}\n   */\n  data: T[];\n\n  /**\n   * Pagination metadata\n   * @type {PaginationMeta}\n   */\n  meta: PaginationMeta;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PaginatedResponse-1.html":{"url":"interfaces/PaginatedResponse-1.html","title":"interface - PaginatedResponse-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PaginatedResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/admin-user-query.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface for paginated response data.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            items\n                                        \n                                \n                                \n                                        \n                                            meta\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        items\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        items:     T[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Array of items for the current page\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        meta\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        meta:         PaginationMeta\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PaginationMeta\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Pagination metadata\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { IsOptional, IsString, IsBoolean, IsDateString, IsEnum, IsInt, Min, Max } from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { Role } from '../../users/enums/roles.enum';\n\n/**\n * Interface for pagination metadata.\n * @interface PaginationMeta\n * @description Contains information about the current page and total results.\n */\nexport interface PaginationMeta {\n  /**\n   * Total number of items\n   * @type {number}\n   */\n  total: number;\n\n  /**\n   * Current page number\n   * @type {number}\n   */\n  page: number;\n\n  /**\n   * Number of items per page\n   * @type {number}\n   */\n  limit: number;\n\n  /**\n   * Total number of pages\n   * @type {number}\n   */\n  totalPages: number;\n\n  /**\n   * Optional message associated with the pagination metadata\n   * @type {string}\n   */\n  message?: string;\n}\n\n/**\n * Interface for paginated response data.\n * @interface PaginatedResponse\n * @description Generic interface for paginated API responses.\n * @template T - The type of items in the response\n */\nexport interface PaginatedResponse {\n  /**\n   * Array of items for the current page\n   * @type {T[]}\n   */\n  items: T[];\n\n  /**\n   * Pagination metadata\n   * @type {PaginationMeta}\n   */\n  meta: PaginationMeta;\n}\n\n/**\n * Data Transfer Object for admin user queries.\n * @class AdminUserQueryDto\n * @description Defines the structure and validation rules for admin user queries.\n */\nexport class AdminUserQueryDto {\n  /**\n   * Page number for pagination.\n   * @type {number}\n   * @default 1\n   */\n  @ApiPropertyOptional({ description: 'Page number', default: 1 })\n  @IsOptional()\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  page?: number = 1;\n\n  /**\n   * Number of items per page.\n   * @type {number}\n   * @default 10\n   */\n  @ApiPropertyOptional({ description: 'Number of items per page', default: 10 })\n  @IsOptional()\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @Max(100)\n  limit?: number = 10;\n\n  /**\n   * Search term for filtering users.\n   * @type {string}\n   */\n  @ApiPropertyOptional({ description: 'Search term for firstName, lastName, or email' })\n  @IsOptional()\n  @IsString()\n  search?: string;\n\n  /**\n   * Role filter for users.\n   * @type {Role}\n   */\n  @ApiPropertyOptional({ enum: Role, description: 'Filter by user role' })\n  @IsOptional()\n  @IsEnum(Role)\n  role?: Role;\n\n  /**\n   * Active status filter.\n   * @type {boolean}\n   */\n  @ApiPropertyOptional({ description: 'Filter by active status' })\n  @IsOptional()\n  @Type(() => Boolean)\n  @IsBoolean()\n  isActive?: boolean;\n\n  @ApiPropertyOptional({ description: 'Filter by email verification status' })\n  @IsOptional()\n  @Type(() => Boolean)\n  @IsBoolean()\n  isEmailVerified?: boolean;\n\n  @ApiPropertyOptional({ description: 'Filter by creation date (after)' })\n  @IsOptional()\n  @IsDateString()\n  createdAfter?: string;\n\n  @ApiPropertyOptional({ description: 'Filter by creation date (before)' })\n  @IsOptional()\n  @IsDateString()\n  createdBefore?: string;\n\n  @ApiPropertyOptional({ description: 'Filter by last login date (after)' })\n  @IsOptional()\n  @IsDateString()\n  lastLoginAfter?: string;\n\n  @ApiPropertyOptional({ description: 'Filter by last login date (before)' })\n  @IsOptional()\n  @IsDateString()\n  lastLoginBefore?: string;\n\n  @ApiPropertyOptional({ \n    description: 'Sort by field',\n    enum: ['createdAt', 'lastLoginAt', 'firstName', 'lastName', 'email', 'role']\n  })\n  @IsOptional()\n  @IsString()\n  sortBy?: string;\n\n  @ApiPropertyOptional({ \n    description: 'Sort order',\n    enum: ['asc', 'desc'],\n    default: 'desc'\n  })\n  @IsOptional()\n  @IsString()\n  sortOrder?: 'asc' | 'desc';\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PaginationMeta.html":{"url":"interfaces/PaginationMeta.html","title":"interface - PaginationMeta","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PaginationMeta\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/interfaces/paginated-response.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface for pagination metadata.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            limit\n                                        \n                                \n                                \n                                        \n                                            page\n                                        \n                                \n                                \n                                        \n                                            total\n                                        \n                                \n                                \n                                        \n                                            totalPages\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        limit\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        limit:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Number of items per page\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        page\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        page:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Current page number\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        total\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        total:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Total number of items\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        totalPages\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        totalPages:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Total number of pages\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface PaginationMeta {\n  /**\n   * Total number of items\n   * @type {number}\n   */\n  total: number;\n\n  /**\n   * Current page number\n   * @type {number}\n   */\n  page: number;\n\n  /**\n   * Number of items per page\n   * @type {number}\n   */\n  limit: number;\n\n  /**\n   * Total number of pages\n   * @type {number}\n   */\n  totalPages: number;\n}\n\n/**\n * Interface for paginated response data.\n * @interface PaginatedResponse\n * @description Generic interface for paginated API responses.\n * @template T - The type of items in the response\n */\nexport interface PaginatedResponse {\n  /**\n   * Array of items for the current page\n   * @type {T[]}\n   */\n  data: T[];\n\n  /**\n   * Pagination metadata\n   * @type {PaginationMeta}\n   */\n  meta: PaginationMeta;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PaginationMeta-1.html":{"url":"interfaces/PaginationMeta-1.html","title":"interface - PaginationMeta-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PaginationMeta\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/admin-user-query.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface for pagination metadata.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            limit\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            page\n                                        \n                                \n                                \n                                        \n                                            total\n                                        \n                                \n                                \n                                        \n                                            totalPages\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        limit\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        limit:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Number of items per page\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional message associated with the pagination metadata\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        page\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        page:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Current page number\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        total\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        total:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Total number of items\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        totalPages\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        totalPages:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Total number of pages\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { IsOptional, IsString, IsBoolean, IsDateString, IsEnum, IsInt, Min, Max } from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { Role } from '../../users/enums/roles.enum';\n\n/**\n * Interface for pagination metadata.\n * @interface PaginationMeta\n * @description Contains information about the current page and total results.\n */\nexport interface PaginationMeta {\n  /**\n   * Total number of items\n   * @type {number}\n   */\n  total: number;\n\n  /**\n   * Current page number\n   * @type {number}\n   */\n  page: number;\n\n  /**\n   * Number of items per page\n   * @type {number}\n   */\n  limit: number;\n\n  /**\n   * Total number of pages\n   * @type {number}\n   */\n  totalPages: number;\n\n  /**\n   * Optional message associated with the pagination metadata\n   * @type {string}\n   */\n  message?: string;\n}\n\n/**\n * Interface for paginated response data.\n * @interface PaginatedResponse\n * @description Generic interface for paginated API responses.\n * @template T - The type of items in the response\n */\nexport interface PaginatedResponse {\n  /**\n   * Array of items for the current page\n   * @type {T[]}\n   */\n  items: T[];\n\n  /**\n   * Pagination metadata\n   * @type {PaginationMeta}\n   */\n  meta: PaginationMeta;\n}\n\n/**\n * Data Transfer Object for admin user queries.\n * @class AdminUserQueryDto\n * @description Defines the structure and validation rules for admin user queries.\n */\nexport class AdminUserQueryDto {\n  /**\n   * Page number for pagination.\n   * @type {number}\n   * @default 1\n   */\n  @ApiPropertyOptional({ description: 'Page number', default: 1 })\n  @IsOptional()\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  page?: number = 1;\n\n  /**\n   * Number of items per page.\n   * @type {number}\n   * @default 10\n   */\n  @ApiPropertyOptional({ description: 'Number of items per page', default: 10 })\n  @IsOptional()\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @Max(100)\n  limit?: number = 10;\n\n  /**\n   * Search term for filtering users.\n   * @type {string}\n   */\n  @ApiPropertyOptional({ description: 'Search term for firstName, lastName, or email' })\n  @IsOptional()\n  @IsString()\n  search?: string;\n\n  /**\n   * Role filter for users.\n   * @type {Role}\n   */\n  @ApiPropertyOptional({ enum: Role, description: 'Filter by user role' })\n  @IsOptional()\n  @IsEnum(Role)\n  role?: Role;\n\n  /**\n   * Active status filter.\n   * @type {boolean}\n   */\n  @ApiPropertyOptional({ description: 'Filter by active status' })\n  @IsOptional()\n  @Type(() => Boolean)\n  @IsBoolean()\n  isActive?: boolean;\n\n  @ApiPropertyOptional({ description: 'Filter by email verification status' })\n  @IsOptional()\n  @Type(() => Boolean)\n  @IsBoolean()\n  isEmailVerified?: boolean;\n\n  @ApiPropertyOptional({ description: 'Filter by creation date (after)' })\n  @IsOptional()\n  @IsDateString()\n  createdAfter?: string;\n\n  @ApiPropertyOptional({ description: 'Filter by creation date (before)' })\n  @IsOptional()\n  @IsDateString()\n  createdBefore?: string;\n\n  @ApiPropertyOptional({ description: 'Filter by last login date (after)' })\n  @IsOptional()\n  @IsDateString()\n  lastLoginAfter?: string;\n\n  @ApiPropertyOptional({ description: 'Filter by last login date (before)' })\n  @IsOptional()\n  @IsDateString()\n  lastLoginBefore?: string;\n\n  @ApiPropertyOptional({ \n    description: 'Sort by field',\n    enum: ['createdAt', 'lastLoginAt', 'firstName', 'lastName', 'email', 'role']\n  })\n  @IsOptional()\n  @IsString()\n  sortBy?: string;\n\n  @ApiPropertyOptional({ \n    description: 'Sort order',\n    enum: ['asc', 'desc'],\n    default: 'desc'\n  })\n  @IsOptional()\n  @IsString()\n  sortOrder?: 'asc' | 'desc';\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Product.html":{"url":"entities/Product.html","title":"entity - Product","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Product\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/entities/product.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Product entity representing a product in the e-commerce system.\npricing, inventory, and categorization.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                brand\n                            \n                            \n                                    \n                                    \n                                careInstructions\n                            \n                            \n                                    \n                                    \n                                category\n                            \n                            \n                                    \n                                    \n                                colors\n                            \n                            \n                                    \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                discountedPrice\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                images\n                            \n                            \n                                    \n                                    \n                                isActive\n                            \n                            \n                                    \n                                    \n                                isBestSeller\n                            \n                            \n                                    \n                                    \n                                isFeatured\n                            \n                            \n                                    \n                                    \n                                isNewArrival\n                            \n                            \n                                    \n                                    \n                                isOnSale\n                            \n                            \n                                    \n                                    \n                                material\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                orderItems\n                            \n                            \n                                    \n                                    \n                                price\n                            \n                            \n                                    \n                                    \n                                rating\n                            \n                            \n                                    \n                                    \n                                reviewCount\n                            \n                            \n                                    \n                                    \n                                sizes\n                            \n                            \n                                    \n                                    \n                                specifications\n                            \n                            \n                                    \n                                    \n                                stockQuantity\n                            \n                            \n                                    \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    \n                                viewCount\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        brand\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Product brand name', maxLength: 255, nullable: true})@Column({length: 255, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:104\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        careInstructions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Product care instructions', maxLength: 255, nullable: true})@Column({length: 255, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:112\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ProductCategory\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The category of the product', enum: ProductCategory})@Column({type: 'enum', enum: ProductCategory, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        colors\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Available colors for the product', type: undefined, default: undefined})@Column('varchar', {array: true, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The date when the product was created'})@CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:128\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The detailed description of the product'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        discountedPrice\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The discounted price of the product (if available)', type: 'number', format: 'decimal', nullable: true})@Column({type: 'decimal', precision: 10, scale: 2, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The unique identifier of the product'})@PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        images\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Product images URLs', type: undefined, default: undefined})@Column({type: 'text', array: true, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Whether the product is currently active', type: 'boolean', default: true})@Column({type: 'boolean', default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        isBestSeller\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Whether the product is a best seller', type: 'boolean', default: false})@Column({type: 'boolean', default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:120\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        isFeatured\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Whether the product is featured', type: 'boolean', default: false})@Column({type: 'boolean', default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        isNewArrival\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Whether the product is a new arrival', type: 'boolean', default: false})@Column({type: 'boolean', default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:116\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        isOnSale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Whether the product is on sale', type: 'boolean', default: false})@Column({type: 'boolean', default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:124\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        material\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Product material', maxLength: 255, nullable: true})@Column({length: 255, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:108\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The name of the product', maxLength: 100})@Column({length: 100})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        orderItems\n                        \n                    \n                \n            \n                \n                    \n                        Type :     OrderItem[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, orderItem => orderItem.product)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:135\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The price of the product', type: 'number', format: 'decimal'})@Column({type: 'decimal', precision: 10, scale: 2})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        rating\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Average product rating', type: 'number', format: 'decimal', default: 0})@Column({type: 'decimal', precision: 3, scale: 2, default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:87\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        reviewCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Number of product reviews', type: 'integer', default: 0})@Column({type: 'int', default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        sizes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Available sizes for the product', type: undefined, default: undefined})@Column('varchar', {array: true, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        specifications\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Product specifications in JSON format', type: 'object', additionalProperties: true, nullable: true})@Column({type: 'jsonb', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:100\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        stockQuantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The current stock quantity of the product', type: 'integer', default: 0})@Column({type: 'int', default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The date when the product was last updated'})@UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:132\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        viewCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Number of times the product has been viewed', type: 'integer', default: 0})@Column({type: 'int', default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/entities/product.entity.ts:83\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, PrimaryGeneratedColumn, CreateDateColumn, UpdateDateColumn, OneToMany } from 'typeorm';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { OrderItem } from '../../orders/entities/order-item.entity';\n\nexport enum ProductCategory {\n  ELECTRONICS = 'ELECTRONICS',\n  CLOTHING = 'CLOTHING',\n  T_SHIRTS = 'T_SHIRTS',\n  SHIRTS = 'SHIRTS',\n  PANTS = 'PANTS',\n  SHOES = 'SHOES',\n  ACCESSORIES = 'ACCESSORIES',\n  BOOKS = 'BOOKS',\n  HOME = 'HOME',\n  SPORTS = 'SPORTS',\n  BEAUTY = 'BEAUTY',\n  FOOD = 'FOOD',\n  OTHER = 'OTHER'\n}\n\n/**\n * Product entity representing a product in the e-commerce system.\n * @class Product\n * @description This entity stores all product-related information including basic details,\n * pricing, inventory, and categorization.\n */\n@Entity('products')\nexport class Product {\n  @ApiProperty({ description: 'The unique identifier of the product' })\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @ApiProperty({ description: 'The name of the product', maxLength: 100 })\n  @Column({ length: 100 })\n  name: string;\n\n  @ApiProperty({ description: 'The detailed description of the product' })\n  @Column({ type: 'text' })\n  description: string;\n\n  @ApiProperty({ description: 'The price of the product', type: 'number', format: 'decimal' })\n  @Column({ type: 'decimal', precision: 10, scale: 2 })\n  price: number;\n\n  @ApiProperty({ description: 'The discounted price of the product (if available)', type: 'number', format: 'decimal', nullable: true })\n  @Column({ type: 'decimal', precision: 10, scale: 2, nullable: true })\n  discountedPrice?: number;\n\n  @ApiProperty({ description: 'The current stock quantity of the product', type: 'integer', default: 0 })\n  @Column({ type: 'int', default: 0 })\n  stockQuantity: number;\n\n  @ApiProperty({ description: 'The category of the product', enum: ProductCategory })\n  @Column({\n    type: 'enum',\n    enum: ProductCategory,\n    nullable: true\n  })\n  category: ProductCategory;\n\n  @ApiProperty({ description: 'Available sizes for the product', type: [String], default: [] })\n  @Column('varchar', { array: true, default: [] })\n  sizes: string[];\n\n  @ApiProperty({ description: 'Available colors for the product', type: [String], default: [] })\n  @Column('varchar', { array: true, default: [] })\n  colors: string[];\n\n  @ApiProperty({ description: 'Product images URLs', type: [String], default: [] })\n  @Column({ type: 'text', array: true, default: [] })\n  images: string[];\n\n  @ApiProperty({ description: 'Whether the product is currently active', type: 'boolean', default: true })\n  @Column({ type: 'boolean', default: true })\n  isActive: boolean;\n\n  @ApiProperty({ description: 'Whether the product is featured', type: 'boolean', default: false })\n  @Column({ type: 'boolean', default: false })\n  isFeatured: boolean;\n\n  @ApiProperty({ description: 'Number of times the product has been viewed', type: 'integer', default: 0 })\n  @Column({ type: 'int', default: 0 })\n  viewCount: number;\n\n  @ApiProperty({ description: 'Average product rating', type: 'number', format: 'decimal', default: 0 })\n  @Column({ type: 'decimal', precision: 3, scale: 2, default: 0 })\n  rating: number;\n\n  @ApiProperty({ description: 'Number of product reviews', type: 'integer', default: 0 })\n  @Column({ type: 'int', default: 0 })\n  reviewCount: number;\n\n  @ApiProperty({ \n    description: 'Product specifications in JSON format', \n    type: 'object',\n    additionalProperties: true,\n    nullable: true \n  })\n  @Column({ type: 'jsonb', nullable: true })\n  specifications: Record;\n\n  @ApiProperty({ description: 'Product brand name', maxLength: 255, nullable: true })\n  @Column({ length: 255, nullable: true })\n  brand: string;\n\n  @ApiProperty({ description: 'Product material', maxLength: 255, nullable: true })\n  @Column({ length: 255, nullable: true })\n  material: string;\n\n  @ApiProperty({ description: 'Product care instructions', maxLength: 255, nullable: true })\n  @Column({ length: 255, nullable: true })\n  careInstructions: string;\n\n  @ApiProperty({ description: 'Whether the product is a new arrival', type: 'boolean', default: false })\n  @Column({ type: 'boolean', default: false })\n  isNewArrival: boolean;\n\n  @ApiProperty({ description: 'Whether the product is a best seller', type: 'boolean', default: false })\n  @Column({ type: 'boolean', default: false })\n  isBestSeller: boolean;\n\n  @ApiProperty({ description: 'Whether the product is on sale', type: 'boolean', default: false })\n  @Column({ type: 'boolean', default: false })\n  isOnSale: boolean;\n\n  @ApiProperty({ description: 'The date when the product was created' })\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @ApiProperty({ description: 'The date when the product was last updated' })\n  @UpdateDateColumn()\n  updatedAt: Date;\n\n  @OneToMany(() => OrderItem, orderItem => orderItem.product)\n  orderItems: OrderItem[];\n} \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ProductPerformanceRow.html":{"url":"interfaces/ProductPerformanceRow.html","title":"interface - ProductPerformanceRow","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ProductPerformanceRow\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/products.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            Category\n                                        \n                                \n                                \n                                        \n                                            Price\n                                        \n                                \n                                \n                                        \n                                            Product ID\n                                        \n                                \n                                \n                                        \n                                            Product Name\n                                        \n                                \n                                \n                                        \n                                            Stock Quantity\n                                        \n                                \n                                \n                                        \n                                            Total Revenue\n                                        \n                                \n                                \n                                        \n                                            Units Sold\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        Category\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        Category:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Price\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        Price:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Product ID\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        Product ID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Product Name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        Product Name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Stock Quantity\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        Stock Quantity:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Total Revenue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        Total Revenue:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Units Sold\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        Units Sold:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, FindOptionsWhere, Between, MoreThanOrEqual, LessThanOrEqual } from 'typeorm';\nimport { Product, ProductCategory } from './entities/product.entity';\nimport { CreateProductDto } from './dto/create-product.dto';\nimport { UpdateProductDto } from './dto/update-product.dto';\nimport { OrderItem } from '../orders/entities/order-item.entity';\nimport { Order } from 'src/orders/entities/order.entity';\nimport { AdminProductQueryDto } from './dto/admin-product-query.dto';\n\ninterface ProductPerformanceRow {\n  'Product ID': string;\n  'Product Name': string;\n  'Category': string;\n  'Stock Quantity': number;\n  'Price': number;\n  'Units Sold': number;\n  'Total Revenue': number;\n}\n\n@Injectable()\nexport class ProductsService {\n  constructor(\n    @InjectRepository(Product)\n    private readonly productRepository: Repository,\n    @InjectRepository(OrderItem)\n    private readonly orderItemRepository: Repository,\n    @InjectRepository(Order)\n    private readonly orderRepository: Repository,\n  ) {}\n\n  async create(createProductDto: CreateProductDto): Promise {\n    const product = this.productRepository.create(createProductDto);\n    return await this.productRepository.save(product);\n  }\n\n  async findAll(\n    queryDto: AdminProductQueryDto,\n  ): Promise {\n    const {\n      page = 1,\n      limit = 10,\n      name,\n      category,\n      brand,\n      isFeatured,\n      isNewArrival,\n      isOnSale,\n      isBestSeller,\n      isActive,\n      minPrice,\n      maxPrice,\n      minStock,\n      maxStock,\n      minRating,\n      maxRating,\n      sortBy = 'createdAt',\n      orderDirection = 'DESC',\n    } = queryDto;\n\n    const query = this.productRepository.createQueryBuilder('product');\n\n    if (name) {\n      query.andWhere('product.name ILIKE :name', { name: `%${name}%` });\n    }\n    if (category) {\n      query.andWhere('product.category = :category', { category });\n    }\n    if (brand) {\n      query.andWhere('product.brand ILIKE :brand', { brand: `%${brand}%` });\n    }\n    if (isFeatured !== undefined) {\n      query.andWhere('product.isFeatured = :isFeatured', { isFeatured });\n    }\n    if (isNewArrival !== undefined) {\n      query.andWhere('product.isNewArrival = :isNewArrival', { isNewArrival });\n    }\n    if (isOnSale !== undefined) {\n      query.andWhere('product.isOnSale = :isOnSale', { isOnSale });\n    }\n    if (isBestSeller !== undefined) {\n      query.andWhere('product.isBestSeller = :isBestSeller', { isBestSeller });\n    }\n    if (isActive !== undefined) {\n      query.andWhere('product.isActive = :isActive', { isActive });\n    }\n    if (minPrice !== undefined) {\n      query.andWhere('product.price >= :minPrice', { minPrice });\n    }\n    if (maxPrice !== undefined) {\n      query.andWhere('product.price = :minStock', { minStock });\n    }\n    if (maxStock !== undefined) {\n      query.andWhere('product.stockQuantity = :minRating', { minRating });\n    }\n    if (maxRating !== undefined) {\n      query.andWhere('product.rating  0) {\n      query.skip((page - 1) * limit).take(limit);\n    }\n\n    const [data, total] = await query.getManyAndCount();\n\n    return { data, total };\n  }\n\n  async findOne(id: string): Promise {\n    const product = await this.productRepository.findOne({ where: { id } });\n    if (!product) {\n      throw new NotFoundException(`Product with ID ${id} not found`);\n    }\n    return product;\n  }\n\n  async update(id: string, updateProductDto: UpdateProductDto): Promise {\n    const product = await this.findOne(id);\n    Object.assign(product, updateProductDto);\n    return await this.productRepository.save(product);\n  }\n\n  async remove(id: string): Promise {\n    const product = await this.findOne(id);\n    await this.productRepository.remove(product);\n  }\n\n  async getFeatured(): Promise {\n    return await this.productRepository.find({\n      where: { isFeatured: true },\n      take: 10,\n    });\n  }\n\n  async getNewArrivals(): Promise {\n    return await this.productRepository.find({\n      order: { createdAt: 'DESC' },\n      take: 10,\n    });\n  }\n\n  async getBestSellers(): Promise {\n    return await this.productRepository.find({\n      where: { isBestSeller: true },\n      take: 10,\n    });\n  }\n\n  async getOnSale(): Promise {\n    return await this.productRepository.find({\n      where: { isOnSale: true },\n      take: 10,\n    });\n  }\n\n  async getByCategory(category: ProductCategory): Promise {\n    const where: FindOptionsWhere = {\n      category: category\n    };\n    return await this.productRepository.find({ where });\n  }\n\n  async getProductAnalytics(startDate?: Date, endDate?: Date) {\n    const where: any = {};\n    if (startDate && endDate) {\n      where.createdAt = Between(startDate, endDate);\n    } else if (startDate) {\n      where.createdAt = MoreThanOrEqual(startDate);\n    } else if (endDate) {\n      where.createdAt = LessThanOrEqual(endDate);\n    }\n\n    // Best-selling products\n    const bestSellers = await this.orderItemRepository\n      .createQueryBuilder('orderItem')\n      .select('orderItem.productId', 'productId')\n      .addSelect('SUM(orderItem.quantity)', 'totalQuantity')\n      .addSelect('SUM(orderItem.total)', 'totalRevenue')\n      .leftJoin('orderItem.product', 'product')\n      .leftJoin('orderItem.order', 'order')\n      .addSelect(['product.name', 'product.images'])\n      .where(where.createdAt ? 'order.createdAt BETWEEN :startDate AND :endDate' : '1=1', { startDate, endDate })\n      .groupBy('orderItem.productId, product.name, product.images')\n      .orderBy('\"totalQuantity\"', 'DESC')\n      .limit(10)\n      .getRawMany();\n\n    // Most profitable products\n    const mostProfitable = await this.orderItemRepository\n      .createQueryBuilder('orderItem')\n      .select('orderItem.productId', 'productId')\n      .addSelect('SUM(orderItem.total)', 'totalRevenue')\n      .leftJoin('orderItem.product', 'product')\n      .leftJoin('orderItem.order', 'order')\n      .addSelect(['product.name', 'product.images'])\n      .where(where.createdAt ? 'order.createdAt BETWEEN :startDate AND :endDate' : '1=1', { startDate, endDate })\n      .groupBy('orderItem.productId, product.name, product.images')\n      .orderBy('\"totalRevenue\"', 'DESC')\n      .limit(10)\n      .getRawMany();\n\n    const lowStock = await this.productRepository\n      .createQueryBuilder('product')\n      .where('product.stockQuantity  {\n    const product = await this.findOne(id);\n    product.stockQuantity = stockQuantity;\n    return await this.productRepository.save(product);\n  }\n\n  async generateProductPerformanceReport(): Promise {\n    const products = await this.productRepository.find();\n    const report: ProductPerformanceRow[] = [];\n\n    for (const product of products) {\n      const salesData = await this.orderItemRepository\n        .createQueryBuilder('orderItem')\n        .select('SUM(orderItem.quantity)', 'unitsSold')\n        .addSelect('SUM(orderItem.total)', 'totalRevenue')\n        .where('orderItem.productId = :productId', { productId: product.id })\n        .getRawOne();\n\n      report.push({\n        'Product ID': product.id,\n        'Product Name': product.name,\n        'Category': product.category,\n        'Stock Quantity': product.stockQuantity,\n        'Price': product.price,\n        'Units Sold': parseInt(salesData.unitsSold, 10) || 0,\n        'Total Revenue': parseFloat(salesData.totalRevenue) || 0,\n      });\n    }\n\n    return report;\n  }\n} \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProductsModule.html":{"url":"modules/ProductsModule.html","title":"module - ProductsModule","body":"\n                   \n\n\n\n\n    Modules\n    ProductsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ProductsModule\n\n\n\ncluster_ProductsModule_exports\n\n\n\ncluster_ProductsModule_providers\n\n\n\n\nProductsService \n\nProductsService \n\n\n\nProductsModule\n\nProductsModule\n\nProductsService  -->\n\nProductsModule->ProductsService \n\n\n\n\n\nProductsService\n\nProductsService\n\nProductsModule -->\n\nProductsService->ProductsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/products/products.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ProductsService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ProductsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Product } from './entities/product.entity';\nimport { ProductsService } from './products.service';\nimport { OrderItem } from '../orders/entities/order-item.entity';\nimport { Order } from 'src/orders/entities/order.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Product, OrderItem, Order])],\n  providers: [ProductsService],\n  exports: [ProductsService, TypeOrmModule],\n})\nexport class ProductsModule {} \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProductsService.html":{"url":"injectables/ProductsService.html","title":"injectable - ProductsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProductsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/products.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                generateProductPerformanceReport\n                            \n                            \n                                    Async\n                                getBestSellers\n                            \n                            \n                                    Async\n                                getByCategory\n                            \n                            \n                                    Async\n                                getFeatured\n                            \n                            \n                                    Async\n                                getNewArrivals\n                            \n                            \n                                    Async\n                                getOnSale\n                            \n                            \n                                    Async\n                                getProductAnalytics\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateStock\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productRepository: Repository, orderItemRepository: Repository, orderRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/products/products.service.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        orderItemRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        orderRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createProductDto: CreateProductDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/products.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createProductDto\n                                            \n                                                            CreateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(queryDto: AdminProductQueryDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/products.service.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryDto\n                                            \n                                                            AdminProductQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/products.service.ts:117\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateProductPerformanceReport\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateProductPerformanceReport()\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/products.service.ts:237\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getBestSellers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getBestSellers()\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/products.service.ts:150\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getByCategory\n                        \n                    \n                \n            \n            \n                \n                        \n                    getByCategory(category: ProductCategory)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/products.service.ts:164\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                category\n                                            \n                                                            ProductCategory\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getFeatured\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFeatured()\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/products.service.ts:136\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getNewArrivals\n                        \n                    \n                \n            \n            \n                \n                        \n                    getNewArrivals()\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/products.service.ts:143\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getOnSale\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOnSale()\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/products.service.ts:157\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getProductAnalytics\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProductAnalytics(startDate?: Date, endDate?: Date)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/products.service.ts:171\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                startDate\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                endDate\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/products.service.ts:131\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateProductDto: UpdateProductDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/products.service.ts:125\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateProductDto\n                                            \n                                                            UpdateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateStock\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStock(id: string, stockQuantity: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/products.service.ts:231\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                stockQuantity\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, FindOptionsWhere, Between, MoreThanOrEqual, LessThanOrEqual } from 'typeorm';\nimport { Product, ProductCategory } from './entities/product.entity';\nimport { CreateProductDto } from './dto/create-product.dto';\nimport { UpdateProductDto } from './dto/update-product.dto';\nimport { OrderItem } from '../orders/entities/order-item.entity';\nimport { Order } from 'src/orders/entities/order.entity';\nimport { AdminProductQueryDto } from './dto/admin-product-query.dto';\n\ninterface ProductPerformanceRow {\n  'Product ID': string;\n  'Product Name': string;\n  'Category': string;\n  'Stock Quantity': number;\n  'Price': number;\n  'Units Sold': number;\n  'Total Revenue': number;\n}\n\n@Injectable()\nexport class ProductsService {\n  constructor(\n    @InjectRepository(Product)\n    private readonly productRepository: Repository,\n    @InjectRepository(OrderItem)\n    private readonly orderItemRepository: Repository,\n    @InjectRepository(Order)\n    private readonly orderRepository: Repository,\n  ) {}\n\n  async create(createProductDto: CreateProductDto): Promise {\n    const product = this.productRepository.create(createProductDto);\n    return await this.productRepository.save(product);\n  }\n\n  async findAll(\n    queryDto: AdminProductQueryDto,\n  ): Promise {\n    const {\n      page = 1,\n      limit = 10,\n      name,\n      category,\n      brand,\n      isFeatured,\n      isNewArrival,\n      isOnSale,\n      isBestSeller,\n      isActive,\n      minPrice,\n      maxPrice,\n      minStock,\n      maxStock,\n      minRating,\n      maxRating,\n      sortBy = 'createdAt',\n      orderDirection = 'DESC',\n    } = queryDto;\n\n    const query = this.productRepository.createQueryBuilder('product');\n\n    if (name) {\n      query.andWhere('product.name ILIKE :name', { name: `%${name}%` });\n    }\n    if (category) {\n      query.andWhere('product.category = :category', { category });\n    }\n    if (brand) {\n      query.andWhere('product.brand ILIKE :brand', { brand: `%${brand}%` });\n    }\n    if (isFeatured !== undefined) {\n      query.andWhere('product.isFeatured = :isFeatured', { isFeatured });\n    }\n    if (isNewArrival !== undefined) {\n      query.andWhere('product.isNewArrival = :isNewArrival', { isNewArrival });\n    }\n    if (isOnSale !== undefined) {\n      query.andWhere('product.isOnSale = :isOnSale', { isOnSale });\n    }\n    if (isBestSeller !== undefined) {\n      query.andWhere('product.isBestSeller = :isBestSeller', { isBestSeller });\n    }\n    if (isActive !== undefined) {\n      query.andWhere('product.isActive = :isActive', { isActive });\n    }\n    if (minPrice !== undefined) {\n      query.andWhere('product.price >= :minPrice', { minPrice });\n    }\n    if (maxPrice !== undefined) {\n      query.andWhere('product.price = :minStock', { minStock });\n    }\n    if (maxStock !== undefined) {\n      query.andWhere('product.stockQuantity = :minRating', { minRating });\n    }\n    if (maxRating !== undefined) {\n      query.andWhere('product.rating  0) {\n      query.skip((page - 1) * limit).take(limit);\n    }\n\n    const [data, total] = await query.getManyAndCount();\n\n    return { data, total };\n  }\n\n  async findOne(id: string): Promise {\n    const product = await this.productRepository.findOne({ where: { id } });\n    if (!product) {\n      throw new NotFoundException(`Product with ID ${id} not found`);\n    }\n    return product;\n  }\n\n  async update(id: string, updateProductDto: UpdateProductDto): Promise {\n    const product = await this.findOne(id);\n    Object.assign(product, updateProductDto);\n    return await this.productRepository.save(product);\n  }\n\n  async remove(id: string): Promise {\n    const product = await this.findOne(id);\n    await this.productRepository.remove(product);\n  }\n\n  async getFeatured(): Promise {\n    return await this.productRepository.find({\n      where: { isFeatured: true },\n      take: 10,\n    });\n  }\n\n  async getNewArrivals(): Promise {\n    return await this.productRepository.find({\n      order: { createdAt: 'DESC' },\n      take: 10,\n    });\n  }\n\n  async getBestSellers(): Promise {\n    return await this.productRepository.find({\n      where: { isBestSeller: true },\n      take: 10,\n    });\n  }\n\n  async getOnSale(): Promise {\n    return await this.productRepository.find({\n      where: { isOnSale: true },\n      take: 10,\n    });\n  }\n\n  async getByCategory(category: ProductCategory): Promise {\n    const where: FindOptionsWhere = {\n      category: category\n    };\n    return await this.productRepository.find({ where });\n  }\n\n  async getProductAnalytics(startDate?: Date, endDate?: Date) {\n    const where: any = {};\n    if (startDate && endDate) {\n      where.createdAt = Between(startDate, endDate);\n    } else if (startDate) {\n      where.createdAt = MoreThanOrEqual(startDate);\n    } else if (endDate) {\n      where.createdAt = LessThanOrEqual(endDate);\n    }\n\n    // Best-selling products\n    const bestSellers = await this.orderItemRepository\n      .createQueryBuilder('orderItem')\n      .select('orderItem.productId', 'productId')\n      .addSelect('SUM(orderItem.quantity)', 'totalQuantity')\n      .addSelect('SUM(orderItem.total)', 'totalRevenue')\n      .leftJoin('orderItem.product', 'product')\n      .leftJoin('orderItem.order', 'order')\n      .addSelect(['product.name', 'product.images'])\n      .where(where.createdAt ? 'order.createdAt BETWEEN :startDate AND :endDate' : '1=1', { startDate, endDate })\n      .groupBy('orderItem.productId, product.name, product.images')\n      .orderBy('\"totalQuantity\"', 'DESC')\n      .limit(10)\n      .getRawMany();\n\n    // Most profitable products\n    const mostProfitable = await this.orderItemRepository\n      .createQueryBuilder('orderItem')\n      .select('orderItem.productId', 'productId')\n      .addSelect('SUM(orderItem.total)', 'totalRevenue')\n      .leftJoin('orderItem.product', 'product')\n      .leftJoin('orderItem.order', 'order')\n      .addSelect(['product.name', 'product.images'])\n      .where(where.createdAt ? 'order.createdAt BETWEEN :startDate AND :endDate' : '1=1', { startDate, endDate })\n      .groupBy('orderItem.productId, product.name, product.images')\n      .orderBy('\"totalRevenue\"', 'DESC')\n      .limit(10)\n      .getRawMany();\n\n    const lowStock = await this.productRepository\n      .createQueryBuilder('product')\n      .where('product.stockQuantity  {\n    const product = await this.findOne(id);\n    product.stockQuantity = stockQuantity;\n    return await this.productRepository.save(product);\n  }\n\n  async generateProductPerformanceReport(): Promise {\n    const products = await this.productRepository.find();\n    const report: ProductPerformanceRow[] = [];\n\n    for (const product of products) {\n      const salesData = await this.orderItemRepository\n        .createQueryBuilder('orderItem')\n        .select('SUM(orderItem.quantity)', 'unitsSold')\n        .addSelect('SUM(orderItem.total)', 'totalRevenue')\n        .where('orderItem.productId = :productId', { productId: product.id })\n        .getRawOne();\n\n      report.push({\n        'Product ID': product.id,\n        'Product Name': product.name,\n        'Category': product.category,\n        'Stock Quantity': product.stockQuantity,\n        'Price': product.price,\n        'Units Sold': parseInt(salesData.unitsSold, 10) || 0,\n        'Total Revenue': parseFloat(salesData.totalRevenue) || 0,\n      });\n    }\n\n    return report;\n  }\n} \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokenGuard.html":{"url":"injectables/RefreshTokenGuard.html","title":"injectable - RefreshTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/refresh-token.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt-refresh')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class RefreshTokenGuard extends AuthGuard('jwt-refresh') {} \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokenStrategy.html":{"url":"injectables/RefreshTokenStrategy.html","title":"injectable - RefreshTokenStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokenStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/refresh-token.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(\n  Strategy,\n  'jwt-refresh',\n)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/refresh-token.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(req: Request, payload: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategies/refresh-token.strategy.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { ConfigType } from '@nestjs/config';\nimport { Request } from 'express';\nimport jwtConfig from '../config/jwt.config';\n\n@Injectable()\nexport class RefreshTokenStrategy extends PassportStrategy(\n  Strategy,\n  'jwt-refresh',\n) {\n  constructor(\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType,\n  ) {\n    const secret = jwtConfiguration.refreshTokenSecret;\n    if (!secret) {\n      throw new Error('JWT_REFRESH_TOKEN_SECRET is not defined in the environment variables');\n    }\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (req: Request) => {\n          return req.cookies?.refresh_token;\n        },\n      ]),\n      secretOrKey: secret,\n      passReqToCallback: true,\n    });\n  }\n\n  validate(req: Request, payload: any) {\n    const refreshToken = req.cookies.refresh_token;\n    return { ...payload, refreshToken };\n  }\n} \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Roles.html":{"url":"entities/Roles.html","title":"entity - Roles","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Roles\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/roles.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/roles.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: Role, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/roles.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Users[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, user => user.roles)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/roles.entity.ts:18\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, PrimaryGeneratedColumn, Column, ManyToMany } from 'typeorm';\nimport { Users } from 'src/users/entities/users.entity';\nimport { Role } from '../enums/roles.enum';\n\n@Entity()\nexport class Roles {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'enum',\n    enum: Role,\n    unique: true,\n  })\n  name: Role;\n\n  @ManyToMany(() => Users, (user) => user.roles)\n  users: Users[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/roles.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/roles.guard.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/roles.guard.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext, ForbiddenException } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Role } from '../../users/enums/roles.enum';\n\nexport const ROLES_KEY = 'roles';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride(ROLES_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    \n    // No roles required means open to all authenticated users\n    if (!requiredRoles || requiredRoles.length === 0) {\n      return true;\n    }\n    \n    const { user } = context.switchToHttp().getRequest();\n    \n    // Make sure user exists and has roles\n    if (!user || !user.roles || user.roles.length === 0) {\n      throw new ForbiddenException('User has no roles');\n    }\n    \n    // Check if user has any of the required roles\n    const userRoles = user.roles.map(role => role.name);\n    const hasRole = requiredRoles.some(role => userRoles.includes(role));\n    \n    if (!hasRole) {\n      throw new ForbiddenException(\n        `User doesn't have sufficient permissions. Required roles: ${requiredRoles.join(', ')}`\n      );\n    }\n    \n    return true;\n  }\n}\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SalesReportRow.html":{"url":"interfaces/SalesReportRow.html","title":"interface - SalesReportRow","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SalesReportRow\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/orders/orders.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            Customer Email\n                                        \n                                \n                                \n                                        \n                                            Customer Name\n                                        \n                                \n                                \n                                        \n                                            Line Item Total\n                                        \n                                \n                                \n                                        \n                                            Order Date\n                                        \n                                \n                                \n                                        \n                                            Order ID\n                                        \n                                \n                                \n                                        \n                                            Order Status\n                                        \n                                \n                                \n                                        \n                                            Order Total\n                                        \n                                \n                                \n                                        \n                                            Price Per Item\n                                        \n                                \n                                \n                                        \n                                            Product Name\n                                        \n                                \n                                \n                                        \n                                            Quantity\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        Customer Email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        Customer Email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Customer Name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        Customer Name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Line Item Total\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        Line Item Total:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Order Date\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        Order Date:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Order ID\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        Order ID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Order Status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        Order Status:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Order Total\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        Order Total:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Price Per Item\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        Price Per Item:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Product Name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        Product Name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Quantity\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        Quantity:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, Between, LessThanOrEqual, MoreThanOrEqual, In } from 'typeorm';\nimport { Order } from './entities/order.entity';\nimport { OrderItem } from './entities/order-item.entity';\nimport { CreateOrderDto } from './dto/create-order.dto';\nimport { UpdateOrderDto } from './dto/update-order.dto';\nimport { OrderStatus } from './enums/order-status.enum';\nimport { Product } from '../products/entities/product.entity';\nimport { Users } from '../users/entities/users.entity';\nimport { Address } from '../users/entities/address.entity';\nimport { ProductsService } from '../products/products.service';\nimport { subDays, endOfDay, startOfDay, addDays, format } from 'date-fns';\nimport * as Papa from 'papaparse';\nimport * as ExcelJS from 'exceljs';\nimport { UsersService } from '../users/users.service';\n\ninterface SalesReportRow {\n  'Order ID': string;\n  'Order Date': string;\n  'Customer Name': string;\n  'Customer Email': string;\n  'Order Status': string;\n  'Product Name': string;\n  'Quantity': number;\n  'Price Per Item': number;\n  'Line Item Total': number;\n  'Order Total': number;\n}\n\n@Injectable()\nexport class OrdersService {\n  constructor(\n    @InjectRepository(Order)\n    private readonly orderRepository: Repository,\n    @InjectRepository(OrderItem)\n    private readonly orderItemRepository: Repository,\n    @InjectRepository(Product)\n    private readonly productRepository: Repository,\n    @InjectRepository(Users)\n    private readonly userRepository: Repository,\n    @InjectRepository(Address)\n    private readonly addressRepository: Repository,\n    private readonly productsService: ProductsService,\n    private readonly usersService: UsersService,\n  ) {}\n\n  async create(createOrderDto: CreateOrderDto, userId: string) {\n    // Check stock availability for all products first\n    for (const item of createOrderDto.items) {\n      const product = await this.productRepository.findOne({\n        where: { id: item.productId },\n      });\n\n      if (!product) {\n        throw new NotFoundException(`Product with ID ${item.productId} not found`);\n      }\n\n      if (product.stockQuantity  {\n      order.status = status;\n      if (adminNotes) {\n        order.notes = order.notes \n          ? `${order.notes}\\n[Admin Note]: ${adminNotes}`\n          : `[Admin Note]: ${adminNotes}`;\n      }\n      return order;\n    });\n\n    return this.orderRepository.save(updatedOrders);\n  }\n\n  async generateSalesReport(): Promise {\n    const orders = await this.orderRepository.find({\n      relations: ['items', 'items.product', 'user'],\n      order: {\n        createdAt: 'DESC',\n      },\n    });\n\n    if (orders.length === 0) {\n      return '';\n    }\n\n    const reportData: SalesReportRow[] = [];\n    for (const order of orders) {\n      for (const item of order.items) {\n        reportData.push({\n          'Order ID': order.id,\n          'Order Date': format(new Date(order.createdAt), 'yyyy-MM-dd HH:mm:ss'),\n          'Customer Name': `${order.user.firstName || ''} ${order.user.lastName || ''}`.trim(),\n          'Customer Email': order.user.email,\n          'Order Status': order.status,\n          'Product Name': item.product.name,\n          'Quantity': item.quantity,\n          'Price Per Item': item.price,\n          'Line Item Total': item.total,\n          'Order Total': order.totalAmount,\n        });\n      }\n    }\n\n    return Papa.unparse(reportData);\n  }\n\n  async generateMasterReport(): Promise {\n    const workbook = new ExcelJS.Workbook();\n    workbook.creator = 'Elevate';\n    workbook.created = new Date();\n\n    // 1. Sales Report Sheet\n    const salesSheet = workbook.addWorksheet('Sales Report');\n    const salesData = await this.getSalesReportData();\n    if (salesData.length > 0) {\n      salesSheet.columns = Object.keys(salesData[0]).map(key => ({ header: key, key, width: 20 }));\n      salesSheet.addRows(salesData);\n    }\n\n    // 2. Customer Summary Sheet\n    const customerSheet = workbook.addWorksheet('Customer Summary');\n    const customerData = await this.usersService.generateCustomerReport();\n    if (customerData.length > 0) {\n      customerSheet.columns = Object.keys(customerData[0]).map(key => ({ header: key, key, width: 25 }));\n      customerSheet.addRows(customerData);\n    }\n\n    // 3. Product Performance Sheet\n    const productSheet = workbook.addWorksheet('Product Performance');\n    const productData = await this.productsService.generateProductPerformanceReport();\n    if (productData.length > 0) {\n      productSheet.columns = Object.keys(productData[0]).map(key => ({ header: key, key, width: 20 }));\n      productSheet.addRows(productData);\n    }\n\n    return await workbook.xlsx.writeBuffer() as Buffer;\n  }\n\n  private async getSalesReportData() {\n    const orders = await this.orderRepository.find({\n      relations: ['items', 'items.product', 'user'],\n      order: {\n        createdAt: 'DESC',\n      },\n    });\n\n    const reportData: SalesReportRow[] = [];\n    for (const order of orders) {\n      for (const item of order.items) {\n        reportData.push({\n          'Order ID': order.id,\n          'Order Date': format(new Date(order.createdAt), 'yyyy-MM-dd HH:mm:ss'),\n          'Customer Name': `${order.user?.firstName || ''} ${order.user?.lastName || ''}`.trim(),\n          'Customer Email': order.user?.email,\n          'Order Status': order.status,\n          'Product Name': item.product.name,\n          'Quantity': item.quantity,\n          'Price Per Item': item.price,\n          'Line Item Total': item.total,\n          'Order Total': order.totalAmount,\n        });\n      }\n    }\n    return reportData;\n  }\n\n  // Analytics methods\n  async getOrderAnalytics(startDate?: Date, endDate?: Date) {\n    // 1. Set date ranges\n    const end = endDate ? endOfDay(endDate) : endOfDay(new Date());\n    const start = startDate ? startOfDay(startDate) : startOfDay(subDays(end, 6)); // Default to last 7 days\n    const prevStart = subDays(start, (end.getTime() - start.getTime()) / (1000 * 60 * 60 * 24) + 1);\n    const prevEnd = subDays(end, (end.getTime() - start.getTime()) / (1000 * 60 * 60 * 24) + 1);\n\n    const whereCurrent = { createdAt: Between(start, end) };\n    const wherePrevious = { createdAt: Between(prevStart, prevEnd) };\n\n    // 2. Fetch data\n    const [currentOrders, prevOrders] = await Promise.all([\n      this.orderRepository.find({ where: whereCurrent }),\n      this.orderRepository.find({ where: wherePrevious }),\n    ]);\n\n    // 3. Calculate metrics\n    const totalOrders = currentOrders.length;\n    const totalRevenue = currentOrders.reduce((sum, order) => sum + order.totalAmount, 0);\n    const prevTotalOrders = prevOrders.length;\n    const prevTotalRevenue = prevOrders.reduce((sum, order) => sum + order.totalAmount, 0);\n\n    const ordersChangePercent = prevTotalOrders > 0 ? ((totalOrders - prevTotalOrders) / prevTotalOrders) * 100 : (totalOrders > 0 ? 100 : 0);\n    const revenueChangePercent = prevTotalRevenue > 0 ? ((totalRevenue - prevTotalRevenue) / prevTotalRevenue) * 100 : (totalRevenue > 0 ? 100 : 0);\n\n    // 4. Generate trends\n    const getDailyTrends = async (from: Date, to: Date) => {\n        return this.orderRepository.createQueryBuilder('order')\n            .select(`DATE_TRUNC('day', \"createdAt\") as date, COUNT(id) as orders, SUM(\"totalAmount\") as revenue`)\n            .where(`\"createdAt\" BETWEEN :from AND :to`, { from, to })\n            .groupBy('date')\n            .getRawMany();\n    };\n    \n    const currentTrendRaw = await getDailyTrends(start, end);\n    const ordersTrend = this.fillTrend(currentTrendRaw, start, end, 'orders');\n    const revenueTrend = this.fillTrend(currentTrendRaw, start, end, 'revenue');\n\n    // 5. Calculate Average Order Value\n    const avgOrderValue = totalOrders > 0 ? totalRevenue / totalOrders : 0;\n    const prevAvgOrderValue = prevTotalOrders > 0 ? prevTotalRevenue / prevTotalOrders : 0;\n    const avgOrderValueChange = prevAvgOrderValue > 0 ? ((avgOrderValue - prevAvgOrderValue) / prevAvgOrderValue) * 100 : (avgOrderValue > 0 ? 100 : 0);\n    \n    // Create AOV trend by dividing daily revenue by daily orders\n    const avgOrderValueTrend = revenueTrend.map((rev, i) => ordersTrend[i] > 0 ? rev / ordersTrend[i] : 0);\n\n    return {\n        totalOrders,\n        totalRevenue,\n        ordersChangePercent,\n        revenueChangePercent,\n        ordersTrend,\n        revenueTrend,\n        avgOrderValue,\n        avgOrderValueChange,\n        avgOrderValueTrend\n    };\n  }\n\n  private fillTrend(trendArr: any[], from: Date, to: Date, key: string): number[] {\n    const trendMap = new Map(\n      trendArr.map(item => [startOfDay(item.date).toISOString(), parseFloat(item[key]) || 0])\n    );\n    const filledTrend: number[] = [];\n    for (let d = startOfDay(from); d = :startDate AND order.createdAt = :startDate AND order.createdAt  ({\n      id: result.user_id,\n      email: result.user_email,\n      orderCount: parseInt(result.ordercount, 10) || 0,\n      totalSpent: parseFloat(result.totalspent) || 0,\n    }));\n  }\n\n  async getRevenueBreakdown(days: number = 7) {\n    const endDate = endOfDay(new Date());\n    const startDate = startOfDay(subDays(endDate, days - 1));\n\n    const revenueData = await this.orderItemRepository\n      .createQueryBuilder('orderItem')\n      .select([\n        `DATE_TRUNC('day', \"order\".\"createdAt\") AS date`,\n        'product.category AS category',\n        'SUM(orderItem.total) AS dailyRevenue',\n      ])\n      .innerJoin('orderItem.order', 'order')\n      .innerJoin('orderItem.product', 'product')\n      .where('order.createdAt BETWEEN :startDate AND :endDate', { startDate, endDate })\n      .groupBy('date, product.category')\n      .orderBy('date', 'ASC')\n      .getRawMany();\n\n    const categories = [...new Set(revenueData.map(item => item.category))];\n    const breakdown = {};\n\n    revenueData.forEach(item => {\n      const dateStr = format(item.date, 'MM-dd');\n      if (!breakdown[dateStr]) {\n        breakdown[dateStr] = { date: dateStr };\n        categories.forEach(cat => (breakdown[dateStr][cat] = 0));\n      }\n      breakdown[dateStr][item.category] = parseFloat(item.dailyrevenue);\n    });\n\n    return {\n        categories,\n        data: Object.values(breakdown),\n    };\n  }\n} \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateOrderDto.html":{"url":"classes/UpdateOrderDto.html","title":"class - UpdateOrderDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateOrderDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/orders/dto/update-order.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                notes\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                refundAmount\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        notes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Additional notes or comments about the order', example: 'Order is being processed', required: false})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/dto/update-order.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        refundAmount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Amount to be refunded for the order', example: 49.99, minimum: 0, required: false})@IsNumber()@Min(0)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/dto/update-order.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'New status of the order', enum: OrderStatus, example: undefined, required: false})@IsEnum(OrderStatus)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/dto/update-order.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEnum, IsOptional, IsString, IsNumber, Min } from 'class-validator';\nimport { OrderStatus } from '../enums/order-status.enum';\n\nexport class UpdateOrderDto {\n  @ApiProperty({\n    description: 'New status of the order',\n    enum: OrderStatus,\n    example: OrderStatus.PROCESSING,\n    required: false\n  })\n  @IsEnum(OrderStatus)\n  @IsOptional()\n  status?: OrderStatus;\n\n  @ApiProperty({\n    description: 'Additional notes or comments about the order',\n    example: 'Order is being processed',\n    required: false\n  })\n  @IsString()\n  @IsOptional()\n  notes?: string;\n\n  @ApiProperty({\n    description: 'Amount to be refunded for the order',\n    example: 49.99,\n    minimum: 0,\n    required: false\n  })\n  @IsNumber()\n  @Min(0)\n  @IsOptional()\n  refundAmount?: number;\n} \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateProductDto.html":{"url":"classes/UpdateProductDto.html","title":"class - UpdateProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/dto/update-product.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                brand\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                careInstructions\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                category\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                colors\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                discountedPrice\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                images\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                imageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                isActive\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                isBestSeller\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                isFeatured\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                isNewArrival\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                isOnSale\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                material\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                price\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                salePrice\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                sizes\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                specifications\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                stock\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                stockQuantity\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        brand\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Product brand', example: 'Elevate Fashion'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/update-product.dto.ts:162\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        careInstructions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Care instructions', example: 'Machine wash cold, inside out. Tumble dry low. Do not bleach. Iron on reverse side if needed.'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/update-product.dto.ts:178\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ProductCategory\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Category of the product', enum: ProductCategory, example: undefined, required: false})@IsEnum(ProductCategory)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/update-product.dto.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        colors\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Available colors', example: undefined})@IsArray()@IsString({each: true})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/update-product.dto.ts:127\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description of the product', example: 'High-quality denim jeans with a modern slim fit. Features stretch comfort and classic five-pocket styling.', required: false})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/update-product.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        discountedPrice\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Discounted price (if on sale)', example: 59.99})@IsNumber()@Min(0)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/update-product.dto.ts:100\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        images\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Product image URLs', example: undefined})@IsArray()@IsUrl({}, {each: true})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/update-product.dto.ts:140\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        imageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'URL of the product image', example: 'https://example.com/images/premium-denim-jeans.jpg', required: false})@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/update-product.dto.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Whether the product is active', default: true})@IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/update-product.dto.ts:202\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        isBestSeller\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Whether the product is a best seller', default: false})@IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/update-product.dto.ts:194\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        isFeatured\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Whether the product is featured', example: true, required: false})@IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/update-product.dto.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        isNewArrival\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Whether the product is a new arrival', default: false})@IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/update-product.dto.ts:186\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        isOnSale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Whether the product is on sale', example: true, required: false})@IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/update-product.dto.ts:82\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        material\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Product material', example: '98% Cotton, 2% Elastane'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/update-product.dto.ts:170\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Name of the product', example: 'Premium Slim Fit Denim Jeans', required: false})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/update-product.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Price of the product', example: 79.99, minimum: 0, required: false})@IsNumber()@Min(0)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/update-product.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        salePrice\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Sale price of the product (if on sale)', example: 59.99, required: false})@IsNumber()@Min(0)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/update-product.dto.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        sizes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Available sizes', example: undefined})@IsArray()@IsString({each: true})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/update-product.dto.ts:118\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        specifications\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Product specifications', example: undefined})@IsObject()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/update-product.dto.ts:154\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        stock\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Stock quantity of the product', example: 150, minimum: 0, required: false})@IsNumber()@Min(0)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/update-product.dto.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        stockQuantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Stock quantity', example: 100})@IsNumber()@Min(0)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/update-product.dto.ts:109\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNumber, IsEnum, IsArray, IsOptional, IsBoolean, IsUrl, Min, IsObject } from 'class-validator';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { ProductCategory } from '../entities/product.entity';\n\nexport class UpdateProductDto {\n  @ApiProperty({\n    description: 'Name of the product',\n    example: 'Premium Slim Fit Denim Jeans',\n    required: false\n  })\n  @IsString()\n  @IsOptional()\n  name?: string;\n\n  @ApiProperty({\n    description: 'Description of the product',\n    example: 'High-quality denim jeans with a modern slim fit. Features stretch comfort and classic five-pocket styling.',\n    required: false\n  })\n  @IsString()\n  @IsOptional()\n  description?: string;\n\n  @ApiProperty({\n    description: 'Price of the product',\n    example: 79.99,\n    minimum: 0,\n    required: false\n  })\n  @IsNumber()\n  @Min(0)\n  @IsOptional()\n  price?: number;\n\n  @ApiProperty({\n    description: 'Sale price of the product (if on sale)',\n    example: 59.99,\n    required: false\n  })\n  @IsNumber()\n  @Min(0)\n  @IsOptional()\n  salePrice?: number;\n\n  @ApiProperty({\n    description: 'Stock quantity of the product',\n    example: 150,\n    minimum: 0,\n    required: false\n  })\n  @IsNumber()\n  @Min(0)\n  @IsOptional()\n  stock?: number;\n\n  @ApiProperty({\n    description: 'Category of the product',\n    enum: ProductCategory,\n    example: ProductCategory.PANTS,\n    required: false\n  })\n  @IsEnum(ProductCategory)\n  @IsOptional()\n  category?: ProductCategory;\n\n  @ApiProperty({\n    description: 'Whether the product is featured',\n    example: true,\n    required: false\n  })\n  @IsBoolean()\n  @IsOptional()\n  isFeatured?: boolean;\n\n  @ApiProperty({\n    description: 'Whether the product is on sale',\n    example: true,\n    required: false\n  })\n  @IsBoolean()\n  @IsOptional()\n  isOnSale?: boolean;\n\n  @ApiProperty({\n    description: 'URL of the product image',\n    example: 'https://example.com/images/premium-denim-jeans.jpg',\n    required: false\n  })\n  @IsUrl()\n  @IsOptional()\n  imageUrl?: string;\n\n  @ApiPropertyOptional({\n    description: 'Discounted price (if on sale)',\n    example: 59.99\n  })\n  @IsNumber()\n  @Min(0)\n  @IsOptional()\n  discountedPrice?: number;\n\n  @ApiPropertyOptional({\n    description: 'Stock quantity',\n    example: 100\n  })\n  @IsNumber()\n  @Min(0)\n  @IsOptional()\n  stockQuantity?: number;\n\n  @ApiPropertyOptional({\n    description: 'Available sizes',\n    example: ['28', '30', '32', '34', '36', '38']\n  })\n  @IsArray()\n  @IsString({ each: true })\n  @IsOptional()\n  sizes?: string[];\n\n  @ApiPropertyOptional({\n    description: 'Available colors',\n    example: ['Dark Blue', 'Black', 'Light Wash', 'Medium Wash']\n  })\n  @IsArray()\n  @IsString({ each: true })\n  @IsOptional()\n  colors?: string[];\n\n  @ApiPropertyOptional({\n    description: 'Product image URLs',\n    example: [\n      'https://example.com/images/jeans-front.jpg',\n      'https://example.com/images/jeans-back.jpg',\n      'https://example.com/images/jeans-detail.jpg'\n    ]\n  })\n  @IsArray()\n  @IsUrl({}, { each: true })\n  @IsOptional()\n  images?: string[];\n\n  @ApiPropertyOptional({\n    description: 'Product specifications',\n    example: { \n      'Fabric': '98% Cotton, 2% Elastane',\n      'Fit': 'Slim Fit',\n      'Rise': 'Mid Rise',\n      'Closure': 'Button and Zip',\n      'Pockets': '5 Pockets'\n    }\n  })\n  @IsObject()\n  @IsOptional()\n  specifications?: Record;\n\n  @ApiPropertyOptional({\n    description: 'Product brand',\n    example: 'Elevate Fashion'\n  })\n  @IsString()\n  @IsOptional()\n  brand?: string;\n\n  @ApiPropertyOptional({\n    description: 'Product material',\n    example: '98% Cotton, 2% Elastane'\n  })\n  @IsString()\n  @IsOptional()\n  material?: string;\n\n  @ApiPropertyOptional({\n    description: 'Care instructions',\n    example: 'Machine wash cold, inside out. Tumble dry low. Do not bleach. Iron on reverse side if needed.'\n  })\n  @IsString()\n  @IsOptional()\n  careInstructions?: string;\n\n  @ApiPropertyOptional({\n    description: 'Whether the product is a new arrival',\n    default: false\n  })\n  @IsBoolean()\n  @IsOptional()\n  isNewArrival?: boolean;\n\n  @ApiPropertyOptional({\n    description: 'Whether the product is a best seller',\n    default: false\n  })\n  @IsBoolean()\n  @IsOptional()\n  isBestSeller?: boolean;\n\n  @ApiPropertyOptional({\n    description: 'Whether the product is active',\n    default: true\n  })\n  @IsBoolean()\n  @IsOptional()\n  isActive?: boolean;\n} \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateStockDto.html":{"url":"classes/UpdateStockDto.html","title":"class - UpdateStockDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateStockDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/dto/update-stock.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                stockQuantity\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        stockQuantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The new stock quantity for the product', minimum: 0, example: 100})@IsInt()@Min(0, {message: 'Stock quantity cannot be negative'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/update-stock.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsInt, Min } from 'class-validator';\n\nexport class UpdateStockDto {\n  @ApiProperty({\n    description: 'The new stock quantity for the product',\n    minimum: 0,\n    example: 100\n  })\n  @IsInt()\n  @Min(0, { message: 'Stock quantity cannot be negative' })\n  stockQuantity: number;\n} \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsOptional,\n  IsString,\n  IsDateString,\n  IsEnum,\n  IsPhoneNumber,\n} from 'class-validator';\nimport { CreateUserDto } from './create-user.dto';\nimport { PartialType } from '@nestjs/swagger';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserQueryDto.html":{"url":"classes/UserQueryDto.html","title":"class - UserQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/user-query.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                limit\n                            \n                            \n                                    \n                                    \n                                order_by\n                            \n                            \n                                    \n                                    \n                                order_direction\n                            \n                            \n                                    \n                                    \n                                    \n                                page\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                search\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsInt()@Min(1, {message: 'Limit must be greater than or equal to 1'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-query.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        order_by\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'created_at'\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-query.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        order_direction\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirection\n\n                    \n                \n                \n                    \n                        Default value : OrderDirection.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsEnum(OrderDirection)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-query.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsInt()@Min(1, {message: 'Page number must be greater than or equal to 1'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-query.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        search\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-query.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsEnum, IsInt, Min, IsString } from 'class-validator';\nimport { OrderDirection } from 'src/users/enums/order-direction.enum';\n\nexport class UserQueryDto {\n  @IsOptional()\n  @IsString()\n  search?: string;\n\n  @IsOptional()\n  @IsInt()\n  @Min(1, { message: 'Page number must be greater than or equal to 1' })\n  page: number = 1;\n\n  @IsOptional()\n  @IsInt()\n  @Min(1, { message: 'Limit must be greater than or equal to 1' })\n  limit: number = 10;\n\n  @IsOptional()\n  @IsString()\n  order_by: string = 'created_at';\n\n  @IsOptional()\n  @IsEnum(OrderDirection) \n  order_direction: OrderDirection = OrderDirection.DESC; \n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Users.html":{"url":"entities/Users.html","title":"entity - Users","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Users\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/users.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                addresses\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                dob\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                isActive\n                            \n                            \n                                    \n                                isEmailVerified\n                            \n                            \n                                    \n                                isPhoneVerified\n                            \n                            \n                                    \n                                lastLoginAt\n                            \n                            \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                orders\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                    Optional\n                                phone\n                            \n                            \n                                    \n                                profileImage\n                            \n                            \n                                    \n                                refreshToken\n                            \n                            \n                                    \n                                    \n                                roles\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        addresses\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Address[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, address => address.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/users.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/users.entity.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        dob\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/users.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255, unique: true, comment: 'User email address'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/users.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/users.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/users.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'boolean', default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/users.entity.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isEmailVerified\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'boolean', default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/users.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isPhoneVerified\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'boolean', default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/users.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastLoginAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/users.entity.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/users.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        orders\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Order[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, order => order.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/users.entity.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/users.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255, unique: true, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/users.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        profileImage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255, nullable: true, default: 'profile.jpg'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/users.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/users.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Roles[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, role => role.users)@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/users.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/users.entity.ts:77\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  ManyToMany,\n  JoinTable,\n  CreateDateColumn,\n  UpdateDateColumn,\n  OneToMany,\n} from 'typeorm';\nimport { Roles } from './roles.entity';\nimport { Order } from '../../orders/entities/order.entity';\nimport { Address } from './address.entity';\n\n@Entity()\nexport class Users {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({ type: 'varchar', length: 255 })\n  firstName: string;\n\n  @Column({ type: 'varchar', length: 255, nullable: true })\n  lastName?: string;\n\n  @Column({ nullable: true })\n  dob: Date;\n\n  @Column({ \n    type: 'varchar', \n    length: 255, \n    unique: true,\n    comment: 'User email address'\n  })\n  email: string;\n\n  @Column({ type: 'varchar', length: 255, unique: true, nullable: true })\n  phone?: string;\n\n  @Column({ type: 'varchar', length: 255 })\n  password: string;\n\n  @ManyToMany(() => Roles, (role) => role.users)\n  @JoinTable()\n  roles: Roles[];\n\n  @OneToMany(() => Order, (order) => order.user)\n  orders: Order[];\n\n  @OneToMany(() => Address, (address) => address.user)\n  addresses: Address[];\n\n  @Column({ type: 'boolean', default: false })\n  isActive: boolean;\n\n  @Column({ type: 'boolean', default: false })\n  isEmailVerified: boolean;\n\n  @Column({ type: 'boolean', default: false })\n  isPhoneVerified: boolean;\n\n  @Column({ type: 'varchar', length: 255, nullable: true })\n  refreshToken: string | null;\n\n  @Column({\n    type: 'varchar',\n    length: 255,\n    nullable: true,\n    default: 'profile.jpg',\n  })\n  profileImage: string;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n\n  @Column({ type: 'timestamp', nullable: true })\n  lastLoginAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Users } from './entities/users.entity';\nimport { Roles } from './entities/roles.entity'\nimport { Address } from './entities/address.entity';\nimport { Order } from 'src/orders/entities/order.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Users, Roles, Address, Order])],\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                changePassword\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Private\n                                fillTrend\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                generateCustomerReport\n                            \n                            \n                                    Async\n                                getAllUsers\n                            \n                            \n                                    Async\n                                getUserAnalytics\n                            \n                            \n                                    Async\n                                setStatus\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateProfileImage\n                            \n                            \n                                    Async\n                                updateUserRole\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, rolesRepository: Repository, orderRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:32\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        rolesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        orderRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        changePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    changePassword(id: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:160\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        fillTrend\n                        \n                    \n                \n            \n            \n                \n                        \n                    fillTrend(trendArr: any[], from: Date, to: Date, key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:284\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                trendArr\n                                            \n                                                        any[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                from\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                to\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     number[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(queryDto: AdminUserQueryDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:178\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryDto\n                                            \n                                                            AdminUserQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:109\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateCustomerReport\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateCustomerReport()\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:296\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAllUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllUsers(userQueryDto: UserQueryDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userQueryDto\n                                            \n                                                            UserQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserAnalytics\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserAnalytics()\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:226\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        setStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    setStatus(id: string, isActive: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:319\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                isActive\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateDto: AdminUpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:123\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateDto\n                                            \n                                                            AdminUpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateProfileImage\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateProfileImage(id: string, profileImage: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:141\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                profileImage\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateUserRole\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUserRole(id: string, role: Role)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:324\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                role\n                                            \n                                                            Role\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  BadRequestException,\n  InternalServerErrorException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, Like, Between, LessThan } from 'typeorm';\nimport { Users } from './entities/users.entity';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport * as bcrypt from 'bcrypt';\nimport { UserQueryDto } from './dto/user-query.dto';\nimport { Roles } from './entities/roles.entity';\nimport { Role } from './enums/roles.enum';\nimport { subDays, endOfDay, startOfDay, addDays } from 'date-fns';\nimport { Order } from 'src/orders/entities/order.entity';\nimport { AdminUpdateUserDto } from './dto/admin-user.dto';\nimport { AdminUserQueryDto } from './dto/admin-user-query.dto';\n\ninterface CustomerReportRow {\n  'Customer ID': string;\n  'First Name': string;\n  'Last Name': string;\n  'Email': string;\n  'Total Orders': number;\n  'Total Spent': number;\n  'Joined On': Date;\n}\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectRepository(Users)\n    private readonly usersRepository: Repository,\n\n    @InjectRepository(Roles)\n    private readonly rolesRepository: Repository,\n\n    @InjectRepository(Order)\n    private readonly orderRepository: Repository,\n  ) {}\n\n  // Create a new user\n  async create(createUserDto: CreateUserDto): Promise {\n    const { email, phone } = createUserDto;\n\n    const existingUser = await this.usersRepository.findOne({\n      where: [{ email }, { phone }],\n    });\n\n    if (existingUser) {\n      throw new BadRequestException('Email or Phone number already in use.');\n    }\n\n    const hashedPassword = await bcrypt.hash(createUserDto.password, 10);\n\n    const defaultRole = await this.rolesRepository.findOne({ where: { name: Role.CUSTOMER } });\n    if (!defaultRole) {\n      throw new Error('Default role not found');\n    }\n\n    const newUser = this.usersRepository.create({\n      ...createUserDto,\n      password: hashedPassword,\n      profileImage: createUserDto.profileImage || 'profile.jpg',\n      roles: [defaultRole],\n    });\n\n    return this.usersRepository.save(newUser);\n  }\n\n  // Get a list of users\n  async getAllUsers(userQueryDto: UserQueryDto): Promise {\n    const {\n      search,\n      page = 1,\n      limit = 10,\n      order_by = 'id',\n      order_direction = 'ASC',\n    } = userQueryDto;\n\n    const whereCondition = search\n      ? [\n          { email: Like(`%${search}%`) },\n          { phone: Like(`%${search}%`) },\n          { firstName: Like(`%${search}%`) },\n          { lastName: Like(`%${search}%`) },\n        ]\n      : undefined;\n\n    const [users, total] = await this.usersRepository.findAndCount({\n      where: whereCondition,\n      order: {\n        [order_by]: order_direction.toUpperCase() === 'DESC' ? 'DESC' : 'ASC',\n      },\n      skip: (page - 1) * limit,\n      take: limit,\n    });\n\n    if (total === 0) {\n      throw new NotFoundException('No users found.');\n    }\n\n    return users;\n  }\n\n  // Get user by ID\n  async findOne(id: string): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { id },\n      relations: ['roles'],\n    });\n\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found.`);\n    }\n\n    return user;\n  }\n\n  // Update user\n  async update(id: string, updateDto: AdminUpdateUserDto): Promise {\n    const user = await this.findOne(id);\n    Object.assign(user, updateDto);\n\n    if (updateDto.role) {\n      const roleEntity = await this.rolesRepository.findOne({\n        where: { name: updateDto.role },\n      });\n      if (!roleEntity) {\n        throw new BadRequestException(`Role ${updateDto.role} not found`);\n      }\n      user.roles = [roleEntity];\n    }\n\n    return this.usersRepository.save(user);\n  }\n\n  // Update profile image\n  async updateProfileImage(id: string, profileImage: string): Promise {\n    const user = await this.usersRepository.findOne({ where: { id } });\n\n    if (!user) {\n      throw new NotFoundException(\n        `Cannot update image: User with ID ${id} not found.`,\n      );\n    }\n\n    user.profileImage = profileImage;\n\n    try {\n      return await this.usersRepository.save(user);\n    } catch (error) {\n      throw new InternalServerErrorException('Failed to update profile image.');\n    }\n  }\n\n  // Change user password\n  async changePassword(id: string, password: string): Promise {\n    const user = await this.usersRepository.findOne({ where: { id } });\n\n    if (!user) {\n      throw new NotFoundException(\n        `Cannot change password: User with ID ${id} not found.`,\n      );\n    }\n\n    user.password = await bcrypt.hash(password, 10);\n\n    try {\n      return await this.usersRepository.save(user);\n    } catch (error) {\n      throw new InternalServerErrorException('Failed to change password.');\n    }\n  }\n\n  async findAll(queryDto: AdminUserQueryDto): Promise {\n    const {\n      page = 1,\n      limit = 10,\n      search,\n      role,\n      isActive,\n      sortBy = 'createdAt',\n      sortOrder = 'desc',\n    } = queryDto;\n\n    const queryBuilder = this.usersRepository.createQueryBuilder('user')\n      .leftJoinAndSelect('user.roles', 'roles');\n\n    if (search) {\n      queryBuilder.andWhere(\n        '(user.firstName ILIKE :search OR user.lastName ILIKE :search OR user.email ILIKE :search)',\n        { search: `%${search}%` },\n      );\n    }\n\n    if (role) {\n      queryBuilder.andWhere('roles.name = :role', { role });\n    }\n\n    if (isActive !== undefined) {\n      queryBuilder.andWhere('user.isActive = :isActive', { isActive });\n    }\n\n    const validSortFields = ['createdAt', 'lastLoginAt', 'firstName', 'lastName', 'email'];\n    const finalSortBy = validSortFields.includes(sortBy) ? sortBy : 'createdAt';\n    queryBuilder.orderBy(`user.${finalSortBy}`, sortOrder.toUpperCase() as 'ASC' | 'DESC');\n    \n    queryBuilder.skip((page - 1) * limit).take(limit);\n\n    const [items, total] = await queryBuilder.getManyAndCount();\n\n    return {\n      items,\n      meta: {\n        total,\n        page,\n        limit,\n        totalPages: Math.ceil(total / limit),\n      },\n    };\n  }\n\n  async getUserAnalytics() {\n    // 1. Date setup\n    const endDate = endOfDay(new Date());\n    const startDate = startOfDay(subDays(endDate, 6)); // Last 7 days\n    const prevStartDate = startOfDay(subDays(startDate, 7));\n    const prevEndDate = endOfDay(subDays(startDate, 1));\n\n    // 2. Total user stats\n    const totalUsers = await this.usersRepository.count();\n    const prevTotalUsers = await this.usersRepository.count({ where: { createdAt: LessThan(startDate) } });\n    const totalUsersChangePercent = prevTotalUsers > 0 ? ((totalUsers - prevTotalUsers) / prevTotalUsers) * 100 : (totalUsers > 0 ? 100 : 0);\n\n    // 3. New user trend (for Total Visitors chart)\n    const getDailyNewUsers = (from: Date, to: Date) => {\n        return this.usersRepository.createQueryBuilder('user')\n            .select(`DATE_TRUNC('day', \"createdAt\") as date, COUNT(id) as count`)\n            .where(`\"createdAt\" BETWEEN :from AND :to`, { from, to })\n            .groupBy('date')\n            .getRawMany();\n    };\n\n    const newUsersTrendRaw = await getDailyNewUsers(startDate, endDate);\n    const totalUsersTrend = this.fillTrend(newUsersTrendRaw, startDate, endDate, 'count');\n\n    // 4. Conversion Rate stats\n    const totalPurchasingUsers = await this.orderRepository.createQueryBuilder(\"order\")\n        .select('COUNT(DISTINCT \"userId\")')\n        .getRawOne()\n        .then(result => parseInt(result.count, 10) || 0);\n    \n    const conversionRate = totalUsers > 0 ? (totalPurchasingUsers / totalUsers) * 100 : 0;\n    \n    // 5. Conversion rate change and trend\n    const getDailyActiveCustomers = (from: Date, to: Date) => {\n        return this.orderRepository.createQueryBuilder('order')\n            .select(`DATE_TRUNC('day', \"createdAt\") as date, COUNT(DISTINCT \"userId\") as count`)\n            .where(`\"createdAt\" BETWEEN :from AND :to`, { from, to })\n            .groupBy('date')\n            .getRawMany();\n    }\n    const activeCustomersCurrentPeriodRaw = await getDailyActiveCustomers(startDate, endDate);\n    \n    const activeCustomersCurrentPeriod = await this.orderRepository.createQueryBuilder(\"order\").select('COUNT(DISTINCT \"userId\")').where({ createdAt: Between(startDate, endDate) }).getRawOne().then(r => parseInt(r.count, 10) || 0);\n    const activeCustomersPrevPeriod = await this.orderRepository.createQueryBuilder(\"order\").select('COUNT(DISTINCT \"userId\")').where({ createdAt: Between(prevStartDate, prevEndDate) }).getRawOne().then(r => parseInt(r.count, 10) || 0);\n    \n    const conversionRateChangePercent = activeCustomersPrevPeriod > 0 ? ((activeCustomersCurrentPeriod - activeCustomersPrevPeriod) / activeCustomersPrevPeriod) * 100 : (activeCustomersCurrentPeriod > 0 ? 100 : 0);\n    const conversionRateTrend = this.fillTrend(activeCustomersCurrentPeriodRaw, startDate, endDate, 'count');\n\n    return {\n        totalUsers,\n        totalUsersChangePercent,\n        totalUsersTrend,\n        conversionRate,\n        conversionRateChangePercent,\n        conversionRateTrend,\n    };\n  }\n\n  private fillTrend(trendArr: any[], from: Date, to: Date, key: string): number[] {\n    const trendMap = new Map(\n      trendArr.map(item => [startOfDay(item.date).toISOString(), parseInt(item[key], 10) || 0])\n    );\n    const filledTrend: number[] = [];\n    for (let d = startOfDay(from); d  {\n    const users = await this.usersRepository.find({\n      relations: ['orders'],\n    });\n\n    const reportData: CustomerReportRow[] = users.map(user => {\n      const totalOrders = user.orders.length;\n      const totalSpent = user.orders.reduce((sum, order) => sum + order.totalAmount, 0);\n\n      return {\n        'Customer ID': user.id,\n        'First Name': user.firstName,\n        'Last Name': user.lastName || '',\n        'Email': user.email,\n        'Total Orders': totalOrders,\n        'Total Spent': totalSpent,\n        'Joined On': user.createdAt,\n      };\n    });\n\n    return reportData;\n  }\n\n  async setStatus(id: string, isActive: boolean): Promise {\n    await this.usersRepository.update(id, { isActive });\n    return this.findOne(id);\n  }\n\n  async updateUserRole(id: string, role: Role): Promise {\n    const user = await this.findOne(id);\n    const roleEntity = await this.rolesRepository.findOne({\n      where: { name: role },\n    });\n    if (!roleEntity) {\n      throw new BadRequestException(`Role ${role} not found`);\n    }\n    user.roles = [roleEntity];\n    return this.usersRepository.save(user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ValidationErrorItem.html":{"url":"interfaces/ValidationErrorItem.html","title":"interface - ValidationErrorItem","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ValidationErrorItem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/validation-exception.filter.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            field\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        field\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        field:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  BadRequestException,\n  Logger,\n} from '@nestjs/common';\nimport { ValidationError } from 'class-validator';\nimport { Request, Response } from 'express';\n\ninterface ValidationErrorItem {\n  field?: string;\n  message: string;\n}\n\n@Catch(BadRequestException)\nexport class ValidationExceptionFilter implements ExceptionFilter {\n  private readonly logger = new Logger(ValidationExceptionFilter.name);\n\n  catch(exception: BadRequestException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = exception.getStatus();\n    const exceptionResponse = exception.getResponse();\n\n    // Log the exception\n    this.logger.error(\n      `${request.method} ${request.url} - Status: ${status} - ${JSON.stringify(exceptionResponse)}`,\n    );\n\n    // Format validation errors\n    let validationErrors: ValidationErrorItem[] = [];\n    \n    if (typeof exceptionResponse === 'object' && 'message' in exceptionResponse) {\n      const messages = (exceptionResponse as any).message;\n      \n      if (Array.isArray(messages)) {\n        // Handle array of validation messages\n        validationErrors = this.formatValidationErrors(messages);\n      } else if (typeof messages === 'string') {\n        // Handle single validation message\n        validationErrors = [{ message: messages }];\n      } else if (typeof messages === 'object') {\n        // Handle nested validation errors (from class-validator)\n        validationErrors = this.formatNestedValidationErrors(messages as ValidationError[]);\n      }\n    }\n\n    // Format the response\n    const errorResponse = {\n      statusCode: status,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n      method: request.method,\n      message: 'Validation failed',\n      errors: validationErrors,\n    };\n\n    response.status(status).json(errorResponse);\n  }\n\n  private formatValidationErrors(errors: string[]): ValidationErrorItem[] {\n    return errors.map(error => {\n      // Try to parse constraint error messages\n      const constraintMatch = error.match(/^([a-zA-Z0-9_]+):\\s*(.+)$/);\n      if (constraintMatch) {\n        return {\n          field: constraintMatch[1],\n          message: constraintMatch[2],\n        };\n      }\n      return { message: error };\n    });\n  }\n\n  private formatNestedValidationErrors(errors: ValidationError[]): ValidationErrorItem[] {\n    const formattedErrors: ValidationErrorItem[] = [];\n    \n    const extractErrors = (error: ValidationError, parentField = '') => {\n      const field = parentField ? `${parentField}.${error.property}` : error.property;\n      \n      // Use type assertion to handle the constraints property\n      const constraints = error.constraints as Record | undefined;\n      if (constraints && Object.keys(constraints).length > 0) {\n        Object.keys(constraints).forEach(key => {\n          formattedErrors.push({\n            field,\n            message: constraints[key],\n          });\n        });\n      }\n      \n      if (error.children && error.children.length > 0) {\n        error.children.forEach(child => extractErrors(child, field));\n      }\n    };\n    \n    errors.forEach(error => extractErrors(error));\n    return formattedErrors;\n  }\n} \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ValidationExceptionFilter.html":{"url":"classes/ValidationExceptionFilter.html","title":"class - ValidationExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ValidationExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/validation-exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                            \n                                    Private\n                                formatNestedValidationErrors\n                            \n                            \n                                    Private\n                                formatValidationErrors\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(ValidationExceptionFilter.name)\n                    \n                \n                    \n                        \n                                Defined in src/common/exceptions/validation-exception.filter.ts:18\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: BadRequestException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/exceptions/validation-exception.filter.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                        BadRequestException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        formatNestedValidationErrors\n                        \n                    \n                \n            \n            \n                \n                        \n                    formatNestedValidationErrors(errors: ValidationError[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/exceptions/validation-exception.filter.ts:77\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                errors\n                                            \n                                                        ValidationError[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ValidationErrorItem[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        formatValidationErrors\n                        \n                    \n                \n            \n            \n                \n                        \n                    formatValidationErrors(errors: string[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/exceptions/validation-exception.filter.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                errors\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ValidationErrorItem[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  BadRequestException,\n  Logger,\n} from '@nestjs/common';\nimport { ValidationError } from 'class-validator';\nimport { Request, Response } from 'express';\n\ninterface ValidationErrorItem {\n  field?: string;\n  message: string;\n}\n\n@Catch(BadRequestException)\nexport class ValidationExceptionFilter implements ExceptionFilter {\n  private readonly logger = new Logger(ValidationExceptionFilter.name);\n\n  catch(exception: BadRequestException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = exception.getStatus();\n    const exceptionResponse = exception.getResponse();\n\n    // Log the exception\n    this.logger.error(\n      `${request.method} ${request.url} - Status: ${status} - ${JSON.stringify(exceptionResponse)}`,\n    );\n\n    // Format validation errors\n    let validationErrors: ValidationErrorItem[] = [];\n    \n    if (typeof exceptionResponse === 'object' && 'message' in exceptionResponse) {\n      const messages = (exceptionResponse as any).message;\n      \n      if (Array.isArray(messages)) {\n        // Handle array of validation messages\n        validationErrors = this.formatValidationErrors(messages);\n      } else if (typeof messages === 'string') {\n        // Handle single validation message\n        validationErrors = [{ message: messages }];\n      } else if (typeof messages === 'object') {\n        // Handle nested validation errors (from class-validator)\n        validationErrors = this.formatNestedValidationErrors(messages as ValidationError[]);\n      }\n    }\n\n    // Format the response\n    const errorResponse = {\n      statusCode: status,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n      method: request.method,\n      message: 'Validation failed',\n      errors: validationErrors,\n    };\n\n    response.status(status).json(errorResponse);\n  }\n\n  private formatValidationErrors(errors: string[]): ValidationErrorItem[] {\n    return errors.map(error => {\n      // Try to parse constraint error messages\n      const constraintMatch = error.match(/^([a-zA-Z0-9_]+):\\s*(.+)$/);\n      if (constraintMatch) {\n        return {\n          field: constraintMatch[1],\n          message: constraintMatch[2],\n        };\n      }\n      return { message: error };\n    });\n  }\n\n  private formatNestedValidationErrors(errors: ValidationError[]): ValidationErrorItem[] {\n    const formattedErrors: ValidationErrorItem[] = [];\n    \n    const extractErrors = (error: ValidationError, parentField = '') => {\n      const field = parentField ? `${parentField}.${error.property}` : error.property;\n      \n      // Use type assertion to handle the constraints property\n      const constraints = error.constraints as Record | undefined;\n      if (constraints && Object.keys(constraints).length > 0) {\n        Object.keys(constraints).forEach(key => {\n          formattedErrors.push({\n            field,\n            message: constraints[key],\n          });\n        });\n      }\n      \n      if (error.children && error.children.length > 0) {\n        error.children.forEach(child => extractErrors(child, field));\n      }\n    };\n    \n    errors.forEach(error => extractErrors(error));\n    return formattedErrors;\n  }\n} \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/admin/controllers/admin-orders.controller.ts\n            \n            controller\n            AdminOrdersController\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/admin/controllers/admin-products.controller.ts\n            \n            controller\n            AdminProductsController\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/admin/controllers/admin-user.controller.ts\n            \n            controller\n            AdminUserController\n            \n                66 %\n                (4/6)\n            \n        \n        \n            \n                \n                src/admin/interfaces/paginated-response.interface.ts\n            \n            interface\n            PaginatedResponse\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/admin/interfaces/paginated-response.interface.ts\n            \n            interface\n            PaginationMeta\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                50 %\n                (2/4)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                28 %\n                (2/7)\n            \n        \n        \n            \n                \n                        src/auth/decorators/current-user.decorator.ts\n            \n            variable\n            CurrentUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/decorators/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/auth/decorators/roles.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/auth/guards/refresh-token.guard.ts\n            \n            injectable\n            RefreshTokenGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/auth/guards/roles.guard.ts\n            \n            variable\n            ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/interfaces/jwt-payload.interface.ts\n            \n            interface\n            JwtPayload\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/refresh-token.strategy.ts\n            \n            injectable\n            RefreshTokenStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/exceptions/validation-exception.filter.ts\n            \n            class\n            ValidationExceptionFilter\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/exceptions/validation-exception.filter.ts\n            \n            interface\n            ValidationErrorItem\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/orders/dto/create-order.dto.ts\n            \n            class\n            CreateOrderDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/orders/dto/create-order.dto.ts\n            \n            class\n            OrderItemDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/orders/dto/update-order.dto.ts\n            \n            class\n            UpdateOrderDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/orders/entities/order-item.entity.ts\n            \n            entity\n            OrderItem\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/orders/entities/order.entity.ts\n            \n            entity\n            Order\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/orders/orders.service.ts\n            \n            injectable\n            OrdersService\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                src/orders/orders.service.ts\n            \n            interface\n            SalesReportRow\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/products/dto/admin-product-query.dto.ts\n            \n            class\n            AdminProductQueryDto\n            \n                0 %\n                (0/19)\n            \n        \n        \n            \n                \n                src/products/dto/create-product.dto.ts\n            \n            class\n            CreateProductDto\n            \n                0 %\n                (0/19)\n            \n        \n        \n            \n                \n                src/products/dto/update-product.dto.ts\n            \n            class\n            UpdateProductDto\n            \n                0 %\n                (0/22)\n            \n        \n        \n            \n                \n                src/products/dto/update-stock.dto.ts\n            \n            class\n            UpdateStockDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/products/entities/product.entity.ts\n            \n            entity\n            Product\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/products/products.service.ts\n            \n            injectable\n            ProductsService\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/products/products.service.ts\n            \n            interface\n            ProductPerformanceRow\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/users/dto/admin-user-query.dto.ts\n            \n            class\n            AdminUserQueryDto\n            \n                46 %\n                (6/13)\n            \n        \n        \n            \n                \n                src/users/dto/admin-user-query.dto.ts\n            \n            interface\n            PaginatedResponse\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/users/dto/admin-user-query.dto.ts\n            \n            interface\n            PaginationMeta\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/users/dto/admin-user.dto.ts\n            \n            class\n            AdminUpdateUserDto\n            \n                90 %\n                (9/10)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dto/user-query.dto.ts\n            \n            class\n            UserQueryDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/entities/address.entity.ts\n            \n            entity\n            Address\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/entities/roles.entity.ts\n            \n            entity\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/entities/users.entity.ts\n            \n            entity\n            Users\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            interface\n            CustomerReportRow\n            \n                0 %\n                (0/8)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^11.0.1\n        \n            @nestjs/config : ^4.0.2\n        \n            @nestjs/core : ^11.0.1\n        \n            @nestjs/jwt : ^11.0.0\n        \n            @nestjs/passport : ^11.0.5\n        \n            @nestjs/platform-express : ^11.0.1\n        \n            @nestjs/swagger : ^11.1.5\n        \n            @nestjs/typeorm : ^11.0.0\n        \n            @types/bcrypt : ^5.0.2\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            cookie-parser : ^1.4.7\n        \n            D : ^1.0.0\n        \n            date-fns : ^4.1.0\n        \n            exceljs : ^4.4.0\n        \n            papaparse : ^5.4.1\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            pg : ^8.15.6\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.1\n        \n            swagger-ui-express : ^5.0.1\n        \n            typeorm : ^0.3.22\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            OrderDirection   (src/.../admin-product-query.dto.ts)\n                        \n                        \n                            OrderDirection   (src/.../order-direction.enum.ts)\n                        \n                        \n                            OrderStatus   (src/.../order-status.enum.ts)\n                        \n                        \n                            ProductCategory   (src/.../product.entity.ts)\n                        \n                        \n                            ProductCategory   (src/.../product-category.enum.ts)\n                        \n                        \n                            ProductSortBy   (src/.../admin-product-query.dto.ts)\n                        \n                        \n                            Role   (src/.../roles.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/products/dto/admin-product-query.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        OrderDirection\n                    \n                \n                        \n                            \n                                 ASC\n                            \n                        \n                        \n                            \n                                Value : ASC\n                            \n                        \n                        \n                            \n                                 DESC\n                            \n                        \n                        \n                            \n                                Value : DESC\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        ProductSortBy\n                    \n                \n                        \n                            \n                                 NAME\n                            \n                        \n                        \n                            \n                                Value : name\n                            \n                        \n                        \n                            \n                                 PRICE\n                            \n                        \n                        \n                            \n                                Value : price\n                            \n                        \n                        \n                            \n                                 STOCK_QUANTITY\n                            \n                        \n                        \n                            \n                                Value : stockQuantity\n                            \n                        \n                        \n                            \n                                 CREATED_AT\n                            \n                        \n                        \n                            \n                                Value : createdAt\n                            \n                        \n                        \n                            \n                                 UPDATED_AT\n                            \n                        \n                        \n                            \n                                Value : updatedAt\n                            \n                        \n                        \n                            \n                                 RATING\n                            \n                        \n                        \n                            \n                                Value : rating\n                            \n                        \n            \n        \n\n    src/users/enums/order-direction.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        OrderDirection\n                    \n                \n                        \n                            \n                                 ASC\n                            \n                        \n                        \n                            \n                                Value : asc\n                            \n                        \n                        \n                            \n                                 DESC\n                            \n                        \n                        \n                            \n                                Value : dsc\n                            \n                        \n            \n        \n\n    src/orders/enums/order-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        OrderStatus\n                    \n                \n                        \n                            \n                                 PENDING\n                            \n                        \n                        \n                            \n                                Value : PENDING\n                            \n                        \n                        \n                            \n                                 PROCESSING\n                            \n                        \n                        \n                            \n                                Value : PROCESSING\n                            \n                        \n                        \n                            \n                                 SHIPPED\n                            \n                        \n                        \n                            \n                                Value : SHIPPED\n                            \n                        \n                        \n                            \n                                 DELIVERED\n                            \n                        \n                        \n                            \n                                Value : DELIVERED\n                            \n                        \n                        \n                            \n                                 CANCELLED\n                            \n                        \n                        \n                            \n                                Value : CANCELLED\n                            \n                        \n                        \n                            \n                                 REFUNDED\n                            \n                        \n                        \n                            \n                                Value : REFUNDED\n                            \n                        \n            \n        \n\n    src/products/entities/product.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        ProductCategory\n                    \n                \n                        \n                            \n                                 ELECTRONICS\n                            \n                        \n                        \n                            \n                                Value : ELECTRONICS\n                            \n                        \n                        \n                            \n                                 CLOTHING\n                            \n                        \n                        \n                            \n                                Value : CLOTHING\n                            \n                        \n                        \n                            \n                                 T_SHIRTS\n                            \n                        \n                        \n                            \n                                Value : T_SHIRTS\n                            \n                        \n                        \n                            \n                                 SHIRTS\n                            \n                        \n                        \n                            \n                                Value : SHIRTS\n                            \n                        \n                        \n                            \n                                 PANTS\n                            \n                        \n                        \n                            \n                                Value : PANTS\n                            \n                        \n                        \n                            \n                                 SHOES\n                            \n                        \n                        \n                            \n                                Value : SHOES\n                            \n                        \n                        \n                            \n                                 ACCESSORIES\n                            \n                        \n                        \n                            \n                                Value : ACCESSORIES\n                            \n                        \n                        \n                            \n                                 BOOKS\n                            \n                        \n                        \n                            \n                                Value : BOOKS\n                            \n                        \n                        \n                            \n                                 HOME\n                            \n                        \n                        \n                            \n                                Value : HOME\n                            \n                        \n                        \n                            \n                                 SPORTS\n                            \n                        \n                        \n                            \n                                Value : SPORTS\n                            \n                        \n                        \n                            \n                                 BEAUTY\n                            \n                        \n                        \n                            \n                                Value : BEAUTY\n                            \n                        \n                        \n                            \n                                 FOOD\n                            \n                        \n                        \n                            \n                                Value : FOOD\n                            \n                        \n                        \n                            \n                                 OTHER\n                            \n                        \n                        \n                            \n                                Value : OTHER\n                            \n                        \n            \n        \n\n    src/products/enums/product-category.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ProductCategory\n                    \n                \n                        \n                            \n                                 T_SHIRTS\n                            \n                        \n                        \n                            \n                                Value : T_SHIRTS\n                            \n                        \n                        \n                            \n                                 SHIRTS\n                            \n                        \n                        \n                            \n                                Value : SHIRTS\n                            \n                        \n                        \n                            \n                                 JEANS\n                            \n                        \n                        \n                            \n                                Value : JEANS\n                            \n                        \n                        \n                            \n                                 PANTS\n                            \n                        \n                        \n                            \n                                Value : PANTS\n                            \n                        \n                        \n                            \n                                 DRESSES\n                            \n                        \n                        \n                            \n                                Value : DRESSES\n                            \n                        \n                        \n                            \n                                 SKIRTS\n                            \n                        \n                        \n                            \n                                Value : SKIRTS\n                            \n                        \n                        \n                            \n                                 SWEATERS\n                            \n                        \n                        \n                            \n                                Value : SWEATERS\n                            \n                        \n                        \n                            \n                                 JACKETS\n                            \n                        \n                        \n                            \n                                Value : JACKETS\n                            \n                        \n                        \n                            \n                                 HOODIES\n                            \n                        \n                        \n                            \n                                Value : HOODIES\n                            \n                        \n                        \n                            \n                                 SHOES\n                            \n                        \n                        \n                            \n                                Value : SHOES\n                            \n                        \n                        \n                            \n                                 ACCESSORIES\n                            \n                        \n                        \n                            \n                                Value : ACCESSORIES\n                            \n                        \n                        \n                            \n                                 UNDERWEAR\n                            \n                        \n                        \n                            \n                                Value : UNDERWEAR\n                            \n                        \n                        \n                            \n                                 SPORTWEAR\n                            \n                        \n                        \n                            \n                                Value : SPORTWEAR\n                            \n                        \n                        \n                            \n                                 SUITS\n                            \n                        \n                        \n                            \n                                Value : SUITS\n                            \n                        \n                        \n                            \n                                 FORMAL_WEAR\n                            \n                        \n                        \n                            \n                                Value : FORMAL_WEAR\n                            \n                        \n                        \n                            \n                                 CASUAL_WEAR\n                            \n                        \n                        \n                            \n                                Value : CASUAL_WEAR\n                            \n                        \n                        \n                            \n                                 ETHNIC_WEAR\n                            \n                        \n                        \n                            \n                                Value : ETHNIC_WEAR\n                            \n                        \n                        \n                            \n                                 KIDS_WEAR\n                            \n                        \n                        \n                            \n                                Value : KIDS_WEAR\n                            \n                        \n                        \n                            \n                                 MATERNITY_WEAR\n                            \n                        \n                        \n                            \n                                Value : MATERNITY_WEAR\n                            \n                        \n                        \n                            \n                                 PLUS_SIZE\n                            \n                        \n                        \n                            \n                                Value : PLUS_SIZE\n                            \n                        \n            \n        \n\n    src/users/enums/roles.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Role\n                    \n                \n                        \n                            \n                                 CUSTOMER\n                            \n                        \n                        \n                            \n                                Value : CUSTOMER\n                            \n                        \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : ADMIN\n                            \n                        \n                        \n                            \n                                 DELIVERY_MAN\n                            \n                        \n                        \n                            \n                                Value : DELIVERY_MAN\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g @nestjs/mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2025 AZMINUR RAHMAN\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AdminModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        OrdersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProductsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AdminModule\n\n\n\ncluster_AdminModule_imports\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_OrdersModule\n\n\n\ncluster_OrdersModule_exports\n\n\n\ncluster_OrdersModule_providers\n\n\n\ncluster_ProductsModule\n\n\n\ncluster_ProductsModule_exports\n\n\n\ncluster_ProductsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nOrdersModule\n\nOrdersModule\n\n\n\nAdminModule\n\nAdminModule\n\nAdminModule -->\n\nOrdersModule->AdminModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nOrdersModule->AppModule\n\n\n\n\n\nOrdersService \n\nOrdersService \n\nOrdersService  -->\n\nOrdersModule->OrdersService \n\n\n\n\n\nProductsModule\n\nProductsModule\n\nOrdersModule -->\n\nProductsModule->OrdersModule\n\n\n\nAdminModule -->\n\nProductsModule->AdminModule\n\n\n\nAppModule -->\n\nProductsModule->AppModule\n\n\n\n\n\nProductsService \n\nProductsService \n\nProductsService  -->\n\nProductsModule->ProductsService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nOrdersModule -->\n\nUsersModule->OrdersModule\n\n\n\nAdminModule -->\n\nUsersModule->AdminModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\nAppModule -->\n\nAdminModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nJwtAuthGuard \n\nJwtAuthGuard \n\nJwtAuthGuard  -->\n\nAuthModule->JwtAuthGuard \n\n\n\n\n\nRolesGuard \n\nRolesGuard \n\nRolesGuard  -->\n\nAuthModule->RolesGuard \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtAuthGuard\n\nJwtAuthGuard\n\nAuthModule -->\n\nJwtAuthGuard->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nRefreshTokenStrategy\n\nRefreshTokenStrategy\n\nAuthModule -->\n\nRefreshTokenStrategy->AuthModule\n\n\n\n\n\nOrdersService\n\nOrdersService\n\nOrdersModule -->\n\nOrdersService->OrdersModule\n\n\n\n\n\nProductsService\n\nProductsService\n\nProductsModule -->\n\nProductsService->ProductsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    6 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    8 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    14 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    9 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CurrentUser   (src/.../current-user.decorator.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../roles.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../roles.guard.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/decorators/current-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CurrentUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: unknown, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n    return request.user;\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: Role[]) => SetMetadata(ROLES_KEY, roles)\n                    \n                \n\n            \n                \n                    Decorator for specifying required roles for route handlers.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'roles'\n                    \n                \n\n            \n                \n                    Metadata key for storing roles in route handlers.\n\n                \n            \n\n        \n    \n\n    src/auth/guards/roles.guard.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'roles'\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
